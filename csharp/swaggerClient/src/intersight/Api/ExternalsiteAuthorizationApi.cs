/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using intersight.Client;
using intersight.Model;

namespace intersight.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalsiteAuthorizationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of &#39;externalsiteAuthorization&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>ExternalsiteAuthorizationList</returns>
        ExternalsiteAuthorizationList ExternalsiteAuthorizationsGet (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null);

        /// <summary>
        /// Get a list of &#39;externalsiteAuthorization&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>ApiResponse of ExternalsiteAuthorizationList</returns>
        ApiResponse<ExternalsiteAuthorizationList> ExternalsiteAuthorizationsGetWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null);
        /// <summary>
        /// Get a specific instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <returns>ExternalsiteAuthorization</returns>
        ExternalsiteAuthorization ExternalsiteAuthorizationsMoidGet (string moid, string moid2, string moid3, string moid4);

        /// <summary>
        /// Get a specific instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <returns>ApiResponse of ExternalsiteAuthorization</returns>
        ApiResponse<ExternalsiteAuthorization> ExternalsiteAuthorizationsMoidGetWithHttpInfo (string moid, string moid2, string moid3, string moid4);
        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns></returns>
        void ExternalsiteAuthorizationsMoidPatch (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4);

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExternalsiteAuthorizationsMoidPatchWithHttpInfo (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4);
        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns></returns>
        void ExternalsiteAuthorizationsMoidPost (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4);

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExternalsiteAuthorizationsMoidPostWithHttpInfo (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4);
        /// <summary>
        /// Create an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">externalsiteAuthorization to add</param>
        /// <param name="body2">externalsiteAuthorization to add</param>
        /// <param name="body3">externalsiteAuthorization to add</param>
        /// <param name="body4">externalsiteAuthorization to add</param>
        /// <returns></returns>
        void ExternalsiteAuthorizationsPost (ExternalsiteAuthorization body, ExternalsiteAuthorization body2, ExternalsiteAuthorization body3, ExternalsiteAuthorization body4);

        /// <summary>
        /// Create an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">externalsiteAuthorization to add</param>
        /// <param name="body2">externalsiteAuthorization to add</param>
        /// <param name="body3">externalsiteAuthorization to add</param>
        /// <param name="body4">externalsiteAuthorization to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExternalsiteAuthorizationsPostWithHttpInfo (ExternalsiteAuthorization body, ExternalsiteAuthorization body2, ExternalsiteAuthorization body3, ExternalsiteAuthorization body4);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of &#39;externalsiteAuthorization&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of ExternalsiteAuthorizationList</returns>
        System.Threading.Tasks.Task<ExternalsiteAuthorizationList> ExternalsiteAuthorizationsGetAsync (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null);

        /// <summary>
        /// Get a list of &#39;externalsiteAuthorization&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of ApiResponse (ExternalsiteAuthorizationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalsiteAuthorizationList>> ExternalsiteAuthorizationsGetAsyncWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null);
        /// <summary>
        /// Get a specific instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <returns>Task of ExternalsiteAuthorization</returns>
        System.Threading.Tasks.Task<ExternalsiteAuthorization> ExternalsiteAuthorizationsMoidGetAsync (string moid, string moid2, string moid3, string moid4);

        /// <summary>
        /// Get a specific instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <returns>Task of ApiResponse (ExternalsiteAuthorization)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalsiteAuthorization>> ExternalsiteAuthorizationsMoidGetAsyncWithHttpInfo (string moid, string moid2, string moid3, string moid4);
        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExternalsiteAuthorizationsMoidPatchAsync (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4);

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExternalsiteAuthorizationsMoidPatchAsyncWithHttpInfo (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4);
        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExternalsiteAuthorizationsMoidPostAsync (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4);

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExternalsiteAuthorizationsMoidPostAsyncWithHttpInfo (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4);
        /// <summary>
        /// Create an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">externalsiteAuthorization to add</param>
        /// <param name="body2">externalsiteAuthorization to add</param>
        /// <param name="body3">externalsiteAuthorization to add</param>
        /// <param name="body4">externalsiteAuthorization to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExternalsiteAuthorizationsPostAsync (ExternalsiteAuthorization body, ExternalsiteAuthorization body2, ExternalsiteAuthorization body3, ExternalsiteAuthorization body4);

        /// <summary>
        /// Create an instance of &#39;externalsiteAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">externalsiteAuthorization to add</param>
        /// <param name="body2">externalsiteAuthorization to add</param>
        /// <param name="body3">externalsiteAuthorization to add</param>
        /// <param name="body4">externalsiteAuthorization to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExternalsiteAuthorizationsPostAsyncWithHttpInfo (ExternalsiteAuthorization body, ExternalsiteAuthorization body2, ExternalsiteAuthorization body3, ExternalsiteAuthorization body4);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExternalsiteAuthorizationApi : IExternalsiteAuthorizationApi
    {
        private intersight.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalsiteAuthorizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExternalsiteAuthorizationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = intersight.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalsiteAuthorizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExternalsiteAuthorizationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = intersight.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intersight.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of &#39;externalsiteAuthorization&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>ExternalsiteAuthorizationList</returns>
        public ExternalsiteAuthorizationList ExternalsiteAuthorizationsGet (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null)
        {
             ApiResponse<ExternalsiteAuthorizationList> localVarResponse = ExternalsiteAuthorizationsGetWithHttpInfo(count, inlinecount, top, skip, filter, select, orderby, expand, apply, count2, inlinecount2, top2, skip2, filter2, select2, orderby2, expand2, apply2, count3, inlinecount3, top3, skip3, filter3, select3, orderby3, expand3, apply3, count4, inlinecount4, top4, skip4, filter4, select4, orderby4, expand4, apply4);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of &#39;externalsiteAuthorization&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>ApiResponse of ExternalsiteAuthorizationList</returns>
        public ApiResponse< ExternalsiteAuthorizationList > ExternalsiteAuthorizationsGetWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null)
        {

            var localVarPath = "/externalsite/Authorizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (inlinecount != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount)); // query parameter
            if (top != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (filter != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (select != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select)); // query parameter
            if (orderby != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby)); // query parameter
            if (expand != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (apply != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply)); // query parameter
            if (count2 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count2)); // query parameter
            if (inlinecount2 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount2)); // query parameter
            if (top2 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top2)); // query parameter
            if (skip2 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip2)); // query parameter
            if (filter2 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter2)); // query parameter
            if (select2 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select2)); // query parameter
            if (orderby2 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby2)); // query parameter
            if (expand2 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand2)); // query parameter
            if (apply2 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply2)); // query parameter
            if (count3 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count3)); // query parameter
            if (inlinecount3 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount3)); // query parameter
            if (top3 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top3)); // query parameter
            if (skip3 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip3)); // query parameter
            if (filter3 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter3)); // query parameter
            if (select3 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select3)); // query parameter
            if (orderby3 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby3)); // query parameter
            if (expand3 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand3)); // query parameter
            if (apply3 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply3)); // query parameter
            if (count4 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count4)); // query parameter
            if (inlinecount4 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount4)); // query parameter
            if (top4 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top4)); // query parameter
            if (skip4 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip4)); // query parameter
            if (filter4 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter4)); // query parameter
            if (select4 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select4)); // query parameter
            if (orderby4 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby4)); // query parameter
            if (expand4 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand4)); // query parameter
            if (apply4 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply4)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalsiteAuthorizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalsiteAuthorizationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalsiteAuthorizationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalsiteAuthorizationList)));
        }

        /// <summary>
        /// Get a list of &#39;externalsiteAuthorization&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of ExternalsiteAuthorizationList</returns>
        public async System.Threading.Tasks.Task<ExternalsiteAuthorizationList> ExternalsiteAuthorizationsGetAsync (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null)
        {
             ApiResponse<ExternalsiteAuthorizationList> localVarResponse = await ExternalsiteAuthorizationsGetAsyncWithHttpInfo(count, inlinecount, top, skip, filter, select, orderby, expand, apply, count2, inlinecount2, top2, skip2, filter2, select2, orderby2, expand2, apply2, count3, inlinecount3, top3, skip3, filter3, select3, orderby3, expand3, apply3, count4, inlinecount4, top4, skip4, filter4, select4, orderby4, expand4, apply4);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of &#39;externalsiteAuthorization&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of ApiResponse (ExternalsiteAuthorizationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalsiteAuthorizationList>> ExternalsiteAuthorizationsGetAsyncWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null)
        {

            var localVarPath = "/externalsite/Authorizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (inlinecount != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount)); // query parameter
            if (top != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (filter != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (select != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select)); // query parameter
            if (orderby != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby)); // query parameter
            if (expand != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (apply != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply)); // query parameter
            if (count2 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count2)); // query parameter
            if (inlinecount2 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount2)); // query parameter
            if (top2 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top2)); // query parameter
            if (skip2 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip2)); // query parameter
            if (filter2 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter2)); // query parameter
            if (select2 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select2)); // query parameter
            if (orderby2 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby2)); // query parameter
            if (expand2 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand2)); // query parameter
            if (apply2 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply2)); // query parameter
            if (count3 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count3)); // query parameter
            if (inlinecount3 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount3)); // query parameter
            if (top3 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top3)); // query parameter
            if (skip3 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip3)); // query parameter
            if (filter3 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter3)); // query parameter
            if (select3 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select3)); // query parameter
            if (orderby3 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby3)); // query parameter
            if (expand3 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand3)); // query parameter
            if (apply3 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply3)); // query parameter
            if (count4 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count4)); // query parameter
            if (inlinecount4 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount4)); // query parameter
            if (top4 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top4)); // query parameter
            if (skip4 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip4)); // query parameter
            if (filter4 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter4)); // query parameter
            if (select4 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select4)); // query parameter
            if (orderby4 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby4)); // query parameter
            if (expand4 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand4)); // query parameter
            if (apply4 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply4)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalsiteAuthorizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalsiteAuthorizationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalsiteAuthorizationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalsiteAuthorizationList)));
        }

        /// <summary>
        /// Get a specific instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <returns>ExternalsiteAuthorization</returns>
        public ExternalsiteAuthorization ExternalsiteAuthorizationsMoidGet (string moid, string moid2, string moid3, string moid4)
        {
             ApiResponse<ExternalsiteAuthorization> localVarResponse = ExternalsiteAuthorizationsMoidGetWithHttpInfo(moid, moid2, moid3, moid4);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <returns>ApiResponse of ExternalsiteAuthorization</returns>
        public ApiResponse< ExternalsiteAuthorization > ExternalsiteAuthorizationsMoidGetWithHttpInfo (string moid, string moid2, string moid3, string moid4)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidGet");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidGet");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidGet");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidGet");

            var localVarPath = "/externalsite/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalsiteAuthorizationsMoidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalsiteAuthorization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalsiteAuthorization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalsiteAuthorization)));
        }

        /// <summary>
        /// Get a specific instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <returns>Task of ExternalsiteAuthorization</returns>
        public async System.Threading.Tasks.Task<ExternalsiteAuthorization> ExternalsiteAuthorizationsMoidGetAsync (string moid, string moid2, string moid3, string moid4)
        {
             ApiResponse<ExternalsiteAuthorization> localVarResponse = await ExternalsiteAuthorizationsMoidGetAsyncWithHttpInfo(moid, moid2, moid3, moid4);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <returns>Task of ApiResponse (ExternalsiteAuthorization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalsiteAuthorization>> ExternalsiteAuthorizationsMoidGetAsyncWithHttpInfo (string moid, string moid2, string moid3, string moid4)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidGet");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidGet");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidGet");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidGet");

            var localVarPath = "/externalsite/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalsiteAuthorizationsMoidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalsiteAuthorization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalsiteAuthorization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalsiteAuthorization)));
        }

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns></returns>
        public void ExternalsiteAuthorizationsMoidPatch (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4)
        {
             ExternalsiteAuthorizationsMoidPatchWithHttpInfo(moid, body, moid2, body2, moid3, body3, moid4, body4);
        }

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExternalsiteAuthorizationsMoidPatchWithHttpInfo (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");

            var localVarPath = "/externalsite/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (body4 != null && body4.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body4; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalsiteAuthorizationsMoidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExternalsiteAuthorizationsMoidPatchAsync (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4)
        {
             await ExternalsiteAuthorizationsMoidPatchAsyncWithHttpInfo(moid, body, moid2, body2, moid3, body3, moid4, body4);

        }

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExternalsiteAuthorizationsMoidPatchAsyncWithHttpInfo (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPatch");

            var localVarPath = "/externalsite/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (body4 != null && body4.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body4; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalsiteAuthorizationsMoidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns></returns>
        public void ExternalsiteAuthorizationsMoidPost (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4)
        {
             ExternalsiteAuthorizationsMoidPostWithHttpInfo(moid, body, moid2, body2, moid3, body3, moid4, body4);
        }

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExternalsiteAuthorizationsMoidPostWithHttpInfo (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");

            var localVarPath = "/externalsite/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (body4 != null && body4.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body4; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalsiteAuthorizationsMoidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExternalsiteAuthorizationsMoidPostAsync (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4)
        {
             await ExternalsiteAuthorizationsMoidPostAsyncWithHttpInfo(moid, body, moid2, body2, moid3, body3, moid4, body4);

        }

        /// <summary>
        /// Update an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body">externalsiteAuthorization to update</param>
        /// <param name="moid2">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body2">externalsiteAuthorization to update</param>
        /// <param name="moid3">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body3">externalsiteAuthorization to update</param>
        /// <param name="moid4">The moid of the externalsiteAuthorization instance.</param>
        /// <param name="body4">externalsiteAuthorization to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExternalsiteAuthorizationsMoidPostAsyncWithHttpInfo (string moid, ExternalsiteAuthorization body, string moid2, ExternalsiteAuthorization body2, string moid3, ExternalsiteAuthorization body3, string moid4, ExternalsiteAuthorization body4)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsMoidPost");

            var localVarPath = "/externalsite/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (body4 != null && body4.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body4; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalsiteAuthorizationsMoidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">externalsiteAuthorization to add</param>
        /// <param name="body2">externalsiteAuthorization to add</param>
        /// <param name="body3">externalsiteAuthorization to add</param>
        /// <param name="body4">externalsiteAuthorization to add</param>
        /// <returns></returns>
        public void ExternalsiteAuthorizationsPost (ExternalsiteAuthorization body, ExternalsiteAuthorization body2, ExternalsiteAuthorization body3, ExternalsiteAuthorization body4)
        {
             ExternalsiteAuthorizationsPostWithHttpInfo(body, body2, body3, body4);
        }

        /// <summary>
        /// Create an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">externalsiteAuthorization to add</param>
        /// <param name="body2">externalsiteAuthorization to add</param>
        /// <param name="body3">externalsiteAuthorization to add</param>
        /// <param name="body4">externalsiteAuthorization to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExternalsiteAuthorizationsPostWithHttpInfo (ExternalsiteAuthorization body, ExternalsiteAuthorization body2, ExternalsiteAuthorization body3, ExternalsiteAuthorization body4)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsPost");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsPost");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsPost");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsPost");

            var localVarPath = "/externalsite/Authorizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body4 != null && body4.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body4; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalsiteAuthorizationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">externalsiteAuthorization to add</param>
        /// <param name="body2">externalsiteAuthorization to add</param>
        /// <param name="body3">externalsiteAuthorization to add</param>
        /// <param name="body4">externalsiteAuthorization to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExternalsiteAuthorizationsPostAsync (ExternalsiteAuthorization body, ExternalsiteAuthorization body2, ExternalsiteAuthorization body3, ExternalsiteAuthorization body4)
        {
             await ExternalsiteAuthorizationsPostAsyncWithHttpInfo(body, body2, body3, body4);

        }

        /// <summary>
        /// Create an instance of &#39;externalsiteAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">externalsiteAuthorization to add</param>
        /// <param name="body2">externalsiteAuthorization to add</param>
        /// <param name="body3">externalsiteAuthorization to add</param>
        /// <param name="body4">externalsiteAuthorization to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExternalsiteAuthorizationsPostAsyncWithHttpInfo (ExternalsiteAuthorization body, ExternalsiteAuthorization body2, ExternalsiteAuthorization body3, ExternalsiteAuthorization body4)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsPost");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsPost");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsPost");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling ExternalsiteAuthorizationApi->ExternalsiteAuthorizationsPost");

            var localVarPath = "/externalsite/Authorizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body4 != null && body4.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body4; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExternalsiteAuthorizationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
