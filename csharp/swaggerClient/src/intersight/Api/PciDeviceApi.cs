/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using intersight.Client;
using intersight.Model;

namespace intersight.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPciDeviceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of &#39;pciDevice&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>PciDeviceList</returns>
        PciDeviceList PciDevicesGet (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null);

        /// <summary>
        /// Get a list of &#39;pciDevice&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>ApiResponse of PciDeviceList</returns>
        ApiResponse<PciDeviceList> PciDevicesGetWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null);
        /// <summary>
        /// Get a specific instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <returns>PciDevice</returns>
        PciDevice PciDevicesMoidGet (string moid);

        /// <summary>
        /// Get a specific instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <returns>ApiResponse of PciDevice</returns>
        ApiResponse<PciDevice> PciDevicesMoidGetWithHttpInfo (string moid);
        /// <summary>
        /// Update an instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns></returns>
        void PciDevicesMoidPatch (string moid, PciDevice body);

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PciDevicesMoidPatchWithHttpInfo (string moid, PciDevice body);
        /// <summary>
        /// Update an instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns></returns>
        void PciDevicesMoidPost (string moid, PciDevice body);

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PciDevicesMoidPostWithHttpInfo (string moid, PciDevice body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of &#39;pciDevice&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>Task of PciDeviceList</returns>
        System.Threading.Tasks.Task<PciDeviceList> PciDevicesGetAsync (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null);

        /// <summary>
        /// Get a list of &#39;pciDevice&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>Task of ApiResponse (PciDeviceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PciDeviceList>> PciDevicesGetAsyncWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null);
        /// <summary>
        /// Get a specific instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <returns>Task of PciDevice</returns>
        System.Threading.Tasks.Task<PciDevice> PciDevicesMoidGetAsync (string moid);

        /// <summary>
        /// Get a specific instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <returns>Task of ApiResponse (PciDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<PciDevice>> PciDevicesMoidGetAsyncWithHttpInfo (string moid);
        /// <summary>
        /// Update an instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PciDevicesMoidPatchAsync (string moid, PciDevice body);

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PciDevicesMoidPatchAsyncWithHttpInfo (string moid, PciDevice body);
        /// <summary>
        /// Update an instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PciDevicesMoidPostAsync (string moid, PciDevice body);

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PciDevicesMoidPostAsyncWithHttpInfo (string moid, PciDevice body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PciDeviceApi : IPciDeviceApi
    {
        private intersight.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PciDeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PciDeviceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = intersight.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PciDeviceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PciDeviceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = intersight.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intersight.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of &#39;pciDevice&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>PciDeviceList</returns>
        public PciDeviceList PciDevicesGet (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null)
        {
             ApiResponse<PciDeviceList> localVarResponse = PciDevicesGetWithHttpInfo(count, inlinecount, top, skip, filter, select, orderby, expand, apply, at);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of &#39;pciDevice&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>ApiResponse of PciDeviceList</returns>
        public ApiResponse< PciDeviceList > PciDevicesGetWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null)
        {

            var localVarPath = "/pci/Devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (inlinecount != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount)); // query parameter
            if (top != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (filter != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (select != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select)); // query parameter
            if (orderby != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby)); // query parameter
            if (expand != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (apply != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply)); // query parameter
            if (at != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PciDevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PciDeviceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PciDeviceList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PciDeviceList)));
        }

        /// <summary>
        /// Get a list of &#39;pciDevice&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>Task of PciDeviceList</returns>
        public async System.Threading.Tasks.Task<PciDeviceList> PciDevicesGetAsync (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null)
        {
             ApiResponse<PciDeviceList> localVarResponse = await PciDevicesGetAsyncWithHttpInfo(count, inlinecount, top, skip, filter, select, orderby, expand, apply, at);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of &#39;pciDevice&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>Task of ApiResponse (PciDeviceList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PciDeviceList>> PciDevicesGetAsyncWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null)
        {

            var localVarPath = "/pci/Devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (inlinecount != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount)); // query parameter
            if (top != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (filter != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (select != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select)); // query parameter
            if (orderby != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby)); // query parameter
            if (expand != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (apply != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply)); // query parameter
            if (at != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PciDevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PciDeviceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PciDeviceList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PciDeviceList)));
        }

        /// <summary>
        /// Get a specific instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <returns>PciDevice</returns>
        public PciDevice PciDevicesMoidGet (string moid)
        {
             ApiResponse<PciDevice> localVarResponse = PciDevicesMoidGetWithHttpInfo(moid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <returns>ApiResponse of PciDevice</returns>
        public ApiResponse< PciDevice > PciDevicesMoidGetWithHttpInfo (string moid)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling PciDeviceApi->PciDevicesMoidGet");

            var localVarPath = "/pci/Devices/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PciDevicesMoidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PciDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PciDevice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PciDevice)));
        }

        /// <summary>
        /// Get a specific instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <returns>Task of PciDevice</returns>
        public async System.Threading.Tasks.Task<PciDevice> PciDevicesMoidGetAsync (string moid)
        {
             ApiResponse<PciDevice> localVarResponse = await PciDevicesMoidGetAsyncWithHttpInfo(moid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <returns>Task of ApiResponse (PciDevice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PciDevice>> PciDevicesMoidGetAsyncWithHttpInfo (string moid)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling PciDeviceApi->PciDevicesMoidGet");

            var localVarPath = "/pci/Devices/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PciDevicesMoidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PciDevice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PciDevice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PciDevice)));
        }

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns></returns>
        public void PciDevicesMoidPatch (string moid, PciDevice body)
        {
             PciDevicesMoidPatchWithHttpInfo(moid, body);
        }

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PciDevicesMoidPatchWithHttpInfo (string moid, PciDevice body)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling PciDeviceApi->PciDevicesMoidPatch");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PciDeviceApi->PciDevicesMoidPatch");

            var localVarPath = "/pci/Devices/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PciDevicesMoidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PciDevicesMoidPatchAsync (string moid, PciDevice body)
        {
             await PciDevicesMoidPatchAsyncWithHttpInfo(moid, body);

        }

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PciDevicesMoidPatchAsyncWithHttpInfo (string moid, PciDevice body)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling PciDeviceApi->PciDevicesMoidPatch");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PciDeviceApi->PciDevicesMoidPatch");

            var localVarPath = "/pci/Devices/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PciDevicesMoidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns></returns>
        public void PciDevicesMoidPost (string moid, PciDevice body)
        {
             PciDevicesMoidPostWithHttpInfo(moid, body);
        }

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PciDevicesMoidPostWithHttpInfo (string moid, PciDevice body)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling PciDeviceApi->PciDevicesMoidPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PciDeviceApi->PciDevicesMoidPost");

            var localVarPath = "/pci/Devices/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PciDevicesMoidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PciDevicesMoidPostAsync (string moid, PciDevice body)
        {
             await PciDevicesMoidPostAsyncWithHttpInfo(moid, body);

        }

        /// <summary>
        /// Update an instance of &#39;pciDevice&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the pciDevice instance.</param>
        /// <param name="body">pciDevice to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PciDevicesMoidPostAsyncWithHttpInfo (string moid, PciDevice body)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling PciDeviceApi->PciDevicesMoidPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PciDeviceApi->PciDevicesMoidPost");

            var localVarPath = "/pci/Devices/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PciDevicesMoidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
