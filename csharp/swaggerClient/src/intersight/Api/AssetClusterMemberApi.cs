/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using intersight.Client;
using intersight.Model;

namespace intersight.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetClusterMemberApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of &#39;assetClusterMember&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at2">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at3">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at4">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at5">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count6">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount6">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top6">The max number of records to return (optional)</param>
        /// <param name="skip6">The number of records to skip (optional)</param>
        /// <param name="filter6">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select6">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby6">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand6">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply6">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at6">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count7">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount7">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top7">The max number of records to return (optional)</param>
        /// <param name="skip7">The number of records to skip (optional)</param>
        /// <param name="filter7">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select7">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby7">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand7">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply7">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count8">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount8">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top8">The max number of records to return (optional)</param>
        /// <param name="skip8">The number of records to skip (optional)</param>
        /// <param name="filter8">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select8">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby8">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand8">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply8">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count9">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount9">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top9">The max number of records to return (optional)</param>
        /// <param name="skip9">The number of records to skip (optional)</param>
        /// <param name="filter9">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select9">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby9">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand9">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply9">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count10">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount10">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top10">The max number of records to return (optional)</param>
        /// <param name="skip10">The number of records to skip (optional)</param>
        /// <param name="filter10">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select10">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby10">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand10">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply10">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count11">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount11">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top11">The max number of records to return (optional)</param>
        /// <param name="skip11">The number of records to skip (optional)</param>
        /// <param name="filter11">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select11">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby11">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand11">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply11">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count12">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount12">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top12">The max number of records to return (optional)</param>
        /// <param name="skip12">The number of records to skip (optional)</param>
        /// <param name="filter12">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select12">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby12">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand12">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply12">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count13">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount13">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top13">The max number of records to return (optional)</param>
        /// <param name="skip13">The number of records to skip (optional)</param>
        /// <param name="filter13">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select13">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby13">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand13">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply13">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count14">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount14">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top14">The max number of records to return (optional)</param>
        /// <param name="skip14">The number of records to skip (optional)</param>
        /// <param name="filter14">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select14">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby14">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand14">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply14">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count15">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount15">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top15">The max number of records to return (optional)</param>
        /// <param name="skip15">The number of records to skip (optional)</param>
        /// <param name="filter15">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select15">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby15">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand15">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply15">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>AssetClusterMemberList</returns>
        AssetClusterMemberList AssetClusterMembersGet (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, string at2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, string at3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, string at4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null, string at5 = null, bool? count6 = null, string inlinecount6 = null, int? top6 = null, int? skip6 = null, string filter6 = null, string select6 = null, string orderby6 = null, string expand6 = null, string apply6 = null, string at6 = null, bool? count7 = null, string inlinecount7 = null, int? top7 = null, int? skip7 = null, string filter7 = null, string select7 = null, string orderby7 = null, string expand7 = null, string apply7 = null, bool? count8 = null, string inlinecount8 = null, int? top8 = null, int? skip8 = null, string filter8 = null, string select8 = null, string orderby8 = null, string expand8 = null, string apply8 = null, bool? count9 = null, string inlinecount9 = null, int? top9 = null, int? skip9 = null, string filter9 = null, string select9 = null, string orderby9 = null, string expand9 = null, string apply9 = null, bool? count10 = null, string inlinecount10 = null, int? top10 = null, int? skip10 = null, string filter10 = null, string select10 = null, string orderby10 = null, string expand10 = null, string apply10 = null, bool? count11 = null, string inlinecount11 = null, int? top11 = null, int? skip11 = null, string filter11 = null, string select11 = null, string orderby11 = null, string expand11 = null, string apply11 = null, bool? count12 = null, string inlinecount12 = null, int? top12 = null, int? skip12 = null, string filter12 = null, string select12 = null, string orderby12 = null, string expand12 = null, string apply12 = null, bool? count13 = null, string inlinecount13 = null, int? top13 = null, int? skip13 = null, string filter13 = null, string select13 = null, string orderby13 = null, string expand13 = null, string apply13 = null, bool? count14 = null, string inlinecount14 = null, int? top14 = null, int? skip14 = null, string filter14 = null, string select14 = null, string orderby14 = null, string expand14 = null, string apply14 = null, bool? count15 = null, string inlinecount15 = null, int? top15 = null, int? skip15 = null, string filter15 = null, string select15 = null, string orderby15 = null, string expand15 = null, string apply15 = null);

        /// <summary>
        /// Get a list of &#39;assetClusterMember&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at2">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at3">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at4">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at5">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count6">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount6">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top6">The max number of records to return (optional)</param>
        /// <param name="skip6">The number of records to skip (optional)</param>
        /// <param name="filter6">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select6">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby6">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand6">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply6">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at6">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count7">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount7">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top7">The max number of records to return (optional)</param>
        /// <param name="skip7">The number of records to skip (optional)</param>
        /// <param name="filter7">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select7">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby7">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand7">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply7">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count8">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount8">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top8">The max number of records to return (optional)</param>
        /// <param name="skip8">The number of records to skip (optional)</param>
        /// <param name="filter8">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select8">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby8">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand8">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply8">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count9">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount9">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top9">The max number of records to return (optional)</param>
        /// <param name="skip9">The number of records to skip (optional)</param>
        /// <param name="filter9">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select9">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby9">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand9">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply9">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count10">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount10">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top10">The max number of records to return (optional)</param>
        /// <param name="skip10">The number of records to skip (optional)</param>
        /// <param name="filter10">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select10">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby10">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand10">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply10">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count11">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount11">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top11">The max number of records to return (optional)</param>
        /// <param name="skip11">The number of records to skip (optional)</param>
        /// <param name="filter11">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select11">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby11">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand11">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply11">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count12">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount12">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top12">The max number of records to return (optional)</param>
        /// <param name="skip12">The number of records to skip (optional)</param>
        /// <param name="filter12">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select12">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby12">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand12">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply12">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count13">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount13">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top13">The max number of records to return (optional)</param>
        /// <param name="skip13">The number of records to skip (optional)</param>
        /// <param name="filter13">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select13">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby13">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand13">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply13">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count14">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount14">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top14">The max number of records to return (optional)</param>
        /// <param name="skip14">The number of records to skip (optional)</param>
        /// <param name="filter14">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select14">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby14">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand14">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply14">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count15">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount15">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top15">The max number of records to return (optional)</param>
        /// <param name="skip15">The number of records to skip (optional)</param>
        /// <param name="filter15">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select15">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby15">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand15">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply15">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>ApiResponse of AssetClusterMemberList</returns>
        ApiResponse<AssetClusterMemberList> AssetClusterMembersGetWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, string at2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, string at3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, string at4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null, string at5 = null, bool? count6 = null, string inlinecount6 = null, int? top6 = null, int? skip6 = null, string filter6 = null, string select6 = null, string orderby6 = null, string expand6 = null, string apply6 = null, string at6 = null, bool? count7 = null, string inlinecount7 = null, int? top7 = null, int? skip7 = null, string filter7 = null, string select7 = null, string orderby7 = null, string expand7 = null, string apply7 = null, bool? count8 = null, string inlinecount8 = null, int? top8 = null, int? skip8 = null, string filter8 = null, string select8 = null, string orderby8 = null, string expand8 = null, string apply8 = null, bool? count9 = null, string inlinecount9 = null, int? top9 = null, int? skip9 = null, string filter9 = null, string select9 = null, string orderby9 = null, string expand9 = null, string apply9 = null, bool? count10 = null, string inlinecount10 = null, int? top10 = null, int? skip10 = null, string filter10 = null, string select10 = null, string orderby10 = null, string expand10 = null, string apply10 = null, bool? count11 = null, string inlinecount11 = null, int? top11 = null, int? skip11 = null, string filter11 = null, string select11 = null, string orderby11 = null, string expand11 = null, string apply11 = null, bool? count12 = null, string inlinecount12 = null, int? top12 = null, int? skip12 = null, string filter12 = null, string select12 = null, string orderby12 = null, string expand12 = null, string apply12 = null, bool? count13 = null, string inlinecount13 = null, int? top13 = null, int? skip13 = null, string filter13 = null, string select13 = null, string orderby13 = null, string expand13 = null, string apply13 = null, bool? count14 = null, string inlinecount14 = null, int? top14 = null, int? skip14 = null, string filter14 = null, string select14 = null, string orderby14 = null, string expand14 = null, string apply14 = null, bool? count15 = null, string inlinecount15 = null, int? top15 = null, int? skip15 = null, string filter15 = null, string select15 = null, string orderby15 = null, string expand15 = null, string apply15 = null);
        /// <summary>
        /// Get a specific instance of &#39;assetClusterMember&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the assetClusterMember instance.</param>
        /// <param name="moid2">The moid of the assetClusterMember instance.</param>
        /// <param name="moid3">The moid of the assetClusterMember instance.</param>
        /// <param name="moid4">The moid of the assetClusterMember instance.</param>
        /// <param name="moid5">The moid of the assetClusterMember instance.</param>
        /// <param name="moid6">The moid of the assetClusterMember instance.</param>
        /// <param name="moid7">The moid of the assetClusterMember instance.</param>
        /// <param name="moid8">The moid of the assetClusterMember instance.</param>
        /// <param name="moid9">The moid of the assetClusterMember instance.</param>
        /// <param name="moid10">The moid of the assetClusterMember instance.</param>
        /// <param name="moid11">The moid of the assetClusterMember instance.</param>
        /// <param name="moid12">The moid of the assetClusterMember instance.</param>
        /// <param name="moid13">The moid of the assetClusterMember instance.</param>
        /// <param name="moid14">The moid of the assetClusterMember instance.</param>
        /// <param name="moid15">The moid of the assetClusterMember instance.</param>
        /// <returns>AssetClusterMember</returns>
        AssetClusterMember AssetClusterMembersMoidGet (string moid, string moid2, string moid3, string moid4, string moid5, string moid6, string moid7, string moid8, string moid9, string moid10, string moid11, string moid12, string moid13, string moid14, string moid15);

        /// <summary>
        /// Get a specific instance of &#39;assetClusterMember&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the assetClusterMember instance.</param>
        /// <param name="moid2">The moid of the assetClusterMember instance.</param>
        /// <param name="moid3">The moid of the assetClusterMember instance.</param>
        /// <param name="moid4">The moid of the assetClusterMember instance.</param>
        /// <param name="moid5">The moid of the assetClusterMember instance.</param>
        /// <param name="moid6">The moid of the assetClusterMember instance.</param>
        /// <param name="moid7">The moid of the assetClusterMember instance.</param>
        /// <param name="moid8">The moid of the assetClusterMember instance.</param>
        /// <param name="moid9">The moid of the assetClusterMember instance.</param>
        /// <param name="moid10">The moid of the assetClusterMember instance.</param>
        /// <param name="moid11">The moid of the assetClusterMember instance.</param>
        /// <param name="moid12">The moid of the assetClusterMember instance.</param>
        /// <param name="moid13">The moid of the assetClusterMember instance.</param>
        /// <param name="moid14">The moid of the assetClusterMember instance.</param>
        /// <param name="moid15">The moid of the assetClusterMember instance.</param>
        /// <returns>ApiResponse of AssetClusterMember</returns>
        ApiResponse<AssetClusterMember> AssetClusterMembersMoidGetWithHttpInfo (string moid, string moid2, string moid3, string moid4, string moid5, string moid6, string moid7, string moid8, string moid9, string moid10, string moid11, string moid12, string moid13, string moid14, string moid15);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of &#39;assetClusterMember&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at2">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at3">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at4">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at5">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count6">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount6">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top6">The max number of records to return (optional)</param>
        /// <param name="skip6">The number of records to skip (optional)</param>
        /// <param name="filter6">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select6">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby6">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand6">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply6">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at6">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count7">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount7">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top7">The max number of records to return (optional)</param>
        /// <param name="skip7">The number of records to skip (optional)</param>
        /// <param name="filter7">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select7">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby7">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand7">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply7">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count8">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount8">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top8">The max number of records to return (optional)</param>
        /// <param name="skip8">The number of records to skip (optional)</param>
        /// <param name="filter8">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select8">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby8">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand8">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply8">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count9">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount9">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top9">The max number of records to return (optional)</param>
        /// <param name="skip9">The number of records to skip (optional)</param>
        /// <param name="filter9">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select9">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby9">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand9">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply9">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count10">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount10">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top10">The max number of records to return (optional)</param>
        /// <param name="skip10">The number of records to skip (optional)</param>
        /// <param name="filter10">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select10">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby10">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand10">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply10">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count11">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount11">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top11">The max number of records to return (optional)</param>
        /// <param name="skip11">The number of records to skip (optional)</param>
        /// <param name="filter11">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select11">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby11">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand11">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply11">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count12">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount12">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top12">The max number of records to return (optional)</param>
        /// <param name="skip12">The number of records to skip (optional)</param>
        /// <param name="filter12">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select12">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby12">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand12">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply12">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count13">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount13">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top13">The max number of records to return (optional)</param>
        /// <param name="skip13">The number of records to skip (optional)</param>
        /// <param name="filter13">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select13">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby13">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand13">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply13">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count14">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount14">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top14">The max number of records to return (optional)</param>
        /// <param name="skip14">The number of records to skip (optional)</param>
        /// <param name="filter14">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select14">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby14">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand14">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply14">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count15">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount15">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top15">The max number of records to return (optional)</param>
        /// <param name="skip15">The number of records to skip (optional)</param>
        /// <param name="filter15">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select15">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby15">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand15">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply15">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of AssetClusterMemberList</returns>
        System.Threading.Tasks.Task<AssetClusterMemberList> AssetClusterMembersGetAsync (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, string at2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, string at3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, string at4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null, string at5 = null, bool? count6 = null, string inlinecount6 = null, int? top6 = null, int? skip6 = null, string filter6 = null, string select6 = null, string orderby6 = null, string expand6 = null, string apply6 = null, string at6 = null, bool? count7 = null, string inlinecount7 = null, int? top7 = null, int? skip7 = null, string filter7 = null, string select7 = null, string orderby7 = null, string expand7 = null, string apply7 = null, bool? count8 = null, string inlinecount8 = null, int? top8 = null, int? skip8 = null, string filter8 = null, string select8 = null, string orderby8 = null, string expand8 = null, string apply8 = null, bool? count9 = null, string inlinecount9 = null, int? top9 = null, int? skip9 = null, string filter9 = null, string select9 = null, string orderby9 = null, string expand9 = null, string apply9 = null, bool? count10 = null, string inlinecount10 = null, int? top10 = null, int? skip10 = null, string filter10 = null, string select10 = null, string orderby10 = null, string expand10 = null, string apply10 = null, bool? count11 = null, string inlinecount11 = null, int? top11 = null, int? skip11 = null, string filter11 = null, string select11 = null, string orderby11 = null, string expand11 = null, string apply11 = null, bool? count12 = null, string inlinecount12 = null, int? top12 = null, int? skip12 = null, string filter12 = null, string select12 = null, string orderby12 = null, string expand12 = null, string apply12 = null, bool? count13 = null, string inlinecount13 = null, int? top13 = null, int? skip13 = null, string filter13 = null, string select13 = null, string orderby13 = null, string expand13 = null, string apply13 = null, bool? count14 = null, string inlinecount14 = null, int? top14 = null, int? skip14 = null, string filter14 = null, string select14 = null, string orderby14 = null, string expand14 = null, string apply14 = null, bool? count15 = null, string inlinecount15 = null, int? top15 = null, int? skip15 = null, string filter15 = null, string select15 = null, string orderby15 = null, string expand15 = null, string apply15 = null);

        /// <summary>
        /// Get a list of &#39;assetClusterMember&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at2">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at3">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at4">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at5">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count6">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount6">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top6">The max number of records to return (optional)</param>
        /// <param name="skip6">The number of records to skip (optional)</param>
        /// <param name="filter6">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select6">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby6">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand6">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply6">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at6">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count7">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount7">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top7">The max number of records to return (optional)</param>
        /// <param name="skip7">The number of records to skip (optional)</param>
        /// <param name="filter7">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select7">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby7">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand7">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply7">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count8">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount8">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top8">The max number of records to return (optional)</param>
        /// <param name="skip8">The number of records to skip (optional)</param>
        /// <param name="filter8">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select8">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby8">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand8">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply8">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count9">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount9">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top9">The max number of records to return (optional)</param>
        /// <param name="skip9">The number of records to skip (optional)</param>
        /// <param name="filter9">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select9">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby9">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand9">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply9">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count10">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount10">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top10">The max number of records to return (optional)</param>
        /// <param name="skip10">The number of records to skip (optional)</param>
        /// <param name="filter10">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select10">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby10">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand10">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply10">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count11">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount11">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top11">The max number of records to return (optional)</param>
        /// <param name="skip11">The number of records to skip (optional)</param>
        /// <param name="filter11">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select11">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby11">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand11">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply11">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count12">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount12">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top12">The max number of records to return (optional)</param>
        /// <param name="skip12">The number of records to skip (optional)</param>
        /// <param name="filter12">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select12">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby12">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand12">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply12">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count13">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount13">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top13">The max number of records to return (optional)</param>
        /// <param name="skip13">The number of records to skip (optional)</param>
        /// <param name="filter13">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select13">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby13">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand13">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply13">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count14">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount14">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top14">The max number of records to return (optional)</param>
        /// <param name="skip14">The number of records to skip (optional)</param>
        /// <param name="filter14">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select14">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby14">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand14">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply14">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count15">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount15">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top15">The max number of records to return (optional)</param>
        /// <param name="skip15">The number of records to skip (optional)</param>
        /// <param name="filter15">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select15">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby15">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand15">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply15">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of ApiResponse (AssetClusterMemberList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetClusterMemberList>> AssetClusterMembersGetAsyncWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, string at2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, string at3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, string at4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null, string at5 = null, bool? count6 = null, string inlinecount6 = null, int? top6 = null, int? skip6 = null, string filter6 = null, string select6 = null, string orderby6 = null, string expand6 = null, string apply6 = null, string at6 = null, bool? count7 = null, string inlinecount7 = null, int? top7 = null, int? skip7 = null, string filter7 = null, string select7 = null, string orderby7 = null, string expand7 = null, string apply7 = null, bool? count8 = null, string inlinecount8 = null, int? top8 = null, int? skip8 = null, string filter8 = null, string select8 = null, string orderby8 = null, string expand8 = null, string apply8 = null, bool? count9 = null, string inlinecount9 = null, int? top9 = null, int? skip9 = null, string filter9 = null, string select9 = null, string orderby9 = null, string expand9 = null, string apply9 = null, bool? count10 = null, string inlinecount10 = null, int? top10 = null, int? skip10 = null, string filter10 = null, string select10 = null, string orderby10 = null, string expand10 = null, string apply10 = null, bool? count11 = null, string inlinecount11 = null, int? top11 = null, int? skip11 = null, string filter11 = null, string select11 = null, string orderby11 = null, string expand11 = null, string apply11 = null, bool? count12 = null, string inlinecount12 = null, int? top12 = null, int? skip12 = null, string filter12 = null, string select12 = null, string orderby12 = null, string expand12 = null, string apply12 = null, bool? count13 = null, string inlinecount13 = null, int? top13 = null, int? skip13 = null, string filter13 = null, string select13 = null, string orderby13 = null, string expand13 = null, string apply13 = null, bool? count14 = null, string inlinecount14 = null, int? top14 = null, int? skip14 = null, string filter14 = null, string select14 = null, string orderby14 = null, string expand14 = null, string apply14 = null, bool? count15 = null, string inlinecount15 = null, int? top15 = null, int? skip15 = null, string filter15 = null, string select15 = null, string orderby15 = null, string expand15 = null, string apply15 = null);
        /// <summary>
        /// Get a specific instance of &#39;assetClusterMember&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the assetClusterMember instance.</param>
        /// <param name="moid2">The moid of the assetClusterMember instance.</param>
        /// <param name="moid3">The moid of the assetClusterMember instance.</param>
        /// <param name="moid4">The moid of the assetClusterMember instance.</param>
        /// <param name="moid5">The moid of the assetClusterMember instance.</param>
        /// <param name="moid6">The moid of the assetClusterMember instance.</param>
        /// <param name="moid7">The moid of the assetClusterMember instance.</param>
        /// <param name="moid8">The moid of the assetClusterMember instance.</param>
        /// <param name="moid9">The moid of the assetClusterMember instance.</param>
        /// <param name="moid10">The moid of the assetClusterMember instance.</param>
        /// <param name="moid11">The moid of the assetClusterMember instance.</param>
        /// <param name="moid12">The moid of the assetClusterMember instance.</param>
        /// <param name="moid13">The moid of the assetClusterMember instance.</param>
        /// <param name="moid14">The moid of the assetClusterMember instance.</param>
        /// <param name="moid15">The moid of the assetClusterMember instance.</param>
        /// <returns>Task of AssetClusterMember</returns>
        System.Threading.Tasks.Task<AssetClusterMember> AssetClusterMembersMoidGetAsync (string moid, string moid2, string moid3, string moid4, string moid5, string moid6, string moid7, string moid8, string moid9, string moid10, string moid11, string moid12, string moid13, string moid14, string moid15);

        /// <summary>
        /// Get a specific instance of &#39;assetClusterMember&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the assetClusterMember instance.</param>
        /// <param name="moid2">The moid of the assetClusterMember instance.</param>
        /// <param name="moid3">The moid of the assetClusterMember instance.</param>
        /// <param name="moid4">The moid of the assetClusterMember instance.</param>
        /// <param name="moid5">The moid of the assetClusterMember instance.</param>
        /// <param name="moid6">The moid of the assetClusterMember instance.</param>
        /// <param name="moid7">The moid of the assetClusterMember instance.</param>
        /// <param name="moid8">The moid of the assetClusterMember instance.</param>
        /// <param name="moid9">The moid of the assetClusterMember instance.</param>
        /// <param name="moid10">The moid of the assetClusterMember instance.</param>
        /// <param name="moid11">The moid of the assetClusterMember instance.</param>
        /// <param name="moid12">The moid of the assetClusterMember instance.</param>
        /// <param name="moid13">The moid of the assetClusterMember instance.</param>
        /// <param name="moid14">The moid of the assetClusterMember instance.</param>
        /// <param name="moid15">The moid of the assetClusterMember instance.</param>
        /// <returns>Task of ApiResponse (AssetClusterMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetClusterMember>> AssetClusterMembersMoidGetAsyncWithHttpInfo (string moid, string moid2, string moid3, string moid4, string moid5, string moid6, string moid7, string moid8, string moid9, string moid10, string moid11, string moid12, string moid13, string moid14, string moid15);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetClusterMemberApi : IAssetClusterMemberApi
    {
        private intersight.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetClusterMemberApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetClusterMemberApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = intersight.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetClusterMemberApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetClusterMemberApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = intersight.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intersight.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of &#39;assetClusterMember&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at2">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at3">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at4">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at5">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count6">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount6">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top6">The max number of records to return (optional)</param>
        /// <param name="skip6">The number of records to skip (optional)</param>
        /// <param name="filter6">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select6">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby6">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand6">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply6">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at6">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count7">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount7">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top7">The max number of records to return (optional)</param>
        /// <param name="skip7">The number of records to skip (optional)</param>
        /// <param name="filter7">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select7">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby7">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand7">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply7">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count8">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount8">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top8">The max number of records to return (optional)</param>
        /// <param name="skip8">The number of records to skip (optional)</param>
        /// <param name="filter8">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select8">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby8">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand8">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply8">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count9">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount9">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top9">The max number of records to return (optional)</param>
        /// <param name="skip9">The number of records to skip (optional)</param>
        /// <param name="filter9">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select9">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby9">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand9">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply9">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count10">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount10">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top10">The max number of records to return (optional)</param>
        /// <param name="skip10">The number of records to skip (optional)</param>
        /// <param name="filter10">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select10">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby10">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand10">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply10">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count11">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount11">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top11">The max number of records to return (optional)</param>
        /// <param name="skip11">The number of records to skip (optional)</param>
        /// <param name="filter11">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select11">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby11">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand11">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply11">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count12">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount12">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top12">The max number of records to return (optional)</param>
        /// <param name="skip12">The number of records to skip (optional)</param>
        /// <param name="filter12">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select12">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby12">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand12">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply12">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count13">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount13">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top13">The max number of records to return (optional)</param>
        /// <param name="skip13">The number of records to skip (optional)</param>
        /// <param name="filter13">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select13">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby13">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand13">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply13">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count14">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount14">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top14">The max number of records to return (optional)</param>
        /// <param name="skip14">The number of records to skip (optional)</param>
        /// <param name="filter14">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select14">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby14">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand14">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply14">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count15">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount15">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top15">The max number of records to return (optional)</param>
        /// <param name="skip15">The number of records to skip (optional)</param>
        /// <param name="filter15">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select15">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby15">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand15">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply15">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>AssetClusterMemberList</returns>
        public AssetClusterMemberList AssetClusterMembersGet (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, string at2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, string at3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, string at4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null, string at5 = null, bool? count6 = null, string inlinecount6 = null, int? top6 = null, int? skip6 = null, string filter6 = null, string select6 = null, string orderby6 = null, string expand6 = null, string apply6 = null, string at6 = null, bool? count7 = null, string inlinecount7 = null, int? top7 = null, int? skip7 = null, string filter7 = null, string select7 = null, string orderby7 = null, string expand7 = null, string apply7 = null, bool? count8 = null, string inlinecount8 = null, int? top8 = null, int? skip8 = null, string filter8 = null, string select8 = null, string orderby8 = null, string expand8 = null, string apply8 = null, bool? count9 = null, string inlinecount9 = null, int? top9 = null, int? skip9 = null, string filter9 = null, string select9 = null, string orderby9 = null, string expand9 = null, string apply9 = null, bool? count10 = null, string inlinecount10 = null, int? top10 = null, int? skip10 = null, string filter10 = null, string select10 = null, string orderby10 = null, string expand10 = null, string apply10 = null, bool? count11 = null, string inlinecount11 = null, int? top11 = null, int? skip11 = null, string filter11 = null, string select11 = null, string orderby11 = null, string expand11 = null, string apply11 = null, bool? count12 = null, string inlinecount12 = null, int? top12 = null, int? skip12 = null, string filter12 = null, string select12 = null, string orderby12 = null, string expand12 = null, string apply12 = null, bool? count13 = null, string inlinecount13 = null, int? top13 = null, int? skip13 = null, string filter13 = null, string select13 = null, string orderby13 = null, string expand13 = null, string apply13 = null, bool? count14 = null, string inlinecount14 = null, int? top14 = null, int? skip14 = null, string filter14 = null, string select14 = null, string orderby14 = null, string expand14 = null, string apply14 = null, bool? count15 = null, string inlinecount15 = null, int? top15 = null, int? skip15 = null, string filter15 = null, string select15 = null, string orderby15 = null, string expand15 = null, string apply15 = null)
        {
             ApiResponse<AssetClusterMemberList> localVarResponse = AssetClusterMembersGetWithHttpInfo(count, inlinecount, top, skip, filter, select, orderby, expand, apply, at, count2, inlinecount2, top2, skip2, filter2, select2, orderby2, expand2, apply2, at2, count3, inlinecount3, top3, skip3, filter3, select3, orderby3, expand3, apply3, at3, count4, inlinecount4, top4, skip4, filter4, select4, orderby4, expand4, apply4, at4, count5, inlinecount5, top5, skip5, filter5, select5, orderby5, expand5, apply5, at5, count6, inlinecount6, top6, skip6, filter6, select6, orderby6, expand6, apply6, at6, count7, inlinecount7, top7, skip7, filter7, select7, orderby7, expand7, apply7, count8, inlinecount8, top8, skip8, filter8, select8, orderby8, expand8, apply8, count9, inlinecount9, top9, skip9, filter9, select9, orderby9, expand9, apply9, count10, inlinecount10, top10, skip10, filter10, select10, orderby10, expand10, apply10, count11, inlinecount11, top11, skip11, filter11, select11, orderby11, expand11, apply11, count12, inlinecount12, top12, skip12, filter12, select12, orderby12, expand12, apply12, count13, inlinecount13, top13, skip13, filter13, select13, orderby13, expand13, apply13, count14, inlinecount14, top14, skip14, filter14, select14, orderby14, expand14, apply14, count15, inlinecount15, top15, skip15, filter15, select15, orderby15, expand15, apply15);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of &#39;assetClusterMember&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at2">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at3">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at4">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at5">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count6">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount6">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top6">The max number of records to return (optional)</param>
        /// <param name="skip6">The number of records to skip (optional)</param>
        /// <param name="filter6">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select6">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby6">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand6">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply6">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at6">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count7">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount7">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top7">The max number of records to return (optional)</param>
        /// <param name="skip7">The number of records to skip (optional)</param>
        /// <param name="filter7">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select7">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby7">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand7">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply7">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count8">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount8">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top8">The max number of records to return (optional)</param>
        /// <param name="skip8">The number of records to skip (optional)</param>
        /// <param name="filter8">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select8">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby8">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand8">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply8">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count9">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount9">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top9">The max number of records to return (optional)</param>
        /// <param name="skip9">The number of records to skip (optional)</param>
        /// <param name="filter9">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select9">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby9">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand9">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply9">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count10">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount10">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top10">The max number of records to return (optional)</param>
        /// <param name="skip10">The number of records to skip (optional)</param>
        /// <param name="filter10">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select10">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby10">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand10">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply10">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count11">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount11">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top11">The max number of records to return (optional)</param>
        /// <param name="skip11">The number of records to skip (optional)</param>
        /// <param name="filter11">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select11">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby11">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand11">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply11">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count12">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount12">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top12">The max number of records to return (optional)</param>
        /// <param name="skip12">The number of records to skip (optional)</param>
        /// <param name="filter12">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select12">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby12">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand12">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply12">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count13">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount13">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top13">The max number of records to return (optional)</param>
        /// <param name="skip13">The number of records to skip (optional)</param>
        /// <param name="filter13">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select13">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby13">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand13">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply13">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count14">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount14">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top14">The max number of records to return (optional)</param>
        /// <param name="skip14">The number of records to skip (optional)</param>
        /// <param name="filter14">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select14">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby14">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand14">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply14">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count15">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount15">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top15">The max number of records to return (optional)</param>
        /// <param name="skip15">The number of records to skip (optional)</param>
        /// <param name="filter15">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select15">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby15">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand15">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply15">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>ApiResponse of AssetClusterMemberList</returns>
        public ApiResponse< AssetClusterMemberList > AssetClusterMembersGetWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, string at2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, string at3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, string at4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null, string at5 = null, bool? count6 = null, string inlinecount6 = null, int? top6 = null, int? skip6 = null, string filter6 = null, string select6 = null, string orderby6 = null, string expand6 = null, string apply6 = null, string at6 = null, bool? count7 = null, string inlinecount7 = null, int? top7 = null, int? skip7 = null, string filter7 = null, string select7 = null, string orderby7 = null, string expand7 = null, string apply7 = null, bool? count8 = null, string inlinecount8 = null, int? top8 = null, int? skip8 = null, string filter8 = null, string select8 = null, string orderby8 = null, string expand8 = null, string apply8 = null, bool? count9 = null, string inlinecount9 = null, int? top9 = null, int? skip9 = null, string filter9 = null, string select9 = null, string orderby9 = null, string expand9 = null, string apply9 = null, bool? count10 = null, string inlinecount10 = null, int? top10 = null, int? skip10 = null, string filter10 = null, string select10 = null, string orderby10 = null, string expand10 = null, string apply10 = null, bool? count11 = null, string inlinecount11 = null, int? top11 = null, int? skip11 = null, string filter11 = null, string select11 = null, string orderby11 = null, string expand11 = null, string apply11 = null, bool? count12 = null, string inlinecount12 = null, int? top12 = null, int? skip12 = null, string filter12 = null, string select12 = null, string orderby12 = null, string expand12 = null, string apply12 = null, bool? count13 = null, string inlinecount13 = null, int? top13 = null, int? skip13 = null, string filter13 = null, string select13 = null, string orderby13 = null, string expand13 = null, string apply13 = null, bool? count14 = null, string inlinecount14 = null, int? top14 = null, int? skip14 = null, string filter14 = null, string select14 = null, string orderby14 = null, string expand14 = null, string apply14 = null, bool? count15 = null, string inlinecount15 = null, int? top15 = null, int? skip15 = null, string filter15 = null, string select15 = null, string orderby15 = null, string expand15 = null, string apply15 = null)
        {

            var localVarPath = "/asset/ClusterMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (inlinecount != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount)); // query parameter
            if (top != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (filter != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (select != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select)); // query parameter
            if (orderby != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby)); // query parameter
            if (expand != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (apply != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply)); // query parameter
            if (at != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at)); // query parameter
            if (count2 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count2)); // query parameter
            if (inlinecount2 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount2)); // query parameter
            if (top2 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top2)); // query parameter
            if (skip2 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip2)); // query parameter
            if (filter2 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter2)); // query parameter
            if (select2 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select2)); // query parameter
            if (orderby2 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby2)); // query parameter
            if (expand2 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand2)); // query parameter
            if (apply2 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply2)); // query parameter
            if (at2 != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at2)); // query parameter
            if (count3 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count3)); // query parameter
            if (inlinecount3 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount3)); // query parameter
            if (top3 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top3)); // query parameter
            if (skip3 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip3)); // query parameter
            if (filter3 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter3)); // query parameter
            if (select3 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select3)); // query parameter
            if (orderby3 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby3)); // query parameter
            if (expand3 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand3)); // query parameter
            if (apply3 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply3)); // query parameter
            if (at3 != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at3)); // query parameter
            if (count4 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count4)); // query parameter
            if (inlinecount4 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount4)); // query parameter
            if (top4 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top4)); // query parameter
            if (skip4 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip4)); // query parameter
            if (filter4 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter4)); // query parameter
            if (select4 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select4)); // query parameter
            if (orderby4 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby4)); // query parameter
            if (expand4 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand4)); // query parameter
            if (apply4 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply4)); // query parameter
            if (at4 != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at4)); // query parameter
            if (count5 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count5)); // query parameter
            if (inlinecount5 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount5)); // query parameter
            if (top5 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top5)); // query parameter
            if (skip5 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip5)); // query parameter
            if (filter5 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter5)); // query parameter
            if (select5 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select5)); // query parameter
            if (orderby5 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby5)); // query parameter
            if (expand5 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand5)); // query parameter
            if (apply5 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply5)); // query parameter
            if (at5 != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at5)); // query parameter
            if (count6 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count6)); // query parameter
            if (inlinecount6 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount6)); // query parameter
            if (top6 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top6)); // query parameter
            if (skip6 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip6)); // query parameter
            if (filter6 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter6)); // query parameter
            if (select6 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select6)); // query parameter
            if (orderby6 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby6)); // query parameter
            if (expand6 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand6)); // query parameter
            if (apply6 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply6)); // query parameter
            if (at6 != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at6)); // query parameter
            if (count7 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count7)); // query parameter
            if (inlinecount7 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount7)); // query parameter
            if (top7 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top7)); // query parameter
            if (skip7 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip7)); // query parameter
            if (filter7 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter7)); // query parameter
            if (select7 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select7)); // query parameter
            if (orderby7 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby7)); // query parameter
            if (expand7 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand7)); // query parameter
            if (apply7 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply7)); // query parameter
            if (count8 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count8)); // query parameter
            if (inlinecount8 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount8)); // query parameter
            if (top8 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top8)); // query parameter
            if (skip8 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip8)); // query parameter
            if (filter8 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter8)); // query parameter
            if (select8 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select8)); // query parameter
            if (orderby8 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby8)); // query parameter
            if (expand8 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand8)); // query parameter
            if (apply8 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply8)); // query parameter
            if (count9 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count9)); // query parameter
            if (inlinecount9 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount9)); // query parameter
            if (top9 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top9)); // query parameter
            if (skip9 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip9)); // query parameter
            if (filter9 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter9)); // query parameter
            if (select9 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select9)); // query parameter
            if (orderby9 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby9)); // query parameter
            if (expand9 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand9)); // query parameter
            if (apply9 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply9)); // query parameter
            if (count10 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count10)); // query parameter
            if (inlinecount10 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount10)); // query parameter
            if (top10 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top10)); // query parameter
            if (skip10 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip10)); // query parameter
            if (filter10 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter10)); // query parameter
            if (select10 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select10)); // query parameter
            if (orderby10 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby10)); // query parameter
            if (expand10 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand10)); // query parameter
            if (apply10 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply10)); // query parameter
            if (count11 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count11)); // query parameter
            if (inlinecount11 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount11)); // query parameter
            if (top11 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top11)); // query parameter
            if (skip11 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip11)); // query parameter
            if (filter11 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter11)); // query parameter
            if (select11 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select11)); // query parameter
            if (orderby11 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby11)); // query parameter
            if (expand11 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand11)); // query parameter
            if (apply11 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply11)); // query parameter
            if (count12 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count12)); // query parameter
            if (inlinecount12 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount12)); // query parameter
            if (top12 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top12)); // query parameter
            if (skip12 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip12)); // query parameter
            if (filter12 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter12)); // query parameter
            if (select12 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select12)); // query parameter
            if (orderby12 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby12)); // query parameter
            if (expand12 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand12)); // query parameter
            if (apply12 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply12)); // query parameter
            if (count13 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count13)); // query parameter
            if (inlinecount13 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount13)); // query parameter
            if (top13 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top13)); // query parameter
            if (skip13 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip13)); // query parameter
            if (filter13 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter13)); // query parameter
            if (select13 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select13)); // query parameter
            if (orderby13 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby13)); // query parameter
            if (expand13 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand13)); // query parameter
            if (apply13 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply13)); // query parameter
            if (count14 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count14)); // query parameter
            if (inlinecount14 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount14)); // query parameter
            if (top14 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top14)); // query parameter
            if (skip14 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip14)); // query parameter
            if (filter14 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter14)); // query parameter
            if (select14 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select14)); // query parameter
            if (orderby14 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby14)); // query parameter
            if (expand14 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand14)); // query parameter
            if (apply14 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply14)); // query parameter
            if (count15 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count15)); // query parameter
            if (inlinecount15 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount15)); // query parameter
            if (top15 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top15)); // query parameter
            if (skip15 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip15)); // query parameter
            if (filter15 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter15)); // query parameter
            if (select15 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select15)); // query parameter
            if (orderby15 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby15)); // query parameter
            if (expand15 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand15)); // query parameter
            if (apply15 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply15)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetClusterMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetClusterMemberList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetClusterMemberList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetClusterMemberList)));
        }

        /// <summary>
        /// Get a list of &#39;assetClusterMember&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at2">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at3">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at4">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at5">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count6">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount6">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top6">The max number of records to return (optional)</param>
        /// <param name="skip6">The number of records to skip (optional)</param>
        /// <param name="filter6">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select6">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby6">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand6">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply6">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at6">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count7">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount7">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top7">The max number of records to return (optional)</param>
        /// <param name="skip7">The number of records to skip (optional)</param>
        /// <param name="filter7">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select7">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby7">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand7">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply7">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count8">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount8">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top8">The max number of records to return (optional)</param>
        /// <param name="skip8">The number of records to skip (optional)</param>
        /// <param name="filter8">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select8">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby8">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand8">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply8">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count9">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount9">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top9">The max number of records to return (optional)</param>
        /// <param name="skip9">The number of records to skip (optional)</param>
        /// <param name="filter9">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select9">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby9">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand9">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply9">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count10">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount10">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top10">The max number of records to return (optional)</param>
        /// <param name="skip10">The number of records to skip (optional)</param>
        /// <param name="filter10">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select10">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby10">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand10">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply10">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count11">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount11">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top11">The max number of records to return (optional)</param>
        /// <param name="skip11">The number of records to skip (optional)</param>
        /// <param name="filter11">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select11">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby11">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand11">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply11">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count12">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount12">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top12">The max number of records to return (optional)</param>
        /// <param name="skip12">The number of records to skip (optional)</param>
        /// <param name="filter12">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select12">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby12">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand12">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply12">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count13">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount13">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top13">The max number of records to return (optional)</param>
        /// <param name="skip13">The number of records to skip (optional)</param>
        /// <param name="filter13">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select13">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby13">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand13">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply13">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count14">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount14">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top14">The max number of records to return (optional)</param>
        /// <param name="skip14">The number of records to skip (optional)</param>
        /// <param name="filter14">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select14">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby14">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand14">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply14">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count15">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount15">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top15">The max number of records to return (optional)</param>
        /// <param name="skip15">The number of records to skip (optional)</param>
        /// <param name="filter15">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select15">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby15">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand15">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply15">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of AssetClusterMemberList</returns>
        public async System.Threading.Tasks.Task<AssetClusterMemberList> AssetClusterMembersGetAsync (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, string at2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, string at3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, string at4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null, string at5 = null, bool? count6 = null, string inlinecount6 = null, int? top6 = null, int? skip6 = null, string filter6 = null, string select6 = null, string orderby6 = null, string expand6 = null, string apply6 = null, string at6 = null, bool? count7 = null, string inlinecount7 = null, int? top7 = null, int? skip7 = null, string filter7 = null, string select7 = null, string orderby7 = null, string expand7 = null, string apply7 = null, bool? count8 = null, string inlinecount8 = null, int? top8 = null, int? skip8 = null, string filter8 = null, string select8 = null, string orderby8 = null, string expand8 = null, string apply8 = null, bool? count9 = null, string inlinecount9 = null, int? top9 = null, int? skip9 = null, string filter9 = null, string select9 = null, string orderby9 = null, string expand9 = null, string apply9 = null, bool? count10 = null, string inlinecount10 = null, int? top10 = null, int? skip10 = null, string filter10 = null, string select10 = null, string orderby10 = null, string expand10 = null, string apply10 = null, bool? count11 = null, string inlinecount11 = null, int? top11 = null, int? skip11 = null, string filter11 = null, string select11 = null, string orderby11 = null, string expand11 = null, string apply11 = null, bool? count12 = null, string inlinecount12 = null, int? top12 = null, int? skip12 = null, string filter12 = null, string select12 = null, string orderby12 = null, string expand12 = null, string apply12 = null, bool? count13 = null, string inlinecount13 = null, int? top13 = null, int? skip13 = null, string filter13 = null, string select13 = null, string orderby13 = null, string expand13 = null, string apply13 = null, bool? count14 = null, string inlinecount14 = null, int? top14 = null, int? skip14 = null, string filter14 = null, string select14 = null, string orderby14 = null, string expand14 = null, string apply14 = null, bool? count15 = null, string inlinecount15 = null, int? top15 = null, int? skip15 = null, string filter15 = null, string select15 = null, string orderby15 = null, string expand15 = null, string apply15 = null)
        {
             ApiResponse<AssetClusterMemberList> localVarResponse = await AssetClusterMembersGetAsyncWithHttpInfo(count, inlinecount, top, skip, filter, select, orderby, expand, apply, at, count2, inlinecount2, top2, skip2, filter2, select2, orderby2, expand2, apply2, at2, count3, inlinecount3, top3, skip3, filter3, select3, orderby3, expand3, apply3, at3, count4, inlinecount4, top4, skip4, filter4, select4, orderby4, expand4, apply4, at4, count5, inlinecount5, top5, skip5, filter5, select5, orderby5, expand5, apply5, at5, count6, inlinecount6, top6, skip6, filter6, select6, orderby6, expand6, apply6, at6, count7, inlinecount7, top7, skip7, filter7, select7, orderby7, expand7, apply7, count8, inlinecount8, top8, skip8, filter8, select8, orderby8, expand8, apply8, count9, inlinecount9, top9, skip9, filter9, select9, orderby9, expand9, apply9, count10, inlinecount10, top10, skip10, filter10, select10, orderby10, expand10, apply10, count11, inlinecount11, top11, skip11, filter11, select11, orderby11, expand11, apply11, count12, inlinecount12, top12, skip12, filter12, select12, orderby12, expand12, apply12, count13, inlinecount13, top13, skip13, filter13, select13, orderby13, expand13, apply13, count14, inlinecount14, top14, skip14, filter14, select14, orderby14, expand14, apply14, count15, inlinecount15, top15, skip15, filter15, select15, orderby15, expand15, apply15);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of &#39;assetClusterMember&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at2">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at3">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at4">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at5">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count6">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount6">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top6">The max number of records to return (optional)</param>
        /// <param name="skip6">The number of records to skip (optional)</param>
        /// <param name="filter6">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select6">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby6">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand6">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply6">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at6">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <param name="count7">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount7">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top7">The max number of records to return (optional)</param>
        /// <param name="skip7">The number of records to skip (optional)</param>
        /// <param name="filter7">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select7">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby7">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand7">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply7">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count8">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount8">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top8">The max number of records to return (optional)</param>
        /// <param name="skip8">The number of records to skip (optional)</param>
        /// <param name="filter8">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select8">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby8">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand8">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply8">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count9">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount9">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top9">The max number of records to return (optional)</param>
        /// <param name="skip9">The number of records to skip (optional)</param>
        /// <param name="filter9">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select9">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby9">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand9">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply9">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count10">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount10">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top10">The max number of records to return (optional)</param>
        /// <param name="skip10">The number of records to skip (optional)</param>
        /// <param name="filter10">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select10">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby10">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand10">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply10">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count11">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount11">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top11">The max number of records to return (optional)</param>
        /// <param name="skip11">The number of records to skip (optional)</param>
        /// <param name="filter11">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select11">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby11">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand11">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply11">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count12">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount12">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top12">The max number of records to return (optional)</param>
        /// <param name="skip12">The number of records to skip (optional)</param>
        /// <param name="filter12">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select12">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby12">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand12">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply12">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count13">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount13">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top13">The max number of records to return (optional)</param>
        /// <param name="skip13">The number of records to skip (optional)</param>
        /// <param name="filter13">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select13">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby13">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand13">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply13">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count14">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount14">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top14">The max number of records to return (optional)</param>
        /// <param name="skip14">The number of records to skip (optional)</param>
        /// <param name="filter14">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select14">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby14">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand14">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply14">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count15">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount15">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top15">The max number of records to return (optional)</param>
        /// <param name="skip15">The number of records to skip (optional)</param>
        /// <param name="filter15">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select15">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby15">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand15">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply15">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of ApiResponse (AssetClusterMemberList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetClusterMemberList>> AssetClusterMembersGetAsyncWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, string at2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, string at3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, string at4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null, string at5 = null, bool? count6 = null, string inlinecount6 = null, int? top6 = null, int? skip6 = null, string filter6 = null, string select6 = null, string orderby6 = null, string expand6 = null, string apply6 = null, string at6 = null, bool? count7 = null, string inlinecount7 = null, int? top7 = null, int? skip7 = null, string filter7 = null, string select7 = null, string orderby7 = null, string expand7 = null, string apply7 = null, bool? count8 = null, string inlinecount8 = null, int? top8 = null, int? skip8 = null, string filter8 = null, string select8 = null, string orderby8 = null, string expand8 = null, string apply8 = null, bool? count9 = null, string inlinecount9 = null, int? top9 = null, int? skip9 = null, string filter9 = null, string select9 = null, string orderby9 = null, string expand9 = null, string apply9 = null, bool? count10 = null, string inlinecount10 = null, int? top10 = null, int? skip10 = null, string filter10 = null, string select10 = null, string orderby10 = null, string expand10 = null, string apply10 = null, bool? count11 = null, string inlinecount11 = null, int? top11 = null, int? skip11 = null, string filter11 = null, string select11 = null, string orderby11 = null, string expand11 = null, string apply11 = null, bool? count12 = null, string inlinecount12 = null, int? top12 = null, int? skip12 = null, string filter12 = null, string select12 = null, string orderby12 = null, string expand12 = null, string apply12 = null, bool? count13 = null, string inlinecount13 = null, int? top13 = null, int? skip13 = null, string filter13 = null, string select13 = null, string orderby13 = null, string expand13 = null, string apply13 = null, bool? count14 = null, string inlinecount14 = null, int? top14 = null, int? skip14 = null, string filter14 = null, string select14 = null, string orderby14 = null, string expand14 = null, string apply14 = null, bool? count15 = null, string inlinecount15 = null, int? top15 = null, int? skip15 = null, string filter15 = null, string select15 = null, string orderby15 = null, string expand15 = null, string apply15 = null)
        {

            var localVarPath = "/asset/ClusterMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (inlinecount != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount)); // query parameter
            if (top != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (filter != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (select != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select)); // query parameter
            if (orderby != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby)); // query parameter
            if (expand != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (apply != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply)); // query parameter
            if (at != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at)); // query parameter
            if (count2 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count2)); // query parameter
            if (inlinecount2 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount2)); // query parameter
            if (top2 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top2)); // query parameter
            if (skip2 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip2)); // query parameter
            if (filter2 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter2)); // query parameter
            if (select2 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select2)); // query parameter
            if (orderby2 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby2)); // query parameter
            if (expand2 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand2)); // query parameter
            if (apply2 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply2)); // query parameter
            if (at2 != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at2)); // query parameter
            if (count3 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count3)); // query parameter
            if (inlinecount3 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount3)); // query parameter
            if (top3 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top3)); // query parameter
            if (skip3 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip3)); // query parameter
            if (filter3 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter3)); // query parameter
            if (select3 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select3)); // query parameter
            if (orderby3 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby3)); // query parameter
            if (expand3 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand3)); // query parameter
            if (apply3 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply3)); // query parameter
            if (at3 != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at3)); // query parameter
            if (count4 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count4)); // query parameter
            if (inlinecount4 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount4)); // query parameter
            if (top4 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top4)); // query parameter
            if (skip4 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip4)); // query parameter
            if (filter4 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter4)); // query parameter
            if (select4 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select4)); // query parameter
            if (orderby4 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby4)); // query parameter
            if (expand4 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand4)); // query parameter
            if (apply4 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply4)); // query parameter
            if (at4 != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at4)); // query parameter
            if (count5 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count5)); // query parameter
            if (inlinecount5 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount5)); // query parameter
            if (top5 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top5)); // query parameter
            if (skip5 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip5)); // query parameter
            if (filter5 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter5)); // query parameter
            if (select5 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select5)); // query parameter
            if (orderby5 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby5)); // query parameter
            if (expand5 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand5)); // query parameter
            if (apply5 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply5)); // query parameter
            if (at5 != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at5)); // query parameter
            if (count6 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count6)); // query parameter
            if (inlinecount6 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount6)); // query parameter
            if (top6 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top6)); // query parameter
            if (skip6 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip6)); // query parameter
            if (filter6 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter6)); // query parameter
            if (select6 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select6)); // query parameter
            if (orderby6 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby6)); // query parameter
            if (expand6 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand6)); // query parameter
            if (apply6 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply6)); // query parameter
            if (at6 != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at6)); // query parameter
            if (count7 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count7)); // query parameter
            if (inlinecount7 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount7)); // query parameter
            if (top7 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top7)); // query parameter
            if (skip7 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip7)); // query parameter
            if (filter7 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter7)); // query parameter
            if (select7 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select7)); // query parameter
            if (orderby7 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby7)); // query parameter
            if (expand7 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand7)); // query parameter
            if (apply7 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply7)); // query parameter
            if (count8 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count8)); // query parameter
            if (inlinecount8 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount8)); // query parameter
            if (top8 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top8)); // query parameter
            if (skip8 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip8)); // query parameter
            if (filter8 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter8)); // query parameter
            if (select8 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select8)); // query parameter
            if (orderby8 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby8)); // query parameter
            if (expand8 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand8)); // query parameter
            if (apply8 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply8)); // query parameter
            if (count9 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count9)); // query parameter
            if (inlinecount9 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount9)); // query parameter
            if (top9 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top9)); // query parameter
            if (skip9 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip9)); // query parameter
            if (filter9 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter9)); // query parameter
            if (select9 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select9)); // query parameter
            if (orderby9 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby9)); // query parameter
            if (expand9 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand9)); // query parameter
            if (apply9 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply9)); // query parameter
            if (count10 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count10)); // query parameter
            if (inlinecount10 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount10)); // query parameter
            if (top10 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top10)); // query parameter
            if (skip10 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip10)); // query parameter
            if (filter10 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter10)); // query parameter
            if (select10 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select10)); // query parameter
            if (orderby10 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby10)); // query parameter
            if (expand10 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand10)); // query parameter
            if (apply10 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply10)); // query parameter
            if (count11 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count11)); // query parameter
            if (inlinecount11 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount11)); // query parameter
            if (top11 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top11)); // query parameter
            if (skip11 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip11)); // query parameter
            if (filter11 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter11)); // query parameter
            if (select11 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select11)); // query parameter
            if (orderby11 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby11)); // query parameter
            if (expand11 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand11)); // query parameter
            if (apply11 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply11)); // query parameter
            if (count12 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count12)); // query parameter
            if (inlinecount12 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount12)); // query parameter
            if (top12 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top12)); // query parameter
            if (skip12 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip12)); // query parameter
            if (filter12 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter12)); // query parameter
            if (select12 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select12)); // query parameter
            if (orderby12 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby12)); // query parameter
            if (expand12 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand12)); // query parameter
            if (apply12 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply12)); // query parameter
            if (count13 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count13)); // query parameter
            if (inlinecount13 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount13)); // query parameter
            if (top13 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top13)); // query parameter
            if (skip13 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip13)); // query parameter
            if (filter13 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter13)); // query parameter
            if (select13 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select13)); // query parameter
            if (orderby13 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby13)); // query parameter
            if (expand13 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand13)); // query parameter
            if (apply13 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply13)); // query parameter
            if (count14 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count14)); // query parameter
            if (inlinecount14 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount14)); // query parameter
            if (top14 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top14)); // query parameter
            if (skip14 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip14)); // query parameter
            if (filter14 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter14)); // query parameter
            if (select14 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select14)); // query parameter
            if (orderby14 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby14)); // query parameter
            if (expand14 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand14)); // query parameter
            if (apply14 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply14)); // query parameter
            if (count15 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count15)); // query parameter
            if (inlinecount15 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount15)); // query parameter
            if (top15 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top15)); // query parameter
            if (skip15 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip15)); // query parameter
            if (filter15 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter15)); // query parameter
            if (select15 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select15)); // query parameter
            if (orderby15 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby15)); // query parameter
            if (expand15 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand15)); // query parameter
            if (apply15 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply15)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetClusterMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetClusterMemberList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetClusterMemberList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetClusterMemberList)));
        }

        /// <summary>
        /// Get a specific instance of &#39;assetClusterMember&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the assetClusterMember instance.</param>
        /// <param name="moid2">The moid of the assetClusterMember instance.</param>
        /// <param name="moid3">The moid of the assetClusterMember instance.</param>
        /// <param name="moid4">The moid of the assetClusterMember instance.</param>
        /// <param name="moid5">The moid of the assetClusterMember instance.</param>
        /// <param name="moid6">The moid of the assetClusterMember instance.</param>
        /// <param name="moid7">The moid of the assetClusterMember instance.</param>
        /// <param name="moid8">The moid of the assetClusterMember instance.</param>
        /// <param name="moid9">The moid of the assetClusterMember instance.</param>
        /// <param name="moid10">The moid of the assetClusterMember instance.</param>
        /// <param name="moid11">The moid of the assetClusterMember instance.</param>
        /// <param name="moid12">The moid of the assetClusterMember instance.</param>
        /// <param name="moid13">The moid of the assetClusterMember instance.</param>
        /// <param name="moid14">The moid of the assetClusterMember instance.</param>
        /// <param name="moid15">The moid of the assetClusterMember instance.</param>
        /// <returns>AssetClusterMember</returns>
        public AssetClusterMember AssetClusterMembersMoidGet (string moid, string moid2, string moid3, string moid4, string moid5, string moid6, string moid7, string moid8, string moid9, string moid10, string moid11, string moid12, string moid13, string moid14, string moid15)
        {
             ApiResponse<AssetClusterMember> localVarResponse = AssetClusterMembersMoidGetWithHttpInfo(moid, moid2, moid3, moid4, moid5, moid6, moid7, moid8, moid9, moid10, moid11, moid12, moid13, moid14, moid15);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific instance of &#39;assetClusterMember&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the assetClusterMember instance.</param>
        /// <param name="moid2">The moid of the assetClusterMember instance.</param>
        /// <param name="moid3">The moid of the assetClusterMember instance.</param>
        /// <param name="moid4">The moid of the assetClusterMember instance.</param>
        /// <param name="moid5">The moid of the assetClusterMember instance.</param>
        /// <param name="moid6">The moid of the assetClusterMember instance.</param>
        /// <param name="moid7">The moid of the assetClusterMember instance.</param>
        /// <param name="moid8">The moid of the assetClusterMember instance.</param>
        /// <param name="moid9">The moid of the assetClusterMember instance.</param>
        /// <param name="moid10">The moid of the assetClusterMember instance.</param>
        /// <param name="moid11">The moid of the assetClusterMember instance.</param>
        /// <param name="moid12">The moid of the assetClusterMember instance.</param>
        /// <param name="moid13">The moid of the assetClusterMember instance.</param>
        /// <param name="moid14">The moid of the assetClusterMember instance.</param>
        /// <param name="moid15">The moid of the assetClusterMember instance.</param>
        /// <returns>ApiResponse of AssetClusterMember</returns>
        public ApiResponse< AssetClusterMember > AssetClusterMembersMoidGetWithHttpInfo (string moid, string moid2, string moid3, string moid4, string moid5, string moid6, string moid7, string moid8, string moid9, string moid10, string moid11, string moid12, string moid13, string moid14, string moid15)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid5' is set
            if (moid5 == null)
                throw new ApiException(400, "Missing required parameter 'moid5' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid6' is set
            if (moid6 == null)
                throw new ApiException(400, "Missing required parameter 'moid6' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid7' is set
            if (moid7 == null)
                throw new ApiException(400, "Missing required parameter 'moid7' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid8' is set
            if (moid8 == null)
                throw new ApiException(400, "Missing required parameter 'moid8' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid9' is set
            if (moid9 == null)
                throw new ApiException(400, "Missing required parameter 'moid9' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid10' is set
            if (moid10 == null)
                throw new ApiException(400, "Missing required parameter 'moid10' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid11' is set
            if (moid11 == null)
                throw new ApiException(400, "Missing required parameter 'moid11' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid12' is set
            if (moid12 == null)
                throw new ApiException(400, "Missing required parameter 'moid12' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid13' is set
            if (moid13 == null)
                throw new ApiException(400, "Missing required parameter 'moid13' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid14' is set
            if (moid14 == null)
                throw new ApiException(400, "Missing required parameter 'moid14' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid15' is set
            if (moid15 == null)
                throw new ApiException(400, "Missing required parameter 'moid15' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");

            var localVarPath = "/asset/ClusterMembers/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (moid5 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid5)); // path parameter
            if (moid6 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid6)); // path parameter
            if (moid7 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid7)); // path parameter
            if (moid8 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid8)); // path parameter
            if (moid9 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid9)); // path parameter
            if (moid10 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid10)); // path parameter
            if (moid11 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid11)); // path parameter
            if (moid12 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid12)); // path parameter
            if (moid13 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid13)); // path parameter
            if (moid14 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid14)); // path parameter
            if (moid15 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid15)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetClusterMembersMoidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetClusterMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetClusterMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetClusterMember)));
        }

        /// <summary>
        /// Get a specific instance of &#39;assetClusterMember&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the assetClusterMember instance.</param>
        /// <param name="moid2">The moid of the assetClusterMember instance.</param>
        /// <param name="moid3">The moid of the assetClusterMember instance.</param>
        /// <param name="moid4">The moid of the assetClusterMember instance.</param>
        /// <param name="moid5">The moid of the assetClusterMember instance.</param>
        /// <param name="moid6">The moid of the assetClusterMember instance.</param>
        /// <param name="moid7">The moid of the assetClusterMember instance.</param>
        /// <param name="moid8">The moid of the assetClusterMember instance.</param>
        /// <param name="moid9">The moid of the assetClusterMember instance.</param>
        /// <param name="moid10">The moid of the assetClusterMember instance.</param>
        /// <param name="moid11">The moid of the assetClusterMember instance.</param>
        /// <param name="moid12">The moid of the assetClusterMember instance.</param>
        /// <param name="moid13">The moid of the assetClusterMember instance.</param>
        /// <param name="moid14">The moid of the assetClusterMember instance.</param>
        /// <param name="moid15">The moid of the assetClusterMember instance.</param>
        /// <returns>Task of AssetClusterMember</returns>
        public async System.Threading.Tasks.Task<AssetClusterMember> AssetClusterMembersMoidGetAsync (string moid, string moid2, string moid3, string moid4, string moid5, string moid6, string moid7, string moid8, string moid9, string moid10, string moid11, string moid12, string moid13, string moid14, string moid15)
        {
             ApiResponse<AssetClusterMember> localVarResponse = await AssetClusterMembersMoidGetAsyncWithHttpInfo(moid, moid2, moid3, moid4, moid5, moid6, moid7, moid8, moid9, moid10, moid11, moid12, moid13, moid14, moid15);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific instance of &#39;assetClusterMember&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the assetClusterMember instance.</param>
        /// <param name="moid2">The moid of the assetClusterMember instance.</param>
        /// <param name="moid3">The moid of the assetClusterMember instance.</param>
        /// <param name="moid4">The moid of the assetClusterMember instance.</param>
        /// <param name="moid5">The moid of the assetClusterMember instance.</param>
        /// <param name="moid6">The moid of the assetClusterMember instance.</param>
        /// <param name="moid7">The moid of the assetClusterMember instance.</param>
        /// <param name="moid8">The moid of the assetClusterMember instance.</param>
        /// <param name="moid9">The moid of the assetClusterMember instance.</param>
        /// <param name="moid10">The moid of the assetClusterMember instance.</param>
        /// <param name="moid11">The moid of the assetClusterMember instance.</param>
        /// <param name="moid12">The moid of the assetClusterMember instance.</param>
        /// <param name="moid13">The moid of the assetClusterMember instance.</param>
        /// <param name="moid14">The moid of the assetClusterMember instance.</param>
        /// <param name="moid15">The moid of the assetClusterMember instance.</param>
        /// <returns>Task of ApiResponse (AssetClusterMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetClusterMember>> AssetClusterMembersMoidGetAsyncWithHttpInfo (string moid, string moid2, string moid3, string moid4, string moid5, string moid6, string moid7, string moid8, string moid9, string moid10, string moid11, string moid12, string moid13, string moid14, string moid15)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid5' is set
            if (moid5 == null)
                throw new ApiException(400, "Missing required parameter 'moid5' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid6' is set
            if (moid6 == null)
                throw new ApiException(400, "Missing required parameter 'moid6' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid7' is set
            if (moid7 == null)
                throw new ApiException(400, "Missing required parameter 'moid7' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid8' is set
            if (moid8 == null)
                throw new ApiException(400, "Missing required parameter 'moid8' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid9' is set
            if (moid9 == null)
                throw new ApiException(400, "Missing required parameter 'moid9' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid10' is set
            if (moid10 == null)
                throw new ApiException(400, "Missing required parameter 'moid10' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid11' is set
            if (moid11 == null)
                throw new ApiException(400, "Missing required parameter 'moid11' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid12' is set
            if (moid12 == null)
                throw new ApiException(400, "Missing required parameter 'moid12' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid13' is set
            if (moid13 == null)
                throw new ApiException(400, "Missing required parameter 'moid13' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid14' is set
            if (moid14 == null)
                throw new ApiException(400, "Missing required parameter 'moid14' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");
            // verify the required parameter 'moid15' is set
            if (moid15 == null)
                throw new ApiException(400, "Missing required parameter 'moid15' when calling AssetClusterMemberApi->AssetClusterMembersMoidGet");

            var localVarPath = "/asset/ClusterMembers/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (moid5 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid5)); // path parameter
            if (moid6 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid6)); // path parameter
            if (moid7 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid7)); // path parameter
            if (moid8 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid8)); // path parameter
            if (moid9 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid9)); // path parameter
            if (moid10 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid10)); // path parameter
            if (moid11 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid11)); // path parameter
            if (moid12 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid12)); // path parameter
            if (moid13 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid13)); // path parameter
            if (moid14 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid14)); // path parameter
            if (moid15 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid15)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetClusterMembersMoidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetClusterMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetClusterMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetClusterMember)));
        }

    }
}
