/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// This MO contains a task definition 
    /// </summary>
    [DataContract]
    public partial class WorkflowTaskMeta :  IEquatable<WorkflowTaskMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTaskMeta" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="ActionType">A task execution type to indicate if it is a system task  .</param>
        /// <param name="Description">A description of the task  .</param>
        /// <param name="InputKeys">An input key for the task  .</param>
        /// <param name="_Internal">Denotes whether or not this is an internal task.  Internal tasks will be hidden from the UI within a workflow.  .</param>
        /// <param name="Name">A task name that should be unique in Conductor DB  .</param>
        /// <param name="OutputKeys">An output key for the task  .</param>
        /// <param name="ResponseTimeoutSec">The worker respnose timeout value  .</param>
        /// <param name="RetryCount">A number of reties for this task  .</param>
        /// <param name="RetryDelaySec">The time on which the retry will be delayed  .</param>
        /// <param name="RetryLogic">A logic which defines the way to handle retry (FIXED, EXPONENTIAL_BACKOFF)  .</param>
        /// <param name="Src">A service owns the task metadata  .</param>
        /// <param name="TimeoutPolicy">A policy which defines the way to handle timeout (RETRY, TIME_OUT_WF, ALERT_ONLY)  .</param>
        /// <param name="TimeoutSec">A timeout value for the task ( in second )   .</param>
        public WorkflowTaskMeta(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), string ActionType = default(string), string Description = default(string), List<string> InputKeys = default(List<string>), bool? _Internal = default(bool?), string Name = default(string), List<string> OutputKeys = default(List<string>), long? ResponseTimeoutSec = default(long?), long? RetryCount = default(long?), long? RetryDelaySec = default(long?), string RetryLogic = default(string), string Src = default(string), string TimeoutPolicy = default(string), long? TimeoutSec = default(long?))
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.ActionType = ActionType;
            this.Description = Description;
            this.InputKeys = InputKeys;
            this._Internal = _Internal;
            this.Name = Name;
            this.OutputKeys = OutputKeys;
            this.ResponseTimeoutSec = ResponseTimeoutSec;
            this.RetryCount = RetryCount;
            this.RetryDelaySec = RetryDelaySec;
            this.RetryLogic = RetryLogic;
            this.Src = Src;
            this.TimeoutPolicy = TimeoutPolicy;
            this.TimeoutSec = TimeoutSec;
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// A task execution type to indicate if it is a system task  
        /// </summary>
        /// <value>A task execution type to indicate if it is a system task  </value>
        [DataMember(Name="ActionType", EmitDefaultValue=false)]
        public string ActionType { get; set; }

        /// <summary>
        /// A description of the task  
        /// </summary>
        /// <value>A description of the task  </value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// An input key for the task  
        /// </summary>
        /// <value>An input key for the task  </value>
        [DataMember(Name="InputKeys", EmitDefaultValue=false)]
        public List<string> InputKeys { get; set; }

        /// <summary>
        /// Denotes whether or not this is an internal task.  Internal tasks will be hidden from the UI within a workflow.  
        /// </summary>
        /// <value>Denotes whether or not this is an internal task.  Internal tasks will be hidden from the UI within a workflow.  </value>
        [DataMember(Name="Internal", EmitDefaultValue=false)]
        public bool? _Internal { get; set; }

        /// <summary>
        /// A task name that should be unique in Conductor DB  
        /// </summary>
        /// <value>A task name that should be unique in Conductor DB  </value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// An output key for the task  
        /// </summary>
        /// <value>An output key for the task  </value>
        [DataMember(Name="OutputKeys", EmitDefaultValue=false)]
        public List<string> OutputKeys { get; set; }

        /// <summary>
        /// The worker respnose timeout value  
        /// </summary>
        /// <value>The worker respnose timeout value  </value>
        [DataMember(Name="ResponseTimeoutSec", EmitDefaultValue=false)]
        public long? ResponseTimeoutSec { get; set; }

        /// <summary>
        /// A number of reties for this task  
        /// </summary>
        /// <value>A number of reties for this task  </value>
        [DataMember(Name="RetryCount", EmitDefaultValue=false)]
        public long? RetryCount { get; set; }

        /// <summary>
        /// The time on which the retry will be delayed  
        /// </summary>
        /// <value>The time on which the retry will be delayed  </value>
        [DataMember(Name="RetryDelaySec", EmitDefaultValue=false)]
        public long? RetryDelaySec { get; set; }

        /// <summary>
        /// A logic which defines the way to handle retry (FIXED, EXPONENTIAL_BACKOFF)  
        /// </summary>
        /// <value>A logic which defines the way to handle retry (FIXED, EXPONENTIAL_BACKOFF)  </value>
        [DataMember(Name="RetryLogic", EmitDefaultValue=false)]
        public string RetryLogic { get; set; }

        /// <summary>
        /// A service owns the task metadata  
        /// </summary>
        /// <value>A service owns the task metadata  </value>
        [DataMember(Name="Src", EmitDefaultValue=false)]
        public string Src { get; set; }

        /// <summary>
        /// A policy which defines the way to handle timeout (RETRY, TIME_OUT_WF, ALERT_ONLY)  
        /// </summary>
        /// <value>A policy which defines the way to handle timeout (RETRY, TIME_OUT_WF, ALERT_ONLY)  </value>
        [DataMember(Name="TimeoutPolicy", EmitDefaultValue=false)]
        public string TimeoutPolicy { get; set; }

        /// <summary>
        /// A timeout value for the task ( in second )   
        /// </summary>
        /// <value>A timeout value for the task ( in second )   </value>
        [DataMember(Name="TimeoutSec", EmitDefaultValue=false)]
        public long? TimeoutSec { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowTaskMeta {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InputKeys: ").Append(InputKeys).Append("\n");
            sb.Append("  _Internal: ").Append(_Internal).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OutputKeys: ").Append(OutputKeys).Append("\n");
            sb.Append("  ResponseTimeoutSec: ").Append(ResponseTimeoutSec).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  RetryDelaySec: ").Append(RetryDelaySec).Append("\n");
            sb.Append("  RetryLogic: ").Append(RetryLogic).Append("\n");
            sb.Append("  Src: ").Append(Src).Append("\n");
            sb.Append("  TimeoutPolicy: ").Append(TimeoutPolicy).Append("\n");
            sb.Append("  TimeoutSec: ").Append(TimeoutSec).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkflowTaskMeta);
        }

        /// <summary>
        /// Returns true if WorkflowTaskMeta instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowTaskMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowTaskMeta other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.ActionType == other.ActionType ||
                    this.ActionType != null &&
                    this.ActionType.Equals(other.ActionType)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.InputKeys == other.InputKeys ||
                    this.InputKeys != null &&
                    this.InputKeys.SequenceEqual(other.InputKeys)
                ) && 
                (
                    this._Internal == other._Internal ||
                    this._Internal != null &&
                    this._Internal.Equals(other._Internal)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.OutputKeys == other.OutputKeys ||
                    this.OutputKeys != null &&
                    this.OutputKeys.SequenceEqual(other.OutputKeys)
                ) && 
                (
                    this.ResponseTimeoutSec == other.ResponseTimeoutSec ||
                    this.ResponseTimeoutSec != null &&
                    this.ResponseTimeoutSec.Equals(other.ResponseTimeoutSec)
                ) && 
                (
                    this.RetryCount == other.RetryCount ||
                    this.RetryCount != null &&
                    this.RetryCount.Equals(other.RetryCount)
                ) && 
                (
                    this.RetryDelaySec == other.RetryDelaySec ||
                    this.RetryDelaySec != null &&
                    this.RetryDelaySec.Equals(other.RetryDelaySec)
                ) && 
                (
                    this.RetryLogic == other.RetryLogic ||
                    this.RetryLogic != null &&
                    this.RetryLogic.Equals(other.RetryLogic)
                ) && 
                (
                    this.Src == other.Src ||
                    this.Src != null &&
                    this.Src.Equals(other.Src)
                ) && 
                (
                    this.TimeoutPolicy == other.TimeoutPolicy ||
                    this.TimeoutPolicy != null &&
                    this.TimeoutPolicy.Equals(other.TimeoutPolicy)
                ) && 
                (
                    this.TimeoutSec == other.TimeoutSec ||
                    this.TimeoutSec != null &&
                    this.TimeoutSec.Equals(other.TimeoutSec)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.ActionType != null)
                    hash = hash * 59 + this.ActionType.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.InputKeys != null)
                    hash = hash * 59 + this.InputKeys.GetHashCode();
                if (this._Internal != null)
                    hash = hash * 59 + this._Internal.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.OutputKeys != null)
                    hash = hash * 59 + this.OutputKeys.GetHashCode();
                if (this.ResponseTimeoutSec != null)
                    hash = hash * 59 + this.ResponseTimeoutSec.GetHashCode();
                if (this.RetryCount != null)
                    hash = hash * 59 + this.RetryCount.GetHashCode();
                if (this.RetryDelaySec != null)
                    hash = hash * 59 + this.RetryDelaySec.GetHashCode();
                if (this.RetryLogic != null)
                    hash = hash * 59 + this.RetryLogic.GetHashCode();
                if (this.Src != null)
                    hash = hash * 59 + this.Src.GetHashCode();
                if (this.TimeoutPolicy != null)
                    hash = hash * 59 + this.TimeoutPolicy.GetHashCode();
                if (this.TimeoutSec != null)
                    hash = hash * 59 + this.TimeoutSec.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
