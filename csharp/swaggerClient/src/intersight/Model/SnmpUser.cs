/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// Complex type for a User based security model, for communication between an agent and manager. Applicable only for SNMPv3. 
    /// </summary>
    [DataContract]
    public partial class SnmpUser :  IEquatable<SnmpUser>, IValidatableObject
    {
        /// <summary>
        /// Authorization protocol for authenticating the user  
        /// </summary>
        /// <value>Authorization protocol for authenticating the user  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthTypeEnum
        {
            
            /// <summary>
            /// Enum NA for "NA"
            /// </summary>
            [EnumMember(Value = "NA")]
            NA,
            
            /// <summary>
            /// Enum MD5 for "MD5"
            /// </summary>
            [EnumMember(Value = "MD5")]
            MD5,
            
            /// <summary>
            /// Enum SHA for "SHA"
            /// </summary>
            [EnumMember(Value = "SHA")]
            SHA
        }

        /// <summary>
        /// Privacy protocol for the user  
        /// </summary>
        /// <value>Privacy protocol for the user  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrivacyTypeEnum
        {
            
            /// <summary>
            /// Enum NA for "NA"
            /// </summary>
            [EnumMember(Value = "NA")]
            NA,
            
            /// <summary>
            /// Enum DES for "DES"
            /// </summary>
            [EnumMember(Value = "DES")]
            DES,
            
            /// <summary>
            /// Enum AES for "AES"
            /// </summary>
            [EnumMember(Value = "AES")]
            AES
        }

        /// <summary>
        /// Security mechanism used for communication between agent and manager   
        /// </summary>
        /// <value>Security mechanism used for communication between agent and manager   </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityLevelEnum
        {
            
            /// <summary>
            /// Enum AuthPriv for "AuthPriv"
            /// </summary>
            [EnumMember(Value = "AuthPriv")]
            AuthPriv,
            
            /// <summary>
            /// Enum NoAuthNoPriv for "NoAuthNoPriv"
            /// </summary>
            [EnumMember(Value = "NoAuthNoPriv")]
            NoAuthNoPriv,
            
            /// <summary>
            /// Enum AuthNoPriv for "AuthNoPriv"
            /// </summary>
            [EnumMember(Value = "AuthNoPriv")]
            AuthNoPriv
        }

        /// <summary>
        /// Authorization protocol for authenticating the user  
        /// </summary>
        /// <value>Authorization protocol for authenticating the user  </value>
        [DataMember(Name="AuthType", EmitDefaultValue=false)]
        public AuthTypeEnum? AuthType { get; set; }
        /// <summary>
        /// Privacy protocol for the user  
        /// </summary>
        /// <value>Privacy protocol for the user  </value>
        [DataMember(Name="PrivacyType", EmitDefaultValue=false)]
        public PrivacyTypeEnum? PrivacyType { get; set; }
        /// <summary>
        /// Security mechanism used for communication between agent and manager   
        /// </summary>
        /// <value>Security mechanism used for communication between agent and manager   </value>
        [DataMember(Name="SecurityLevel", EmitDefaultValue=false)]
        public SecurityLevelEnum? SecurityLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SnmpUser" /> class.
        /// </summary>
        /// <param name="AuthPassword">Authorization password for the user  .</param>
        /// <param name="AuthType">Authorization protocol for authenticating the user   (default to AuthTypeEnum.NA).</param>
        /// <param name="IsPrivacyPasswordSet">IsPrivacyPasswordSet.</param>
        /// <param name="Name">SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.  .</param>
        /// <param name="PrivacyPassword">Privacy password for the user  .</param>
        /// <param name="PrivacyType">Privacy protocol for the user   (default to PrivacyTypeEnum.NA).</param>
        /// <param name="SecurityLevel">Security mechanism used for communication between agent and manager    (default to SecurityLevelEnum.AuthPriv).</param>
        public SnmpUser(string AuthPassword = default(string), AuthTypeEnum? AuthType = AuthTypeEnum.NA, bool? IsPrivacyPasswordSet = default(bool?), string Name = default(string), string PrivacyPassword = default(string), PrivacyTypeEnum? PrivacyType = PrivacyTypeEnum.NA, SecurityLevelEnum? SecurityLevel = SecurityLevelEnum.AuthPriv)
        {
            this.AuthPassword = AuthPassword;
            // use default value if no "AuthType" provided
            if (AuthType == null)
            {
                this.AuthType = AuthTypeEnum.NA;
            }
            else
            {
                this.AuthType = AuthType;
            }
            this.IsPrivacyPasswordSet = IsPrivacyPasswordSet;
            this.Name = Name;
            this.PrivacyPassword = PrivacyPassword;
            // use default value if no "PrivacyType" provided
            if (PrivacyType == null)
            {
                this.PrivacyType = PrivacyTypeEnum.NA;
            }
            else
            {
                this.PrivacyType = PrivacyType;
            }
            // use default value if no "SecurityLevel" provided
            if (SecurityLevel == null)
            {
                this.SecurityLevel = SecurityLevelEnum.AuthPriv;
            }
            else
            {
                this.SecurityLevel = SecurityLevel;
            }
        }
        
        /// <summary>
        /// Authorization password for the user  
        /// </summary>
        /// <value>Authorization password for the user  </value>
        [DataMember(Name="AuthPassword", EmitDefaultValue=false)]
        public string AuthPassword { get; set; }


        /// <summary>
        /// Gets or Sets IsAuthPasswordSet
        /// </summary>
        [DataMember(Name="IsAuthPasswordSet", EmitDefaultValue=false)]
        public bool? IsAuthPasswordSet { get; private set; }

        /// <summary>
        /// Gets or Sets IsPrivacyPasswordSet
        /// </summary>
        [DataMember(Name="IsPrivacyPasswordSet", EmitDefaultValue=false)]
        public bool? IsPrivacyPasswordSet { get; set; }

        /// <summary>
        /// SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.  
        /// </summary>
        /// <value>SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.  </value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Privacy password for the user  
        /// </summary>
        /// <value>Privacy password for the user  </value>
        [DataMember(Name="PrivacyPassword", EmitDefaultValue=false)]
        public string PrivacyPassword { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SnmpUser {\n");
            sb.Append("  AuthPassword: ").Append(AuthPassword).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  IsAuthPasswordSet: ").Append(IsAuthPasswordSet).Append("\n");
            sb.Append("  IsPrivacyPasswordSet: ").Append(IsPrivacyPasswordSet).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrivacyPassword: ").Append(PrivacyPassword).Append("\n");
            sb.Append("  PrivacyType: ").Append(PrivacyType).Append("\n");
            sb.Append("  SecurityLevel: ").Append(SecurityLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SnmpUser);
        }

        /// <summary>
        /// Returns true if SnmpUser instances are equal
        /// </summary>
        /// <param name="other">Instance of SnmpUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SnmpUser other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AuthPassword == other.AuthPassword ||
                    this.AuthPassword != null &&
                    this.AuthPassword.Equals(other.AuthPassword)
                ) && 
                (
                    this.AuthType == other.AuthType ||
                    this.AuthType != null &&
                    this.AuthType.Equals(other.AuthType)
                ) && 
                (
                    this.IsAuthPasswordSet == other.IsAuthPasswordSet ||
                    this.IsAuthPasswordSet != null &&
                    this.IsAuthPasswordSet.Equals(other.IsAuthPasswordSet)
                ) && 
                (
                    this.IsPrivacyPasswordSet == other.IsPrivacyPasswordSet ||
                    this.IsPrivacyPasswordSet != null &&
                    this.IsPrivacyPasswordSet.Equals(other.IsPrivacyPasswordSet)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PrivacyPassword == other.PrivacyPassword ||
                    this.PrivacyPassword != null &&
                    this.PrivacyPassword.Equals(other.PrivacyPassword)
                ) && 
                (
                    this.PrivacyType == other.PrivacyType ||
                    this.PrivacyType != null &&
                    this.PrivacyType.Equals(other.PrivacyType)
                ) && 
                (
                    this.SecurityLevel == other.SecurityLevel ||
                    this.SecurityLevel != null &&
                    this.SecurityLevel.Equals(other.SecurityLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AuthPassword != null)
                    hash = hash * 59 + this.AuthPassword.GetHashCode();
                if (this.AuthType != null)
                    hash = hash * 59 + this.AuthType.GetHashCode();
                if (this.IsAuthPasswordSet != null)
                    hash = hash * 59 + this.IsAuthPasswordSet.GetHashCode();
                if (this.IsPrivacyPasswordSet != null)
                    hash = hash * 59 + this.IsPrivacyPasswordSet.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PrivacyPassword != null)
                    hash = hash * 59 + this.PrivacyPassword.GetHashCode();
                if (this.PrivacyType != null)
                    hash = hash * 59 + this.PrivacyType.GetHashCode();
                if (this.SecurityLevel != null)
                    hash = hash * 59 + this.SecurityLevel.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
