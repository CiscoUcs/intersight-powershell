/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// This type models a single virtual drive that needs to be created through this policy 
    /// </summary>
    [DataContract]
    public partial class StorageVirtualDriveConfig :  IEquatable<StorageVirtualDriveConfig>, IValidatableObject
    {
        /// <summary>
        /// This property holds the access policy that host has on this virtual drive  
        /// </summary>
        /// <value>This property holds the access policy that host has on this virtual drive  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessPolicyEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum ReadWrite for "ReadWrite"
            /// </summary>
            [EnumMember(Value = "ReadWrite")]
            ReadWrite,
            
            /// <summary>
            /// Enum ReadOnly for "ReadOnly"
            /// </summary>
            [EnumMember(Value = "ReadOnly")]
            ReadOnly,
            
            /// <summary>
            /// Enum Blocked for "Blocked"
            /// </summary>
            [EnumMember(Value = "Blocked")]
            Blocked
        }

        /// <summary>
        /// This property expect disk cache policy  
        /// </summary>
        /// <value>This property expect disk cache policy  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DriveCacheEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum NoChange for "NoChange"
            /// </summary>
            [EnumMember(Value = "NoChange")]
            NoChange,
            
            /// <summary>
            /// Enum Enable for "Enable"
            /// </summary>
            [EnumMember(Value = "Enable")]
            Enable,
            
            /// <summary>
            /// Enum Disable for "Disable"
            /// </summary>
            [EnumMember(Value = "Disable")]
            Disable
        }

        /// <summary>
        /// This property expects the desired IO mode - direct IO or cached IO  
        /// </summary>
        /// <value>This property expects the desired IO mode - direct IO or cached IO  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IoPolicyEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum Direct for "Direct"
            /// </summary>
            [EnumMember(Value = "Direct")]
            Direct,
            
            /// <summary>
            /// Enum Cached for "Cached"
            /// </summary>
            [EnumMember(Value = "Cached")]
            Cached
        }

        /// <summary>
        /// This property holds the read ahead mode to be used  
        /// </summary>
        /// <value>This property holds the read ahead mode to be used  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReadPolicyEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum ReadAhead for "ReadAhead"
            /// </summary>
            [EnumMember(Value = "ReadAhead")]
            ReadAhead,
            
            /// <summary>
            /// Enum NoReadAhead for "NoReadAhead"
            /// </summary>
            [EnumMember(Value = "NoReadAhead")]
            NoReadAhead
        }

        /// <summary>
        /// This property holds the write mode used to write the data in this virtual drive   
        /// </summary>
        /// <value>This property holds the write mode used to write the data in this virtual drive   </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WritePolicyEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum WriteThrough for "WriteThrough"
            /// </summary>
            [EnumMember(Value = "WriteThrough")]
            WriteThrough,
            
            /// <summary>
            /// Enum WriteBackGoodBbu for "WriteBackGoodBbu"
            /// </summary>
            [EnumMember(Value = "WriteBackGoodBbu")]
            WriteBackGoodBbu,
            
            /// <summary>
            /// Enum AlwaysWriteBack for "AlwaysWriteBack"
            /// </summary>
            [EnumMember(Value = "AlwaysWriteBack")]
            AlwaysWriteBack
        }

        /// <summary>
        /// This property holds the access policy that host has on this virtual drive  
        /// </summary>
        /// <value>This property holds the access policy that host has on this virtual drive  </value>
        [DataMember(Name="AccessPolicy", EmitDefaultValue=false)]
        public AccessPolicyEnum? AccessPolicy { get; set; }
        /// <summary>
        /// This property expect disk cache policy  
        /// </summary>
        /// <value>This property expect disk cache policy  </value>
        [DataMember(Name="DriveCache", EmitDefaultValue=false)]
        public DriveCacheEnum? DriveCache { get; set; }
        /// <summary>
        /// This property expects the desired IO mode - direct IO or cached IO  
        /// </summary>
        /// <value>This property expects the desired IO mode - direct IO or cached IO  </value>
        [DataMember(Name="IoPolicy", EmitDefaultValue=false)]
        public IoPolicyEnum? IoPolicy { get; set; }
        /// <summary>
        /// This property holds the read ahead mode to be used  
        /// </summary>
        /// <value>This property holds the read ahead mode to be used  </value>
        [DataMember(Name="ReadPolicy", EmitDefaultValue=false)]
        public ReadPolicyEnum? ReadPolicy { get; set; }
        /// <summary>
        /// This property holds the write mode used to write the data in this virtual drive   
        /// </summary>
        /// <value>This property holds the write mode used to write the data in this virtual drive   </value>
        [DataMember(Name="WritePolicy", EmitDefaultValue=false)]
        public WritePolicyEnum? WritePolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageVirtualDriveConfig" /> class.
        /// </summary>
        /// <param name="AccessPolicy">This property holds the access policy that host has on this virtual drive   (default to AccessPolicyEnum.Default).</param>
        /// <param name="BootDrive">This flag enables the use of this virtual drive as a boot drive  .</param>
        /// <param name="DiskGroupPolicy">Disk group policy that has the disk group in which this virtual drive needs to be created  .</param>
        /// <param name="DriveCache">This property expect disk cache policy   (default to DriveCacheEnum.Default).</param>
        /// <param name="ExpandToAvailable">This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored  .</param>
        /// <param name="IoPolicy">This property expects the desired IO mode - direct IO or cached IO   (default to IoPolicyEnum.Default).</param>
        /// <param name="Name">The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed  .</param>
        /// <param name="ReadPolicy">This property holds the read ahead mode to be used   (default to ReadPolicyEnum.Default).</param>
        /// <param name="Size">Virtual drive size in MB. This is a required field unless the &#39;Expand to Available&#39; option is enabled  .</param>
        /// <param name="WritePolicy">This property holds the write mode used to write the data in this virtual drive    (default to WritePolicyEnum.Default).</param>
        public StorageVirtualDriveConfig(AccessPolicyEnum? AccessPolicy = AccessPolicyEnum.Default, bool? BootDrive = default(bool?), string DiskGroupPolicy = default(string), DriveCacheEnum? DriveCache = DriveCacheEnum.Default, bool? ExpandToAvailable = default(bool?), IoPolicyEnum? IoPolicy = IoPolicyEnum.Default, string Name = default(string), ReadPolicyEnum? ReadPolicy = ReadPolicyEnum.Default, long? Size = default(long?), WritePolicyEnum? WritePolicy = WritePolicyEnum.Default)
        {
            // use default value if no "AccessPolicy" provided
            if (AccessPolicy == null)
            {
                this.AccessPolicy = AccessPolicyEnum.Default;
            }
            else
            {
                this.AccessPolicy = AccessPolicy;
            }
            this.BootDrive = BootDrive;
            this.DiskGroupPolicy = DiskGroupPolicy;
            // use default value if no "DriveCache" provided
            if (DriveCache == null)
            {
                this.DriveCache = DriveCacheEnum.Default;
            }
            else
            {
                this.DriveCache = DriveCache;
            }
            this.ExpandToAvailable = ExpandToAvailable;
            // use default value if no "IoPolicy" provided
            if (IoPolicy == null)
            {
                this.IoPolicy = IoPolicyEnum.Default;
            }
            else
            {
                this.IoPolicy = IoPolicy;
            }
            this.Name = Name;
            // use default value if no "ReadPolicy" provided
            if (ReadPolicy == null)
            {
                this.ReadPolicy = ReadPolicyEnum.Default;
            }
            else
            {
                this.ReadPolicy = ReadPolicy;
            }
            this.Size = Size;
            // use default value if no "WritePolicy" provided
            if (WritePolicy == null)
            {
                this.WritePolicy = WritePolicyEnum.Default;
            }
            else
            {
                this.WritePolicy = WritePolicy;
            }
        }
        

        /// <summary>
        /// This flag enables the use of this virtual drive as a boot drive  
        /// </summary>
        /// <value>This flag enables the use of this virtual drive as a boot drive  </value>
        [DataMember(Name="BootDrive", EmitDefaultValue=false)]
        public bool? BootDrive { get; set; }

        /// <summary>
        /// Disk group policy that has the disk group in which this virtual drive needs to be created  
        /// </summary>
        /// <value>Disk group policy that has the disk group in which this virtual drive needs to be created  </value>
        [DataMember(Name="DiskGroupName", EmitDefaultValue=false)]
        public string DiskGroupName { get; private set; }

        /// <summary>
        /// Disk group policy that has the disk group in which this virtual drive needs to be created  
        /// </summary>
        /// <value>Disk group policy that has the disk group in which this virtual drive needs to be created  </value>
        [DataMember(Name="DiskGroupPolicy", EmitDefaultValue=false)]
        public string DiskGroupPolicy { get; set; }


        /// <summary>
        /// This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored  
        /// </summary>
        /// <value>This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored  </value>
        [DataMember(Name="ExpandToAvailable", EmitDefaultValue=false)]
        public bool? ExpandToAvailable { get; set; }


        /// <summary>
        /// The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed  
        /// </summary>
        /// <value>The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed  </value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Virtual drive size in MB. This is a required field unless the &#39;Expand to Available&#39; option is enabled  
        /// </summary>
        /// <value>Virtual drive size in MB. This is a required field unless the &#39;Expand to Available&#39; option is enabled  </value>
        [DataMember(Name="Size", EmitDefaultValue=false)]
        public long? Size { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageVirtualDriveConfig {\n");
            sb.Append("  AccessPolicy: ").Append(AccessPolicy).Append("\n");
            sb.Append("  BootDrive: ").Append(BootDrive).Append("\n");
            sb.Append("  DiskGroupName: ").Append(DiskGroupName).Append("\n");
            sb.Append("  DiskGroupPolicy: ").Append(DiskGroupPolicy).Append("\n");
            sb.Append("  DriveCache: ").Append(DriveCache).Append("\n");
            sb.Append("  ExpandToAvailable: ").Append(ExpandToAvailable).Append("\n");
            sb.Append("  IoPolicy: ").Append(IoPolicy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReadPolicy: ").Append(ReadPolicy).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  WritePolicy: ").Append(WritePolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StorageVirtualDriveConfig);
        }

        /// <summary>
        /// Returns true if StorageVirtualDriveConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of StorageVirtualDriveConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageVirtualDriveConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessPolicy == other.AccessPolicy ||
                    this.AccessPolicy != null &&
                    this.AccessPolicy.Equals(other.AccessPolicy)
                ) && 
                (
                    this.BootDrive == other.BootDrive ||
                    this.BootDrive != null &&
                    this.BootDrive.Equals(other.BootDrive)
                ) && 
                (
                    this.DiskGroupName == other.DiskGroupName ||
                    this.DiskGroupName != null &&
                    this.DiskGroupName.Equals(other.DiskGroupName)
                ) && 
                (
                    this.DiskGroupPolicy == other.DiskGroupPolicy ||
                    this.DiskGroupPolicy != null &&
                    this.DiskGroupPolicy.Equals(other.DiskGroupPolicy)
                ) && 
                (
                    this.DriveCache == other.DriveCache ||
                    this.DriveCache != null &&
                    this.DriveCache.Equals(other.DriveCache)
                ) && 
                (
                    this.ExpandToAvailable == other.ExpandToAvailable ||
                    this.ExpandToAvailable != null &&
                    this.ExpandToAvailable.Equals(other.ExpandToAvailable)
                ) && 
                (
                    this.IoPolicy == other.IoPolicy ||
                    this.IoPolicy != null &&
                    this.IoPolicy.Equals(other.IoPolicy)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ReadPolicy == other.ReadPolicy ||
                    this.ReadPolicy != null &&
                    this.ReadPolicy.Equals(other.ReadPolicy)
                ) && 
                (
                    this.Size == other.Size ||
                    this.Size != null &&
                    this.Size.Equals(other.Size)
                ) && 
                (
                    this.WritePolicy == other.WritePolicy ||
                    this.WritePolicy != null &&
                    this.WritePolicy.Equals(other.WritePolicy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessPolicy != null)
                    hash = hash * 59 + this.AccessPolicy.GetHashCode();
                if (this.BootDrive != null)
                    hash = hash * 59 + this.BootDrive.GetHashCode();
                if (this.DiskGroupName != null)
                    hash = hash * 59 + this.DiskGroupName.GetHashCode();
                if (this.DiskGroupPolicy != null)
                    hash = hash * 59 + this.DiskGroupPolicy.GetHashCode();
                if (this.DriveCache != null)
                    hash = hash * 59 + this.DriveCache.GetHashCode();
                if (this.ExpandToAvailable != null)
                    hash = hash * 59 + this.ExpandToAvailable.GetHashCode();
                if (this.IoPolicy != null)
                    hash = hash * 59 + this.IoPolicy.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ReadPolicy != null)
                    hash = hash * 59 + this.ReadPolicy.GetHashCode();
                if (this.Size != null)
                    hash = hash * 59 + this.Size.GetHashCode();
                if (this.WritePolicy != null)
                    hash = hash * 59 + this.WritePolicy.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
