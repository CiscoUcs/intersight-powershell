/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// Flex flash controller properties 
    /// </summary>
    [DataContract]
    public partial class StorageFlexFlashControllerProps :  IEquatable<StorageFlexFlashControllerProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageFlexFlashControllerProps" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="CardsManageable">CardsManageable.</param>
        /// <param name="ConfiguredMode">ConfiguredMode.</param>
        /// <param name="ControllerName">ControllerName.</param>
        /// <param name="ControllerStatus">ControllerStatus.</param>
        /// <param name="FwVersion">FwVersion.</param>
        /// <param name="InternalState">InternalState.</param>
        /// <param name="OperatingMode">OperatingMode.</param>
        /// <param name="PhysicalDriveCount">PhysicalDriveCount.</param>
        /// <param name="ProductName">ProductName.</param>
        /// <param name="RegisteredDevice">RegisteredDevice.</param>
        /// <param name="StartupFwVersion">StartupFwVersion.</param>
        /// <param name="StorageFlexFlashController">StorageFlexFlashController.</param>
        /// <param name="VirtualDriveCount">VirtualDriveCount.</param>
        public StorageFlexFlashControllerProps(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), string CardsManageable = default(string), string ConfiguredMode = default(string), string ControllerName = default(string), string ControllerStatus = default(string), string FwVersion = default(string), string InternalState = default(string), string OperatingMode = default(string), string PhysicalDriveCount = default(string), string ProductName = default(string), AssetDeviceRegistrationRef RegisteredDevice = default(AssetDeviceRegistrationRef), string StartupFwVersion = default(string), StorageFlexFlashControllerRef StorageFlexFlashController = default(StorageFlexFlashControllerRef), string VirtualDriveCount = default(string))
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.CardsManageable = CardsManageable;
            this.ConfiguredMode = ConfiguredMode;
            this.ControllerName = ControllerName;
            this.ControllerStatus = ControllerStatus;
            this.FwVersion = FwVersion;
            this.InternalState = InternalState;
            this.OperatingMode = OperatingMode;
            this.PhysicalDriveCount = PhysicalDriveCount;
            this.ProductName = ProductName;
            this.RegisteredDevice = RegisteredDevice;
            this.StartupFwVersion = StartupFwVersion;
            this.StorageFlexFlashController = StorageFlexFlashController;
            this.VirtualDriveCount = VirtualDriveCount;
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// Gets or Sets DeviceMoId
        /// </summary>
        [DataMember(Name="DeviceMoId", EmitDefaultValue=false)]
        public string DeviceMoId { get; private set; }

        /// <summary>
        /// Gets or Sets Dn
        /// </summary>
        [DataMember(Name="Dn", EmitDefaultValue=false)]
        public string Dn { get; private set; }

        /// <summary>
        /// Gets or Sets Rn
        /// </summary>
        [DataMember(Name="Rn", EmitDefaultValue=false)]
        public string Rn { get; private set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="Model", EmitDefaultValue=false)]
        public string Model { get; private set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name="Revision", EmitDefaultValue=false)]
        public string Revision { get; private set; }

        /// <summary>
        /// Gets or Sets Serial
        /// </summary>
        [DataMember(Name="Serial", EmitDefaultValue=false)]
        public string Serial { get; private set; }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name="Vendor", EmitDefaultValue=false)]
        public string Vendor { get; private set; }

        /// <summary>
        /// Gets or Sets CardsManageable
        /// </summary>
        [DataMember(Name="CardsManageable", EmitDefaultValue=false)]
        public string CardsManageable { get; set; }

        /// <summary>
        /// Gets or Sets ConfiguredMode
        /// </summary>
        [DataMember(Name="ConfiguredMode", EmitDefaultValue=false)]
        public string ConfiguredMode { get; set; }

        /// <summary>
        /// Gets or Sets ControllerName
        /// </summary>
        [DataMember(Name="ControllerName", EmitDefaultValue=false)]
        public string ControllerName { get; set; }

        /// <summary>
        /// Gets or Sets ControllerStatus
        /// </summary>
        [DataMember(Name="ControllerStatus", EmitDefaultValue=false)]
        public string ControllerStatus { get; set; }

        /// <summary>
        /// Gets or Sets FwVersion
        /// </summary>
        [DataMember(Name="FwVersion", EmitDefaultValue=false)]
        public string FwVersion { get; set; }

        /// <summary>
        /// Gets or Sets InternalState
        /// </summary>
        [DataMember(Name="InternalState", EmitDefaultValue=false)]
        public string InternalState { get; set; }

        /// <summary>
        /// Gets or Sets OperatingMode
        /// </summary>
        [DataMember(Name="OperatingMode", EmitDefaultValue=false)]
        public string OperatingMode { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalDriveCount
        /// </summary>
        [DataMember(Name="PhysicalDriveCount", EmitDefaultValue=false)]
        public string PhysicalDriveCount { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="ProductName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredDevice
        /// </summary>
        [DataMember(Name="RegisteredDevice", EmitDefaultValue=false)]
        public AssetDeviceRegistrationRef RegisteredDevice { get; set; }

        /// <summary>
        /// Gets or Sets StartupFwVersion
        /// </summary>
        [DataMember(Name="StartupFwVersion", EmitDefaultValue=false)]
        public string StartupFwVersion { get; set; }

        /// <summary>
        /// Gets or Sets StorageFlexFlashController
        /// </summary>
        [DataMember(Name="StorageFlexFlashController", EmitDefaultValue=false)]
        public StorageFlexFlashControllerRef StorageFlexFlashController { get; set; }

        /// <summary>
        /// Gets or Sets VirtualDriveCount
        /// </summary>
        [DataMember(Name="VirtualDriveCount", EmitDefaultValue=false)]
        public string VirtualDriveCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageFlexFlashControllerProps {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  DeviceMoId: ").Append(DeviceMoId).Append("\n");
            sb.Append("  Dn: ").Append(Dn).Append("\n");
            sb.Append("  Rn: ").Append(Rn).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  CardsManageable: ").Append(CardsManageable).Append("\n");
            sb.Append("  ConfiguredMode: ").Append(ConfiguredMode).Append("\n");
            sb.Append("  ControllerName: ").Append(ControllerName).Append("\n");
            sb.Append("  ControllerStatus: ").Append(ControllerStatus).Append("\n");
            sb.Append("  FwVersion: ").Append(FwVersion).Append("\n");
            sb.Append("  InternalState: ").Append(InternalState).Append("\n");
            sb.Append("  OperatingMode: ").Append(OperatingMode).Append("\n");
            sb.Append("  PhysicalDriveCount: ").Append(PhysicalDriveCount).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  RegisteredDevice: ").Append(RegisteredDevice).Append("\n");
            sb.Append("  StartupFwVersion: ").Append(StartupFwVersion).Append("\n");
            sb.Append("  StorageFlexFlashController: ").Append(StorageFlexFlashController).Append("\n");
            sb.Append("  VirtualDriveCount: ").Append(VirtualDriveCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StorageFlexFlashControllerProps);
        }

        /// <summary>
        /// Returns true if StorageFlexFlashControllerProps instances are equal
        /// </summary>
        /// <param name="other">Instance of StorageFlexFlashControllerProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageFlexFlashControllerProps other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.DeviceMoId == other.DeviceMoId ||
                    this.DeviceMoId != null &&
                    this.DeviceMoId.Equals(other.DeviceMoId)
                ) && 
                (
                    this.Dn == other.Dn ||
                    this.Dn != null &&
                    this.Dn.Equals(other.Dn)
                ) && 
                (
                    this.Rn == other.Rn ||
                    this.Rn != null &&
                    this.Rn.Equals(other.Rn)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.Revision == other.Revision ||
                    this.Revision != null &&
                    this.Revision.Equals(other.Revision)
                ) && 
                (
                    this.Serial == other.Serial ||
                    this.Serial != null &&
                    this.Serial.Equals(other.Serial)
                ) && 
                (
                    this.Vendor == other.Vendor ||
                    this.Vendor != null &&
                    this.Vendor.Equals(other.Vendor)
                ) && 
                (
                    this.CardsManageable == other.CardsManageable ||
                    this.CardsManageable != null &&
                    this.CardsManageable.Equals(other.CardsManageable)
                ) && 
                (
                    this.ConfiguredMode == other.ConfiguredMode ||
                    this.ConfiguredMode != null &&
                    this.ConfiguredMode.Equals(other.ConfiguredMode)
                ) && 
                (
                    this.ControllerName == other.ControllerName ||
                    this.ControllerName != null &&
                    this.ControllerName.Equals(other.ControllerName)
                ) && 
                (
                    this.ControllerStatus == other.ControllerStatus ||
                    this.ControllerStatus != null &&
                    this.ControllerStatus.Equals(other.ControllerStatus)
                ) && 
                (
                    this.FwVersion == other.FwVersion ||
                    this.FwVersion != null &&
                    this.FwVersion.Equals(other.FwVersion)
                ) && 
                (
                    this.InternalState == other.InternalState ||
                    this.InternalState != null &&
                    this.InternalState.Equals(other.InternalState)
                ) && 
                (
                    this.OperatingMode == other.OperatingMode ||
                    this.OperatingMode != null &&
                    this.OperatingMode.Equals(other.OperatingMode)
                ) && 
                (
                    this.PhysicalDriveCount == other.PhysicalDriveCount ||
                    this.PhysicalDriveCount != null &&
                    this.PhysicalDriveCount.Equals(other.PhysicalDriveCount)
                ) && 
                (
                    this.ProductName == other.ProductName ||
                    this.ProductName != null &&
                    this.ProductName.Equals(other.ProductName)
                ) && 
                (
                    this.RegisteredDevice == other.RegisteredDevice ||
                    this.RegisteredDevice != null &&
                    this.RegisteredDevice.Equals(other.RegisteredDevice)
                ) && 
                (
                    this.StartupFwVersion == other.StartupFwVersion ||
                    this.StartupFwVersion != null &&
                    this.StartupFwVersion.Equals(other.StartupFwVersion)
                ) && 
                (
                    this.StorageFlexFlashController == other.StorageFlexFlashController ||
                    this.StorageFlexFlashController != null &&
                    this.StorageFlexFlashController.Equals(other.StorageFlexFlashController)
                ) && 
                (
                    this.VirtualDriveCount == other.VirtualDriveCount ||
                    this.VirtualDriveCount != null &&
                    this.VirtualDriveCount.Equals(other.VirtualDriveCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.DeviceMoId != null)
                    hash = hash * 59 + this.DeviceMoId.GetHashCode();
                if (this.Dn != null)
                    hash = hash * 59 + this.Dn.GetHashCode();
                if (this.Rn != null)
                    hash = hash * 59 + this.Rn.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Revision != null)
                    hash = hash * 59 + this.Revision.GetHashCode();
                if (this.Serial != null)
                    hash = hash * 59 + this.Serial.GetHashCode();
                if (this.Vendor != null)
                    hash = hash * 59 + this.Vendor.GetHashCode();
                if (this.CardsManageable != null)
                    hash = hash * 59 + this.CardsManageable.GetHashCode();
                if (this.ConfiguredMode != null)
                    hash = hash * 59 + this.ConfiguredMode.GetHashCode();
                if (this.ControllerName != null)
                    hash = hash * 59 + this.ControllerName.GetHashCode();
                if (this.ControllerStatus != null)
                    hash = hash * 59 + this.ControllerStatus.GetHashCode();
                if (this.FwVersion != null)
                    hash = hash * 59 + this.FwVersion.GetHashCode();
                if (this.InternalState != null)
                    hash = hash * 59 + this.InternalState.GetHashCode();
                if (this.OperatingMode != null)
                    hash = hash * 59 + this.OperatingMode.GetHashCode();
                if (this.PhysicalDriveCount != null)
                    hash = hash * 59 + this.PhysicalDriveCount.GetHashCode();
                if (this.ProductName != null)
                    hash = hash * 59 + this.ProductName.GetHashCode();
                if (this.RegisteredDevice != null)
                    hash = hash * 59 + this.RegisteredDevice.GetHashCode();
                if (this.StartupFwVersion != null)
                    hash = hash * 59 + this.StartupFwVersion.GetHashCode();
                if (this.StorageFlexFlashController != null)
                    hash = hash * 59 + this.StorageFlexFlashController.GetHashCode();
                if (this.VirtualDriveCount != null)
                    hash = hash * 59 + this.VirtualDriveCount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
