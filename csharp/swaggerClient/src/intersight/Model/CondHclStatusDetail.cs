/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// The HCL status detail for each component firmware and driver. 
    /// </summary>
    [DataContract]
    public partial class CondHclStatusDetail :  IEquatable<CondHclStatusDetail>, IValidatableObject
    {
        /// <summary>
        /// the reason for the status. The reason can be one of \&quot;Incompatible-Server-With-Component\&quot; - HCL validation has failed because the server model is not validated with this component \&quot;Incompatible-Processor\&quot; - HCL validation has failed because the processor is not validated with this component \&quot;Incompatible-Os-Info\&quot; - HCL validation has failed because the os vendor and version is not validated with this component \&quot;Incompatible-Component-Model\&quot; - HCL validation has failed because the component model is not validated \&quot;Incompatible-Firmware\&quot; - HCL validation has failed because the firmware version is not validated \&quot;Incompatible-Driver\&quot; - HCL validation has failed because the driver version is not validated \&quot;Incompatible-Firmware-Driver\&quot; - HCL validation has failed because the firmware version and driver version is not validated \&quot;Incompatible-Cimc-Version\&quot; - HCL validation has failed because the CIMC version is not validated with this component \&quot;Missing-Os-Driver-Info\&quot; - HCL validation was not performed because we are missing os driver information form device \&quot;Service-Unavailable\&quot; - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \&quot;Service-Error\&quot; - HCL data service is available but an error occured when making the request or parsing the response. \&quot;Unrecognized-Protocol\&quot; - HCL service does not recognize the given driver protocol for this component. HCL data may need to be updated \&quot;Compatible\&quot; - this component&#39;s inventory data has \&quot;Validated\&quot; status with the HCL  
        /// </summary>
        /// <value>the reason for the status. The reason can be one of \&quot;Incompatible-Server-With-Component\&quot; - HCL validation has failed because the server model is not validated with this component \&quot;Incompatible-Processor\&quot; - HCL validation has failed because the processor is not validated with this component \&quot;Incompatible-Os-Info\&quot; - HCL validation has failed because the os vendor and version is not validated with this component \&quot;Incompatible-Component-Model\&quot; - HCL validation has failed because the component model is not validated \&quot;Incompatible-Firmware\&quot; - HCL validation has failed because the firmware version is not validated \&quot;Incompatible-Driver\&quot; - HCL validation has failed because the driver version is not validated \&quot;Incompatible-Firmware-Driver\&quot; - HCL validation has failed because the firmware version and driver version is not validated \&quot;Incompatible-Cimc-Version\&quot; - HCL validation has failed because the CIMC version is not validated with this component \&quot;Missing-Os-Driver-Info\&quot; - HCL validation was not performed because we are missing os driver information form device \&quot;Service-Unavailable\&quot; - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \&quot;Service-Error\&quot; - HCL data service is available but an error occured when making the request or parsing the response. \&quot;Unrecognized-Protocol\&quot; - HCL service does not recognize the given driver protocol for this component. HCL data may need to be updated \&quot;Compatible\&quot; - this component&#39;s inventory data has \&quot;Validated\&quot; status with the HCL  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            
            /// <summary>
            /// Enum MissingOsDriverInfo for "Missing-Os-Driver-Info"
            /// </summary>
            [EnumMember(Value = "Missing-Os-Driver-Info")]
            MissingOsDriverInfo,
            
            /// <summary>
            /// Enum IncompatibleServerWithComponent for "Incompatible-Server-With-Component"
            /// </summary>
            [EnumMember(Value = "Incompatible-Server-With-Component")]
            IncompatibleServerWithComponent,
            
            /// <summary>
            /// Enum IncompatibleProcessor for "Incompatible-Processor"
            /// </summary>
            [EnumMember(Value = "Incompatible-Processor")]
            IncompatibleProcessor,
            
            /// <summary>
            /// Enum IncompatibleOsInfo for "Incompatible-Os-Info"
            /// </summary>
            [EnumMember(Value = "Incompatible-Os-Info")]
            IncompatibleOsInfo,
            
            /// <summary>
            /// Enum IncompatibleComponentModel for "Incompatible-Component-Model"
            /// </summary>
            [EnumMember(Value = "Incompatible-Component-Model")]
            IncompatibleComponentModel,
            
            /// <summary>
            /// Enum IncompatibleFirmware for "Incompatible-Firmware"
            /// </summary>
            [EnumMember(Value = "Incompatible-Firmware")]
            IncompatibleFirmware,
            
            /// <summary>
            /// Enum IncompatibleDriver for "Incompatible-Driver"
            /// </summary>
            [EnumMember(Value = "Incompatible-Driver")]
            IncompatibleDriver,
            
            /// <summary>
            /// Enum IncompatibleFirmwareDriver for "Incompatible-Firmware-Driver"
            /// </summary>
            [EnumMember(Value = "Incompatible-Firmware-Driver")]
            IncompatibleFirmwareDriver,
            
            /// <summary>
            /// Enum IncompatibleCimcVersion for "Incompatible-Cimc-Version"
            /// </summary>
            [EnumMember(Value = "Incompatible-Cimc-Version")]
            IncompatibleCimcVersion,
            
            /// <summary>
            /// Enum ServiceUnavailable for "Service-Unavailable"
            /// </summary>
            [EnumMember(Value = "Service-Unavailable")]
            ServiceUnavailable,
            
            /// <summary>
            /// Enum ServiceError for "Service-Error"
            /// </summary>
            [EnumMember(Value = "Service-Error")]
            ServiceError,
            
            /// <summary>
            /// Enum UnrecognizedProtocol for "Unrecognized-Protocol"
            /// </summary>
            [EnumMember(Value = "Unrecognized-Protocol")]
            UnrecognizedProtocol,
            
            /// <summary>
            /// Enum Compatible for "Compatible"
            /// </summary>
            [EnumMember(Value = "Compatible")]
            Compatible
        }

        /// <summary>
        /// The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \&quot;Unknown\&quot; - we do not have enough information to evaluate against the HCL data \&quot;Validated\&quot; - we have validated this component against the HCL and it has \&quot;Validated\&quot; status \&quot;Not-Validated\&quot; - we have validated this component against the HCL and it has \&quot;Not-Validated\&quot; status   
        /// </summary>
        /// <value>The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \&quot;Unknown\&quot; - we do not have enough information to evaluate against the HCL data \&quot;Validated\&quot; - we have validated this component against the HCL and it has \&quot;Validated\&quot; status \&quot;Not-Validated\&quot; - we have validated this component against the HCL and it has \&quot;Not-Validated\&quot; status   </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Incomplete for "Incomplete"
            /// </summary>
            [EnumMember(Value = "Incomplete")]
            Incomplete,
            
            /// <summary>
            /// Enum NotFound for "Not-Found"
            /// </summary>
            [EnumMember(Value = "Not-Found")]
            NotFound,
            
            /// <summary>
            /// Enum Validated for "Validated"
            /// </summary>
            [EnumMember(Value = "Validated")]
            Validated
        }

        /// <summary>
        /// the reason for the status. The reason can be one of \&quot;Incompatible-Server-With-Component\&quot; - HCL validation has failed because the server model is not validated with this component \&quot;Incompatible-Processor\&quot; - HCL validation has failed because the processor is not validated with this component \&quot;Incompatible-Os-Info\&quot; - HCL validation has failed because the os vendor and version is not validated with this component \&quot;Incompatible-Component-Model\&quot; - HCL validation has failed because the component model is not validated \&quot;Incompatible-Firmware\&quot; - HCL validation has failed because the firmware version is not validated \&quot;Incompatible-Driver\&quot; - HCL validation has failed because the driver version is not validated \&quot;Incompatible-Firmware-Driver\&quot; - HCL validation has failed because the firmware version and driver version is not validated \&quot;Incompatible-Cimc-Version\&quot; - HCL validation has failed because the CIMC version is not validated with this component \&quot;Missing-Os-Driver-Info\&quot; - HCL validation was not performed because we are missing os driver information form device \&quot;Service-Unavailable\&quot; - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \&quot;Service-Error\&quot; - HCL data service is available but an error occured when making the request or parsing the response. \&quot;Unrecognized-Protocol\&quot; - HCL service does not recognize the given driver protocol for this component. HCL data may need to be updated \&quot;Compatible\&quot; - this component&#39;s inventory data has \&quot;Validated\&quot; status with the HCL  
        /// </summary>
        /// <value>the reason for the status. The reason can be one of \&quot;Incompatible-Server-With-Component\&quot; - HCL validation has failed because the server model is not validated with this component \&quot;Incompatible-Processor\&quot; - HCL validation has failed because the processor is not validated with this component \&quot;Incompatible-Os-Info\&quot; - HCL validation has failed because the os vendor and version is not validated with this component \&quot;Incompatible-Component-Model\&quot; - HCL validation has failed because the component model is not validated \&quot;Incompatible-Firmware\&quot; - HCL validation has failed because the firmware version is not validated \&quot;Incompatible-Driver\&quot; - HCL validation has failed because the driver version is not validated \&quot;Incompatible-Firmware-Driver\&quot; - HCL validation has failed because the firmware version and driver version is not validated \&quot;Incompatible-Cimc-Version\&quot; - HCL validation has failed because the CIMC version is not validated with this component \&quot;Missing-Os-Driver-Info\&quot; - HCL validation was not performed because we are missing os driver information form device \&quot;Service-Unavailable\&quot; - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \&quot;Service-Error\&quot; - HCL data service is available but an error occured when making the request or parsing the response. \&quot;Unrecognized-Protocol\&quot; - HCL service does not recognize the given driver protocol for this component. HCL data may need to be updated \&quot;Compatible\&quot; - this component&#39;s inventory data has \&quot;Validated\&quot; status with the HCL  </value>
        [DataMember(Name="Reason", EmitDefaultValue=false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \&quot;Unknown\&quot; - we do not have enough information to evaluate against the HCL data \&quot;Validated\&quot; - we have validated this component against the HCL and it has \&quot;Validated\&quot; status \&quot;Not-Validated\&quot; - we have validated this component against the HCL and it has \&quot;Not-Validated\&quot; status   
        /// </summary>
        /// <value>The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \&quot;Unknown\&quot; - we do not have enough information to evaluate against the HCL data \&quot;Validated\&quot; - we have validated this component against the HCL and it has \&quot;Validated\&quot; status \&quot;Not-Validated\&quot; - we have validated this component against the HCL and it has \&quot;Not-Validated\&quot; status   </value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CondHclStatusDetail" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="Component">specifies the component associated to this status detail HclStatusDetail (adapter or storage controller) .</param>
        /// <param name="HclCimcVersion">the current CIMC version for the server normalized for querying HCL data  .</param>
        /// <param name="HclDriverName">the current driver name of the component we are validating normalized for querying HCL data  .</param>
        /// <param name="HclDriverVersion">the current driver version of the component we are validating normalized for querying HCL data  .</param>
        /// <param name="HclFirmwareVersion">the current firmware version of the component model normalized for querying HCL data  .</param>
        /// <param name="HclModel">The component model we are trying to validate normalized for querying HCL data  .</param>
        /// <param name="HclStatus">HclStatus.</param>
        /// <param name="InvCimcVersion">the current CIMC version for the server as received from inventory  .</param>
        /// <param name="InvDriverName">the current driver name of the component we are validating as received from inventory  .</param>
        /// <param name="InvDriverVersion">the current driver version of the component we are validating as received from inventory  .</param>
        /// <param name="InvFirmwareVersion">the current firmware version of the component model as received from inventory  .</param>
        /// <param name="InvModel">The component model we are trying to validate as received from inventory  .</param>
        /// <param name="Reason">the reason for the status. The reason can be one of \&quot;Incompatible-Server-With-Component\&quot; - HCL validation has failed because the server model is not validated with this component \&quot;Incompatible-Processor\&quot; - HCL validation has failed because the processor is not validated with this component \&quot;Incompatible-Os-Info\&quot; - HCL validation has failed because the os vendor and version is not validated with this component \&quot;Incompatible-Component-Model\&quot; - HCL validation has failed because the component model is not validated \&quot;Incompatible-Firmware\&quot; - HCL validation has failed because the firmware version is not validated \&quot;Incompatible-Driver\&quot; - HCL validation has failed because the driver version is not validated \&quot;Incompatible-Firmware-Driver\&quot; - HCL validation has failed because the firmware version and driver version is not validated \&quot;Incompatible-Cimc-Version\&quot; - HCL validation has failed because the CIMC version is not validated with this component \&quot;Missing-Os-Driver-Info\&quot; - HCL validation was not performed because we are missing os driver information form device \&quot;Service-Unavailable\&quot; - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \&quot;Service-Error\&quot; - HCL data service is available but an error occured when making the request or parsing the response. \&quot;Unrecognized-Protocol\&quot; - HCL service does not recognize the given driver protocol for this component. HCL data may need to be updated \&quot;Compatible\&quot; - this component&#39;s inventory data has \&quot;Validated\&quot; status with the HCL   (default to ReasonEnum.MissingOsDriverInfo).</param>
        /// <param name="Status">The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \&quot;Unknown\&quot; - we do not have enough information to evaluate against the HCL data \&quot;Validated\&quot; - we have validated this component against the HCL and it has \&quot;Validated\&quot; status \&quot;Not-Validated\&quot; - we have validated this component against the HCL and it has \&quot;Not-Validated\&quot; status    (default to StatusEnum.Incomplete).</param>
        public CondHclStatusDetail(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), InventoryBaseRef Component = default(InventoryBaseRef), string HclCimcVersion = default(string), string HclDriverName = default(string), string HclDriverVersion = default(string), string HclFirmwareVersion = default(string), string HclModel = default(string), CondHclStatusRef HclStatus = default(CondHclStatusRef), string InvCimcVersion = default(string), string InvDriverName = default(string), string InvDriverVersion = default(string), string InvFirmwareVersion = default(string), string InvModel = default(string), ReasonEnum? Reason = ReasonEnum.MissingOsDriverInfo, StatusEnum? Status = StatusEnum.Incomplete)
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.Component = Component;
            this.HclCimcVersion = HclCimcVersion;
            this.HclDriverName = HclDriverName;
            this.HclDriverVersion = HclDriverVersion;
            this.HclFirmwareVersion = HclFirmwareVersion;
            this.HclModel = HclModel;
            this.HclStatus = HclStatus;
            this.InvCimcVersion = InvCimcVersion;
            this.InvDriverName = InvDriverName;
            this.InvDriverVersion = InvDriverVersion;
            this.InvFirmwareVersion = InvFirmwareVersion;
            this.InvModel = InvModel;
            // use default value if no "Reason" provided
            if (Reason == null)
            {
                this.Reason = ReasonEnum.MissingOsDriverInfo;
            }
            else
            {
                this.Reason = Reason;
            }
            // use default value if no "Status" provided
            if (Status == null)
            {
                this.Status = StatusEnum.Incomplete;
            }
            else
            {
                this.Status = Status;
            }
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// specifies the component associated to this status detail HclStatusDetail (adapter or storage controller) 
        /// </summary>
        /// <value>specifies the component associated to this status detail HclStatusDetail (adapter or storage controller) </value>
        [DataMember(Name="Component", EmitDefaultValue=false)]
        public InventoryBaseRef Component { get; set; }

        /// <summary>
        /// the current CIMC version for the server normalized for querying HCL data  
        /// </summary>
        /// <value>the current CIMC version for the server normalized for querying HCL data  </value>
        [DataMember(Name="HclCimcVersion", EmitDefaultValue=false)]
        public string HclCimcVersion { get; set; }

        /// <summary>
        /// the current driver name of the component we are validating normalized for querying HCL data  
        /// </summary>
        /// <value>the current driver name of the component we are validating normalized for querying HCL data  </value>
        [DataMember(Name="HclDriverName", EmitDefaultValue=false)]
        public string HclDriverName { get; set; }

        /// <summary>
        /// the current driver version of the component we are validating normalized for querying HCL data  
        /// </summary>
        /// <value>the current driver version of the component we are validating normalized for querying HCL data  </value>
        [DataMember(Name="HclDriverVersion", EmitDefaultValue=false)]
        public string HclDriverVersion { get; set; }

        /// <summary>
        /// the current firmware version of the component model normalized for querying HCL data  
        /// </summary>
        /// <value>the current firmware version of the component model normalized for querying HCL data  </value>
        [DataMember(Name="HclFirmwareVersion", EmitDefaultValue=false)]
        public string HclFirmwareVersion { get; set; }

        /// <summary>
        /// The component model we are trying to validate normalized for querying HCL data  
        /// </summary>
        /// <value>The component model we are trying to validate normalized for querying HCL data  </value>
        [DataMember(Name="HclModel", EmitDefaultValue=false)]
        public string HclModel { get; set; }

        /// <summary>
        /// Gets or Sets HclStatus
        /// </summary>
        [DataMember(Name="HclStatus", EmitDefaultValue=false)]
        public CondHclStatusRef HclStatus { get; set; }

        /// <summary>
        /// the current CIMC version for the server as received from inventory  
        /// </summary>
        /// <value>the current CIMC version for the server as received from inventory  </value>
        [DataMember(Name="InvCimcVersion", EmitDefaultValue=false)]
        public string InvCimcVersion { get; set; }

        /// <summary>
        /// the current driver name of the component we are validating as received from inventory  
        /// </summary>
        /// <value>the current driver name of the component we are validating as received from inventory  </value>
        [DataMember(Name="InvDriverName", EmitDefaultValue=false)]
        public string InvDriverName { get; set; }

        /// <summary>
        /// the current driver version of the component we are validating as received from inventory  
        /// </summary>
        /// <value>the current driver version of the component we are validating as received from inventory  </value>
        [DataMember(Name="InvDriverVersion", EmitDefaultValue=false)]
        public string InvDriverVersion { get; set; }

        /// <summary>
        /// the current firmware version of the component model as received from inventory  
        /// </summary>
        /// <value>the current firmware version of the component model as received from inventory  </value>
        [DataMember(Name="InvFirmwareVersion", EmitDefaultValue=false)]
        public string InvFirmwareVersion { get; set; }

        /// <summary>
        /// The component model we are trying to validate as received from inventory  
        /// </summary>
        /// <value>The component model we are trying to validate as received from inventory  </value>
        [DataMember(Name="InvModel", EmitDefaultValue=false)]
        public string InvModel { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CondHclStatusDetail {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  HclCimcVersion: ").Append(HclCimcVersion).Append("\n");
            sb.Append("  HclDriverName: ").Append(HclDriverName).Append("\n");
            sb.Append("  HclDriverVersion: ").Append(HclDriverVersion).Append("\n");
            sb.Append("  HclFirmwareVersion: ").Append(HclFirmwareVersion).Append("\n");
            sb.Append("  HclModel: ").Append(HclModel).Append("\n");
            sb.Append("  HclStatus: ").Append(HclStatus).Append("\n");
            sb.Append("  InvCimcVersion: ").Append(InvCimcVersion).Append("\n");
            sb.Append("  InvDriverName: ").Append(InvDriverName).Append("\n");
            sb.Append("  InvDriverVersion: ").Append(InvDriverVersion).Append("\n");
            sb.Append("  InvFirmwareVersion: ").Append(InvFirmwareVersion).Append("\n");
            sb.Append("  InvModel: ").Append(InvModel).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CondHclStatusDetail);
        }

        /// <summary>
        /// Returns true if CondHclStatusDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of CondHclStatusDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CondHclStatusDetail other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.Component == other.Component ||
                    this.Component != null &&
                    this.Component.Equals(other.Component)
                ) && 
                (
                    this.HclCimcVersion == other.HclCimcVersion ||
                    this.HclCimcVersion != null &&
                    this.HclCimcVersion.Equals(other.HclCimcVersion)
                ) && 
                (
                    this.HclDriverName == other.HclDriverName ||
                    this.HclDriverName != null &&
                    this.HclDriverName.Equals(other.HclDriverName)
                ) && 
                (
                    this.HclDriverVersion == other.HclDriverVersion ||
                    this.HclDriverVersion != null &&
                    this.HclDriverVersion.Equals(other.HclDriverVersion)
                ) && 
                (
                    this.HclFirmwareVersion == other.HclFirmwareVersion ||
                    this.HclFirmwareVersion != null &&
                    this.HclFirmwareVersion.Equals(other.HclFirmwareVersion)
                ) && 
                (
                    this.HclModel == other.HclModel ||
                    this.HclModel != null &&
                    this.HclModel.Equals(other.HclModel)
                ) && 
                (
                    this.HclStatus == other.HclStatus ||
                    this.HclStatus != null &&
                    this.HclStatus.Equals(other.HclStatus)
                ) && 
                (
                    this.InvCimcVersion == other.InvCimcVersion ||
                    this.InvCimcVersion != null &&
                    this.InvCimcVersion.Equals(other.InvCimcVersion)
                ) && 
                (
                    this.InvDriverName == other.InvDriverName ||
                    this.InvDriverName != null &&
                    this.InvDriverName.Equals(other.InvDriverName)
                ) && 
                (
                    this.InvDriverVersion == other.InvDriverVersion ||
                    this.InvDriverVersion != null &&
                    this.InvDriverVersion.Equals(other.InvDriverVersion)
                ) && 
                (
                    this.InvFirmwareVersion == other.InvFirmwareVersion ||
                    this.InvFirmwareVersion != null &&
                    this.InvFirmwareVersion.Equals(other.InvFirmwareVersion)
                ) && 
                (
                    this.InvModel == other.InvModel ||
                    this.InvModel != null &&
                    this.InvModel.Equals(other.InvModel)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.Component != null)
                    hash = hash * 59 + this.Component.GetHashCode();
                if (this.HclCimcVersion != null)
                    hash = hash * 59 + this.HclCimcVersion.GetHashCode();
                if (this.HclDriverName != null)
                    hash = hash * 59 + this.HclDriverName.GetHashCode();
                if (this.HclDriverVersion != null)
                    hash = hash * 59 + this.HclDriverVersion.GetHashCode();
                if (this.HclFirmwareVersion != null)
                    hash = hash * 59 + this.HclFirmwareVersion.GetHashCode();
                if (this.HclModel != null)
                    hash = hash * 59 + this.HclModel.GetHashCode();
                if (this.HclStatus != null)
                    hash = hash * 59 + this.HclStatus.GetHashCode();
                if (this.InvCimcVersion != null)
                    hash = hash * 59 + this.InvCimcVersion.GetHashCode();
                if (this.InvDriverName != null)
                    hash = hash * 59 + this.InvDriverName.GetHashCode();
                if (this.InvDriverVersion != null)
                    hash = hash * 59 + this.InvDriverVersion.GetHashCode();
                if (this.InvFirmwareVersion != null)
                    hash = hash * 59 + this.InvFirmwareVersion.GetHashCode();
                if (this.InvModel != null)
                    hash = hash * 59 + this.InvModel.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
