/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// UCS Director accounts managed by Intersight 
    /// </summary>
    [DataContract]
    public partial class IaasUcsdInfo :  IEquatable<IaasUcsdInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IaasUcsdInfo" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="ConnectorPack">ConnectorPack.</param>
        /// <param name="DeviceStatus">DeviceStatus.</param>
        /// <param name="LicenseInfo">LicenseInfo.</param>
        /// <param name="MostRunTasks">MostRunTasks.</param>
        /// <param name="RegisteredDevice">RegisteredDevice.</param>
        /// <param name="UcsdManagedInfra">UcsdManagedInfra.</param>
        public IaasUcsdInfo(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), List<IaasConnectorPackRef> ConnectorPack = default(List<IaasConnectorPackRef>), List<IaasDeviceStatusRef> DeviceStatus = default(List<IaasDeviceStatusRef>), IaasLicenseInfoRef LicenseInfo = default(IaasLicenseInfoRef), List<IaasMostRunTasksRef> MostRunTasks = default(List<IaasMostRunTasksRef>), AssetDeviceRegistrationRef RegisteredDevice = default(AssetDeviceRegistrationRef), IaasUcsdManagedInfraRef UcsdManagedInfra = default(IaasUcsdManagedInfraRef))
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.ConnectorPack = ConnectorPack;
            this.DeviceStatus = DeviceStatus;
            this.LicenseInfo = LicenseInfo;
            this.MostRunTasks = MostRunTasks;
            this.RegisteredDevice = RegisteredDevice;
            this.UcsdManagedInfra = UcsdManagedInfra;
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorPack
        /// </summary>
        [DataMember(Name="ConnectorPack", EmitDefaultValue=false)]
        public List<IaasConnectorPackRef> ConnectorPack { get; set; }

        /// <summary>
        /// Moid of the UCSD device connector&#39;s asset.DeviceRegistration  
        /// </summary>
        /// <value>Moid of the UCSD device connector&#39;s asset.DeviceRegistration  </value>
        [DataMember(Name="DeviceId", EmitDefaultValue=false)]
        public string DeviceId { get; private set; }

        /// <summary>
        /// Gets or Sets DeviceStatus
        /// </summary>
        [DataMember(Name="DeviceStatus", EmitDefaultValue=false)]
        public List<IaasDeviceStatusRef> DeviceStatus { get; set; }

        /// <summary>
        /// Unique ID of UCSD getting registerd with Intersight  
        /// </summary>
        /// <value>Unique ID of UCSD getting registerd with Intersight  </value>
        [DataMember(Name="Guid", EmitDefaultValue=false)]
        public string Guid { get; private set; }

        /// <summary>
        /// The UCSD host name  
        /// </summary>
        /// <value>The UCSD host name  </value>
        [DataMember(Name="HostName", EmitDefaultValue=false)]
        public string HostName { get; private set; }

        /// <summary>
        /// The UCSD IP address  
        /// </summary>
        /// <value>The UCSD IP address  </value>
        [DataMember(Name="Ip", EmitDefaultValue=false)]
        public string Ip { get; private set; }

        /// <summary>
        /// Gets or Sets LicenseInfo
        /// </summary>
        [DataMember(Name="LicenseInfo", EmitDefaultValue=false)]
        public IaasLicenseInfoRef LicenseInfo { get; set; }

        /// <summary>
        /// Gets or Sets MostRunTasks
        /// </summary>
        [DataMember(Name="MostRunTasks", EmitDefaultValue=false)]
        public List<IaasMostRunTasksRef> MostRunTasks { get; set; }

        /// <summary>
        /// nodeType specifies if UCSD is deployed in Stand-alone or Multi Node  
        /// </summary>
        /// <value>nodeType specifies if UCSD is deployed in Stand-alone or Multi Node  </value>
        [DataMember(Name="NodeType", EmitDefaultValue=false)]
        public string NodeType { get; private set; }

        /// <summary>
        /// The UCSD product name  
        /// </summary>
        /// <value>The UCSD product name  </value>
        [DataMember(Name="ProductName", EmitDefaultValue=false)]
        public string ProductName { get; private set; }

        /// <summary>
        /// The UCSD product vendor  
        /// </summary>
        /// <value>The UCSD product vendor  </value>
        [DataMember(Name="ProductVendor", EmitDefaultValue=false)]
        public string ProductVendor { get; private set; }

        /// <summary>
        /// The UCSD product/platform version  
        /// </summary>
        /// <value>The UCSD product/platform version  </value>
        [DataMember(Name="ProductVersion", EmitDefaultValue=false)]
        public string ProductVersion { get; private set; }

        /// <summary>
        /// Gets or Sets RegisteredDevice
        /// </summary>
        [DataMember(Name="RegisteredDevice", EmitDefaultValue=false)]
        public AssetDeviceRegistrationRef RegisteredDevice { get; set; }

        /// <summary>
        /// The UCSD status. Possible values are Active,In-Active,Unknown   
        /// </summary>
        /// <value>The UCSD status. Possible values are Active,In-Active,Unknown   </value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or Sets UcsdManagedInfra
        /// </summary>
        [DataMember(Name="UcsdManagedInfra", EmitDefaultValue=false)]
        public IaasUcsdManagedInfraRef UcsdManagedInfra { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IaasUcsdInfo {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  ConnectorPack: ").Append(ConnectorPack).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  DeviceStatus: ").Append(DeviceStatus).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  LicenseInfo: ").Append(LicenseInfo).Append("\n");
            sb.Append("  MostRunTasks: ").Append(MostRunTasks).Append("\n");
            sb.Append("  NodeType: ").Append(NodeType).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductVendor: ").Append(ProductVendor).Append("\n");
            sb.Append("  ProductVersion: ").Append(ProductVersion).Append("\n");
            sb.Append("  RegisteredDevice: ").Append(RegisteredDevice).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UcsdManagedInfra: ").Append(UcsdManagedInfra).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IaasUcsdInfo);
        }

        /// <summary>
        /// Returns true if IaasUcsdInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of IaasUcsdInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IaasUcsdInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.ConnectorPack == other.ConnectorPack ||
                    this.ConnectorPack != null &&
                    this.ConnectorPack.SequenceEqual(other.ConnectorPack)
                ) && 
                (
                    this.DeviceId == other.DeviceId ||
                    this.DeviceId != null &&
                    this.DeviceId.Equals(other.DeviceId)
                ) && 
                (
                    this.DeviceStatus == other.DeviceStatus ||
                    this.DeviceStatus != null &&
                    this.DeviceStatus.SequenceEqual(other.DeviceStatus)
                ) && 
                (
                    this.Guid == other.Guid ||
                    this.Guid != null &&
                    this.Guid.Equals(other.Guid)
                ) && 
                (
                    this.HostName == other.HostName ||
                    this.HostName != null &&
                    this.HostName.Equals(other.HostName)
                ) && 
                (
                    this.Ip == other.Ip ||
                    this.Ip != null &&
                    this.Ip.Equals(other.Ip)
                ) && 
                (
                    this.LicenseInfo == other.LicenseInfo ||
                    this.LicenseInfo != null &&
                    this.LicenseInfo.Equals(other.LicenseInfo)
                ) && 
                (
                    this.MostRunTasks == other.MostRunTasks ||
                    this.MostRunTasks != null &&
                    this.MostRunTasks.SequenceEqual(other.MostRunTasks)
                ) && 
                (
                    this.NodeType == other.NodeType ||
                    this.NodeType != null &&
                    this.NodeType.Equals(other.NodeType)
                ) && 
                (
                    this.ProductName == other.ProductName ||
                    this.ProductName != null &&
                    this.ProductName.Equals(other.ProductName)
                ) && 
                (
                    this.ProductVendor == other.ProductVendor ||
                    this.ProductVendor != null &&
                    this.ProductVendor.Equals(other.ProductVendor)
                ) && 
                (
                    this.ProductVersion == other.ProductVersion ||
                    this.ProductVersion != null &&
                    this.ProductVersion.Equals(other.ProductVersion)
                ) && 
                (
                    this.RegisteredDevice == other.RegisteredDevice ||
                    this.RegisteredDevice != null &&
                    this.RegisteredDevice.Equals(other.RegisteredDevice)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.UcsdManagedInfra == other.UcsdManagedInfra ||
                    this.UcsdManagedInfra != null &&
                    this.UcsdManagedInfra.Equals(other.UcsdManagedInfra)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.ConnectorPack != null)
                    hash = hash * 59 + this.ConnectorPack.GetHashCode();
                if (this.DeviceId != null)
                    hash = hash * 59 + this.DeviceId.GetHashCode();
                if (this.DeviceStatus != null)
                    hash = hash * 59 + this.DeviceStatus.GetHashCode();
                if (this.Guid != null)
                    hash = hash * 59 + this.Guid.GetHashCode();
                if (this.HostName != null)
                    hash = hash * 59 + this.HostName.GetHashCode();
                if (this.Ip != null)
                    hash = hash * 59 + this.Ip.GetHashCode();
                if (this.LicenseInfo != null)
                    hash = hash * 59 + this.LicenseInfo.GetHashCode();
                if (this.MostRunTasks != null)
                    hash = hash * 59 + this.MostRunTasks.GetHashCode();
                if (this.NodeType != null)
                    hash = hash * 59 + this.NodeType.GetHashCode();
                if (this.ProductName != null)
                    hash = hash * 59 + this.ProductName.GetHashCode();
                if (this.ProductVendor != null)
                    hash = hash * 59 + this.ProductVendor.GetHashCode();
                if (this.ProductVersion != null)
                    hash = hash * 59 + this.ProductVersion.GetHashCode();
                if (this.RegisteredDevice != null)
                    hash = hash * 59 + this.RegisteredDevice.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.UcsdManagedInfra != null)
                    hash = hash * 59 + this.UcsdManagedInfra.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
