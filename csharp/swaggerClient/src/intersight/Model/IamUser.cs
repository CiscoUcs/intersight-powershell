/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// This object represents the user of an Intersight account. 
    /// </summary>
    [DataContract]
    public partial class IamUser :  IEquatable<IamUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IamUser" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="ApiKeys">Current API keys of the user. API keys are used to programatically perform API calls. .</param>
        /// <param name="Email">Email of the user. Users are added to Intersight using the email configured in the IdP.  .</param>
        /// <param name="Idp">Idp.</param>
        /// <param name="Idpreference">Idpreference.</param>
        /// <param name="Permissions">Permissions assigned to the user. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy. .</param>
        /// <param name="Sessions">Current web sessions of the user. After a user logs into Intersight, a session object is created. This session object is deleted upon logout, idle timeout, expiry timeout, or manual deletion. .</param>
        public IamUser(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), List<IamApiKeyRef> ApiKeys = default(List<IamApiKeyRef>), string Email = default(string), IamIdpRef Idp = default(IamIdpRef), IamIdpReferenceRef Idpreference = default(IamIdpReferenceRef), List<IamPermissionRef> Permissions = default(List<IamPermissionRef>), List<IamSessionRef> Sessions = default(List<IamSessionRef>))
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.ApiKeys = ApiKeys;
            this.Email = Email;
            this.Idp = Idp;
            this.Idpreference = Idpreference;
            this.Permissions = Permissions;
            this.Sessions = Sessions;
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// Current API keys of the user. API keys are used to programatically perform API calls. 
        /// </summary>
        /// <value>Current API keys of the user. API keys are used to programatically perform API calls. </value>
        [DataMember(Name="ApiKeys", EmitDefaultValue=false)]
        public List<IamApiKeyRef> ApiKeys { get; set; }

        /// <summary>
        /// Specifies the IP address from which the user logged in the last time.  
        /// </summary>
        /// <value>Specifies the IP address from which the user logged in the last time.  </value>
        [DataMember(Name="ClientIpAddress", EmitDefaultValue=false)]
        public string ClientIpAddress { get; private set; }

        /// <summary>
        /// Email of the user. Users are added to Intersight using the email configured in the IdP.  
        /// </summary>
        /// <value>Email of the user. Users are added to Intersight using the email configured in the IdP.  </value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// First name of the user. This field is populated from the IdP attributes received after authentication.  
        /// </summary>
        /// <value>First name of the user. This field is populated from the IdP attributes received after authentication.  </value>
        [DataMember(Name="FirstName", EmitDefaultValue=false)]
        public string FirstName { get; private set; }

        /// <summary>
        /// Gets or Sets Idp
        /// </summary>
        [DataMember(Name="Idp", EmitDefaultValue=false)]
        public IamIdpRef Idp { get; set; }

        /// <summary>
        /// Gets or Sets Idpreference
        /// </summary>
        [DataMember(Name="Idpreference", EmitDefaultValue=false)]
        public IamIdpReferenceRef Idpreference { get; set; }

        /// <summary>
        /// Specifies the last login time for user.  
        /// </summary>
        /// <value>Specifies the last login time for user.  </value>
        [DataMember(Name="LastLoginTime", EmitDefaultValue=false)]
        public DateTime? LastLoginTime { get; private set; }

        /// <summary>
        /// Last name of the user. This field is populated from the IdP attributes received after authentication.  
        /// </summary>
        /// <value>Last name of the user. This field is populated from the IdP attributes received after authentication.  </value>
        [DataMember(Name="LastName", EmitDefaultValue=false)]
        public string LastName { get; private set; }

        /// <summary>
        /// UserID as configured in the IdP.  
        /// </summary>
        /// <value>UserID as configured in the IdP.  </value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Permissions assigned to the user. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy. 
        /// </summary>
        /// <value>Permissions assigned to the user. Permission provides a way to assign roles to a user or user group to perform operations on object hierarchy. </value>
        [DataMember(Name="Permissions", EmitDefaultValue=false)]
        public List<IamPermissionRef> Permissions { get; set; }

        /// <summary>
        /// Current web sessions of the user. After a user logs into Intersight, a session object is created. This session object is deleted upon logout, idle timeout, expiry timeout, or manual deletion. 
        /// </summary>
        /// <value>Current web sessions of the user. After a user logs into Intersight, a session object is created. This session object is deleted upon logout, idle timeout, expiry timeout, or manual deletion. </value>
        [DataMember(Name="Sessions", EmitDefaultValue=false)]
        public List<IamSessionRef> Sessions { get; set; }

        /// <summary>
        /// Specifies if the user is added manually by specifying email, or has logged in using groups, based on IdP attributes received during authentication. If added manually, the user type will be static, otherwise dynamic.   
        /// </summary>
        /// <value>Specifies if the user is added manually by specifying email, or has logged in using groups, based on IdP attributes received during authentication. If added manually, the user type will be static, otherwise dynamic.   </value>
        [DataMember(Name="UserType", EmitDefaultValue=false)]
        public string UserType { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IamUser {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  ApiKeys: ").Append(ApiKeys).Append("\n");
            sb.Append("  ClientIpAddress: ").Append(ClientIpAddress).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Idp: ").Append(Idp).Append("\n");
            sb.Append("  Idpreference: ").Append(Idpreference).Append("\n");
            sb.Append("  LastLoginTime: ").Append(LastLoginTime).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Sessions: ").Append(Sessions).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IamUser);
        }

        /// <summary>
        /// Returns true if IamUser instances are equal
        /// </summary>
        /// <param name="other">Instance of IamUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IamUser other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.ApiKeys == other.ApiKeys ||
                    this.ApiKeys != null &&
                    this.ApiKeys.SequenceEqual(other.ApiKeys)
                ) && 
                (
                    this.ClientIpAddress == other.ClientIpAddress ||
                    this.ClientIpAddress != null &&
                    this.ClientIpAddress.Equals(other.ClientIpAddress)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.Idp == other.Idp ||
                    this.Idp != null &&
                    this.Idp.Equals(other.Idp)
                ) && 
                (
                    this.Idpreference == other.Idpreference ||
                    this.Idpreference != null &&
                    this.Idpreference.Equals(other.Idpreference)
                ) && 
                (
                    this.LastLoginTime == other.LastLoginTime ||
                    this.LastLoginTime != null &&
                    this.LastLoginTime.Equals(other.LastLoginTime)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Permissions == other.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(other.Permissions)
                ) && 
                (
                    this.Sessions == other.Sessions ||
                    this.Sessions != null &&
                    this.Sessions.SequenceEqual(other.Sessions)
                ) && 
                (
                    this.UserType == other.UserType ||
                    this.UserType != null &&
                    this.UserType.Equals(other.UserType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.ApiKeys != null)
                    hash = hash * 59 + this.ApiKeys.GetHashCode();
                if (this.ClientIpAddress != null)
                    hash = hash * 59 + this.ClientIpAddress.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.Idp != null)
                    hash = hash * 59 + this.Idp.GetHashCode();
                if (this.Idpreference != null)
                    hash = hash * 59 + this.Idpreference.GetHashCode();
                if (this.LastLoginTime != null)
                    hash = hash * 59 + this.LastLoginTime.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Permissions != null)
                    hash = hash * 59 + this.Permissions.GetHashCode();
                if (this.Sessions != null)
                    hash = hash * 59 + this.Sessions.GetHashCode();
                if (this.UserType != null)
                    hash = hash * 59 + this.UserType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
