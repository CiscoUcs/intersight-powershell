/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// Type derived from AbstractTriggerDetails describe specific actions which devops users can perform within a micro service. The actions are often remediations for bugs. For example, processing of a notification may fail because of a defect. Once the bug is fixed, it may be necessary to reprocess the notification to recover any missed state changes. The subtype NotificationTrigger implements such a capability. Introduce a new capability by - Defining a new subtype extending from AbstractTriggerDetails. - Implement the Triggerable interface defined in barcelona/mos/devops/TriggerBi.go. 
    /// </summary>
    [DataContract]
    public partial class DevopsAbstractTriggerDetails :  IEquatable<DevopsAbstractTriggerDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DevopsAbstractTriggerDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public DevopsAbstractTriggerDetails()
        {
        }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DevopsAbstractTriggerDetails {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DevopsAbstractTriggerDetails);
        }

        /// <summary>
        /// Returns true if DevopsAbstractTriggerDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of DevopsAbstractTriggerDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DevopsAbstractTriggerDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
