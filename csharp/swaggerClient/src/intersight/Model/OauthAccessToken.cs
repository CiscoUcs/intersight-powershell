/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// OauthAccessToken
    /// </summary>
    [DataContract]
    public partial class OauthAccessToken :  IEquatable<OauthAccessToken>, IValidatableObject
    {
        /// <summary>
        /// Oauth api type  
        /// </summary>
        /// <value>Oauth api type  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApiTypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum License for "License"
            /// </summary>
            [EnumMember(Value = "License")]
            License
        }

        /// <summary>
        /// Access token status  
        /// </summary>
        /// <value>Access token status  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Inactive for "Inactive"
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive,
            
            /// <summary>
            /// Enum Active for "Active"
            /// </summary>
            [EnumMember(Value = "Active")]
            Active,
            
            /// <summary>
            /// Enum Expired for "Expired"
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired
        }

        /// <summary>
        /// Oauth api type  
        /// </summary>
        /// <value>Oauth api type  </value>
        [DataMember(Name="ApiType", EmitDefaultValue=false)]
        public ApiTypeEnum? ApiType { get; set; }
        /// <summary>
        /// Access token status  
        /// </summary>
        /// <value>Access token status  </value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OauthAccessToken" /> class.
        /// </summary>
        /// <param name="ApiType">Oauth api type   (default to ApiTypeEnum.Unknown).</param>
        /// <param name="Status">Access token status   (default to StatusEnum.Inactive).</param>
        public OauthAccessToken(ApiTypeEnum? ApiType = ApiTypeEnum.Unknown, StatusEnum? Status = StatusEnum.Inactive)
        {
            // use default value if no "ApiType" provided
            if (ApiType == null)
            {
                this.ApiType = ApiTypeEnum.Unknown;
            }
            else
            {
                this.ApiType = ApiType;
            }
            // use default value if no "Status" provided
            if (Status == null)
            {
                this.Status = StatusEnum.Inactive;
            }
            else
            {
                this.Status = Status;
            }
        }
        

        /// <summary>
        /// Access token expiry time  
        /// </summary>
        /// <value>Access token expiry time  </value>
        [DataMember(Name="ExpiryTime", EmitDefaultValue=false)]
        public DateTime? ExpiryTime { get; private set; }


        /// <summary>
        /// Access token   
        /// </summary>
        /// <value>Access token   </value>
        [DataMember(Name="Token", EmitDefaultValue=false)]
        public string Token { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OauthAccessToken {\n");
            sb.Append("  ApiType: ").Append(ApiType).Append("\n");
            sb.Append("  ExpiryTime: ").Append(ExpiryTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OauthAccessToken);
        }

        /// <summary>
        /// Returns true if OauthAccessToken instances are equal
        /// </summary>
        /// <param name="other">Instance of OauthAccessToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OauthAccessToken other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApiType == other.ApiType ||
                    this.ApiType != null &&
                    this.ApiType.Equals(other.ApiType)
                ) && 
                (
                    this.ExpiryTime == other.ExpiryTime ||
                    this.ExpiryTime != null &&
                    this.ExpiryTime.Equals(other.ExpiryTime)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApiType != null)
                    hash = hash * 59 + this.ApiType.GetHashCode();
                if (this.ExpiryTime != null)
                    hash = hash * 59 + this.ExpiryTime.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
