/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// ServerProfile
    /// </summary>
    [DataContract]
    public partial class ServerProfile :  IEquatable<ServerProfile>, IValidatableObject
    {
        /// <summary>
        /// Defines the type of the profile. Accepted value is instance.   
        /// </summary>
        /// <value>Defines the type of the profile. Accepted value is instance.   </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Instance for "instance"
            /// </summary>
            [EnumMember(Value = "instance")]
            Instance
        }

        /// <summary>
        /// Defines the type of the profile. Accepted value is instance.   
        /// </summary>
        /// <value>Defines the type of the profile. Accepted value is instance.   </value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerProfile" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="Description">Description of the profile.  .</param>
        /// <param name="Name">Name of the profile.  .</param>
        /// <param name="SrcTemplate">SrcTemplate.</param>
        /// <param name="Type">Defines the type of the profile. Accepted value is instance.    (default to TypeEnum.Instance).</param>
        /// <param name="Action">User initiated action. Each profile type has its own supported actions. For hyperflex cluster profile, the supported actions are - - Validate, Deploy, Continue, Retry, Abort, Unassign For server profile, the support actions are - - Deploy, Unassign  .</param>
        /// <param name="ConfigContext">ConfigContext.</param>
        /// <param name="AssignedServer">The assigned physical server to the profile. A physical server can be assigned to more than one server profiles as long as it is only associated with one .</param>
        /// <param name="AssociatedServer">The associated physical server to the profile. A physical server can only be associated to one server profiles .</param>
        /// <param name="ConfigChangeDetails">Represents the configuration change details .</param>
        /// <param name="ConfigChanges">Represents the pending configuration changes at the summary level. Detail changes save in configChangeDetails as a separate object   .</param>
        /// <param name="ConfigResult">Represents the configuration (including deploy, undeploy, compliance-check) results. The errors usually are detected and reported during the apply/deploy phases .</param>
        /// <param name="Organization">Organization .</param>
        /// <param name="RunningWorkflows">The WorkflowInfo&#39;s on fusion that are running for this server Profile. .</param>
        public ServerProfile(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), string Description = default(string), string Name = default(string), PolicyAbstractProfileRef SrcTemplate = default(PolicyAbstractProfileRef), TypeEnum? Type = TypeEnum.Instance, string Action = default(string), PolicyConfigContext ConfigContext = default(PolicyConfigContext), ComputeRackUnitRef AssignedServer = default(ComputeRackUnitRef), ComputeRackUnitRef AssociatedServer = default(ComputeRackUnitRef), List<ServerConfigChangeDetailRef> ConfigChangeDetails = default(List<ServerConfigChangeDetailRef>), PolicyConfigChange ConfigChanges = default(PolicyConfigChange), ServerConfigResultRef ConfigResult = default(ServerConfigResultRef), IamAccountRef Organization = default(IamAccountRef), List<WorkflowWorkflowInfoRef> RunningWorkflows = default(List<WorkflowWorkflowInfoRef>))
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.Description = Description;
            this.Name = Name;
            this.SrcTemplate = SrcTemplate;
            // use default value if no "Type" provided
            if (Type == null)
            {
                this.Type = TypeEnum.Instance;
            }
            else
            {
                this.Type = Type;
            }
            this.Action = Action;
            this.ConfigContext = ConfigContext;
            this.AssignedServer = AssignedServer;
            this.AssociatedServer = AssociatedServer;
            this.ConfigChangeDetails = ConfigChangeDetails;
            this.ConfigChanges = ConfigChanges;
            this.ConfigResult = ConfigResult;
            this.Organization = Organization;
            this.RunningWorkflows = RunningWorkflows;
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// Description of the profile.  
        /// </summary>
        /// <value>Description of the profile.  </value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Name of the profile.  
        /// </summary>
        /// <value>Name of the profile.  </value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SrcTemplate
        /// </summary>
        [DataMember(Name="SrcTemplate", EmitDefaultValue=false)]
        public PolicyAbstractProfileRef SrcTemplate { get; set; }


        /// <summary>
        /// User initiated action. Each profile type has its own supported actions. For hyperflex cluster profile, the supported actions are - - Validate, Deploy, Continue, Retry, Abort, Unassign For server profile, the support actions are - - Deploy, Unassign  
        /// </summary>
        /// <value>User initiated action. Each profile type has its own supported actions. For hyperflex cluster profile, the supported actions are - - Validate, Deploy, Continue, Retry, Abort, Unassign For server profile, the support actions are - - Deploy, Unassign  </value>
        [DataMember(Name="Action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets ConfigContext
        /// </summary>
        [DataMember(Name="ConfigContext", EmitDefaultValue=false)]
        public PolicyConfigContext ConfigContext { get; set; }

        /// <summary>
        /// The assigned physical server to the profile. A physical server can be assigned to more than one server profiles as long as it is only associated with one 
        /// </summary>
        /// <value>The assigned physical server to the profile. A physical server can be assigned to more than one server profiles as long as it is only associated with one </value>
        [DataMember(Name="AssignedServer", EmitDefaultValue=false)]
        public ComputeRackUnitRef AssignedServer { get; set; }

        /// <summary>
        /// The associated physical server to the profile. A physical server can only be associated to one server profiles 
        /// </summary>
        /// <value>The associated physical server to the profile. A physical server can only be associated to one server profiles </value>
        [DataMember(Name="AssociatedServer", EmitDefaultValue=false)]
        public ComputeRackUnitRef AssociatedServer { get; set; }

        /// <summary>
        /// Represents the configuration change details 
        /// </summary>
        /// <value>Represents the configuration change details </value>
        [DataMember(Name="ConfigChangeDetails", EmitDefaultValue=false)]
        public List<ServerConfigChangeDetailRef> ConfigChangeDetails { get; set; }

        /// <summary>
        /// Represents the pending configuration changes at the summary level. Detail changes save in configChangeDetails as a separate object   
        /// </summary>
        /// <value>Represents the pending configuration changes at the summary level. Detail changes save in configChangeDetails as a separate object   </value>
        [DataMember(Name="ConfigChanges", EmitDefaultValue=false)]
        public PolicyConfigChange ConfigChanges { get; set; }

        /// <summary>
        /// Represents the configuration (including deploy, undeploy, compliance-check) results. The errors usually are detected and reported during the apply/deploy phases 
        /// </summary>
        /// <value>Represents the configuration (including deploy, undeploy, compliance-check) results. The errors usually are detected and reported during the apply/deploy phases </value>
        [DataMember(Name="ConfigResult", EmitDefaultValue=false)]
        public ServerConfigResultRef ConfigResult { get; set; }

        /// <summary>
        /// Organization 
        /// </summary>
        /// <value>Organization </value>
        [DataMember(Name="Organization", EmitDefaultValue=false)]
        public IamAccountRef Organization { get; set; }

        /// <summary>
        /// The WorkflowInfo&#39;s on fusion that are running for this server Profile. 
        /// </summary>
        /// <value>The WorkflowInfo&#39;s on fusion that are running for this server Profile. </value>
        [DataMember(Name="RunningWorkflows", EmitDefaultValue=false)]
        public List<WorkflowWorkflowInfoRef> RunningWorkflows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerProfile {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SrcTemplate: ").Append(SrcTemplate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ConfigContext: ").Append(ConfigContext).Append("\n");
            sb.Append("  AssignedServer: ").Append(AssignedServer).Append("\n");
            sb.Append("  AssociatedServer: ").Append(AssociatedServer).Append("\n");
            sb.Append("  ConfigChangeDetails: ").Append(ConfigChangeDetails).Append("\n");
            sb.Append("  ConfigChanges: ").Append(ConfigChanges).Append("\n");
            sb.Append("  ConfigResult: ").Append(ConfigResult).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  RunningWorkflows: ").Append(RunningWorkflows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ServerProfile);
        }

        /// <summary>
        /// Returns true if ServerProfile instances are equal
        /// </summary>
        /// <param name="other">Instance of ServerProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerProfile other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.SrcTemplate == other.SrcTemplate ||
                    this.SrcTemplate != null &&
                    this.SrcTemplate.Equals(other.SrcTemplate)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.ConfigContext == other.ConfigContext ||
                    this.ConfigContext != null &&
                    this.ConfigContext.Equals(other.ConfigContext)
                ) && 
                (
                    this.AssignedServer == other.AssignedServer ||
                    this.AssignedServer != null &&
                    this.AssignedServer.Equals(other.AssignedServer)
                ) && 
                (
                    this.AssociatedServer == other.AssociatedServer ||
                    this.AssociatedServer != null &&
                    this.AssociatedServer.Equals(other.AssociatedServer)
                ) && 
                (
                    this.ConfigChangeDetails == other.ConfigChangeDetails ||
                    this.ConfigChangeDetails != null &&
                    this.ConfigChangeDetails.SequenceEqual(other.ConfigChangeDetails)
                ) && 
                (
                    this.ConfigChanges == other.ConfigChanges ||
                    this.ConfigChanges != null &&
                    this.ConfigChanges.Equals(other.ConfigChanges)
                ) && 
                (
                    this.ConfigResult == other.ConfigResult ||
                    this.ConfigResult != null &&
                    this.ConfigResult.Equals(other.ConfigResult)
                ) && 
                (
                    this.Organization == other.Organization ||
                    this.Organization != null &&
                    this.Organization.Equals(other.Organization)
                ) && 
                (
                    this.RunningWorkflows == other.RunningWorkflows ||
                    this.RunningWorkflows != null &&
                    this.RunningWorkflows.SequenceEqual(other.RunningWorkflows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.SrcTemplate != null)
                    hash = hash * 59 + this.SrcTemplate.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.ConfigContext != null)
                    hash = hash * 59 + this.ConfigContext.GetHashCode();
                if (this.AssignedServer != null)
                    hash = hash * 59 + this.AssignedServer.GetHashCode();
                if (this.AssociatedServer != null)
                    hash = hash * 59 + this.AssociatedServer.GetHashCode();
                if (this.ConfigChangeDetails != null)
                    hash = hash * 59 + this.ConfigChangeDetails.GetHashCode();
                if (this.ConfigChanges != null)
                    hash = hash * 59 + this.ConfigChanges.GetHashCode();
                if (this.ConfigResult != null)
                    hash = hash * 59 + this.ConfigResult.GetHashCode();
                if (this.Organization != null)
                    hash = hash * 59 + this.Organization.GetHashCode();
                if (this.RunningWorkflows != null)
                    hash = hash * 59 + this.RunningWorkflows.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
