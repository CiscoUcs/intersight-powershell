/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 0.1.0-559
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// Represents the pending configuration changes at the summary level. 
    /// </summary>
    [DataContract]
    public partial class ServerConfigChange :  IEquatable<ServerConfigChange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerConfigChange" /> class.
        /// </summary>
        /// <param name="ConfigChangeTypes">High level configuration change types. UCSM side&#39;s changes include - -  .</param>
        /// <param name="DiscruptionTypes">DiscruptionTypes.</param>
        public ServerConfigChange(List<string> ConfigChangeTypes = default(List<string>), List<string> DiscruptionTypes = default(List<string>))
        {
            this.ConfigChangeTypes = ConfigChangeTypes;
            this.DiscruptionTypes = DiscruptionTypes;
        }
        
        /// <summary>
        /// High level configuration change types. UCSM side&#39;s changes include - -  
        /// </summary>
        /// <value>High level configuration change types. UCSM side&#39;s changes include - -  </value>
        [DataMember(Name="ConfigChangeTypes", EmitDefaultValue=false)]
        public List<string> ConfigChangeTypes { get; set; }

        /// <summary>
        /// Gets or Sets DiscruptionTypes
        /// </summary>
        [DataMember(Name="DiscruptionTypes", EmitDefaultValue=false)]
        public List<string> DiscruptionTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerConfigChange {\n");
            sb.Append("  ConfigChangeTypes: ").Append(ConfigChangeTypes).Append("\n");
            sb.Append("  DiscruptionTypes: ").Append(DiscruptionTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ServerConfigChange);
        }

        /// <summary>
        /// Returns true if ServerConfigChange instances are equal
        /// </summary>
        /// <param name="other">Instance of ServerConfigChange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerConfigChange other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ConfigChangeTypes == other.ConfigChangeTypes ||
                    this.ConfigChangeTypes != null &&
                    this.ConfigChangeTypes.SequenceEqual(other.ConfigChangeTypes)
                ) && 
                (
                    this.DiscruptionTypes == other.DiscruptionTypes ||
                    this.DiscruptionTypes != null &&
                    this.DiscruptionTypes.SequenceEqual(other.DiscruptionTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ConfigChangeTypes != null)
                    hash = hash * 59 + this.ConfigChangeTypes.GetHashCode();
                if (this.DiscruptionTypes != null)
                    hash = hash * 59 + this.DiscruptionTypes.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
