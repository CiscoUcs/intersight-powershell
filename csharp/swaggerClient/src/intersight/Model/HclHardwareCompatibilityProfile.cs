/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// profile giving server hardware details, OS details and UCS Version details 
    /// </summary>
    [DataContract]
    public partial class HclHardwareCompatibilityProfile :  IEquatable<HclHardwareCompatibilityProfile>, IValidatableObject
    {
        /// <summary>
        /// Error code indicating the support status  
        /// </summary>
        /// <value>Error code indicating the support status  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            
            /// <summary>
            /// Enum Success for "Success"
            /// </summary>
            [EnumMember(Value = "Success")]
            Success,
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum UnknownServer for "UnknownServer"
            /// </summary>
            [EnumMember(Value = "UnknownServer")]
            UnknownServer,
            
            /// <summary>
            /// Enum InvalidUcsVersion for "InvalidUcsVersion"
            /// </summary>
            [EnumMember(Value = "InvalidUcsVersion")]
            InvalidUcsVersion,
            
            /// <summary>
            /// Enum ProcessorNotSupported for "ProcessorNotSupported"
            /// </summary>
            [EnumMember(Value = "ProcessorNotSupported")]
            ProcessorNotSupported,
            
            /// <summary>
            /// Enum OSNotSupported for "OSNotSupported"
            /// </summary>
            [EnumMember(Value = "OSNotSupported")]
            OSNotSupported,
            
            /// <summary>
            /// Enum UCSVersionNotSupported for "UCSVersionNotSupported"
            /// </summary>
            [EnumMember(Value = "UCSVersionNotSupported")]
            UCSVersionNotSupported,
            
            /// <summary>
            /// Enum UcsVersionServerOSCombinationNotSupported for "UcsVersionServerOSCombinationNotSupported"
            /// </summary>
            [EnumMember(Value = "UcsVersionServerOSCombinationNotSupported")]
            UcsVersionServerOSCombinationNotSupported,
            
            /// <summary>
            /// Enum ProductUnknown for "ProductUnknown"
            /// </summary>
            [EnumMember(Value = "ProductUnknown")]
            ProductUnknown,
            
            /// <summary>
            /// Enum ProductNotSupported for "ProductNotSupported"
            /// </summary>
            [EnumMember(Value = "ProductNotSupported")]
            ProductNotSupported,
            
            /// <summary>
            /// Enum DriverNameNotSupported for "DriverNameNotSupported"
            /// </summary>
            [EnumMember(Value = "DriverNameNotSupported")]
            DriverNameNotSupported,
            
            /// <summary>
            /// Enum FirmwareVersionNotSupported for "FirmwareVersionNotSupported"
            /// </summary>
            [EnumMember(Value = "FirmwareVersionNotSupported")]
            FirmwareVersionNotSupported,
            
            /// <summary>
            /// Enum DriverVersionNotSupported for "DriverVersionNotSupported"
            /// </summary>
            [EnumMember(Value = "DriverVersionNotSupported")]
            DriverVersionNotSupported,
            
            /// <summary>
            /// Enum FirmwareVersionDriverVersionCombinationNotSupported for "FirmwareVersionDriverVersionCombinationNotSupported"
            /// </summary>
            [EnumMember(Value = "FirmwareVersionDriverVersionCombinationNotSupported")]
            FirmwareVersionDriverVersionCombinationNotSupported,
            
            /// <summary>
            /// Enum FirmwareVersionAndDriverVersionNotSupported for "FirmwareVersionAndDriverVersionNotSupported"
            /// </summary>
            [EnumMember(Value = "FirmwareVersionAndDriverVersionNotSupported")]
            FirmwareVersionAndDriverVersionNotSupported,
            
            /// <summary>
            /// Enum FirmwareVersionAndDriverNameNotSupported for "FirmwareVersionAndDriverNameNotSupported"
            /// </summary>
            [EnumMember(Value = "FirmwareVersionAndDriverNameNotSupported")]
            FirmwareVersionAndDriverNameNotSupported,
            
            /// <summary>
            /// Enum InternalError for "InternalError"
            /// </summary>
            [EnumMember(Value = "InternalError")]
            InternalError,
            
            /// <summary>
            /// Enum MarshallingError for "MarshallingError"
            /// </summary>
            [EnumMember(Value = "MarshallingError")]
            MarshallingError
        }

        /// <summary>
        /// Type of the UCS version indicating whether it is a UCSM release vesion or a IMC release   
        /// </summary>
        /// <value>Type of the UCS version indicating whether it is a UCSM release vesion or a IMC release   </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VersionTypeEnum
        {
            
            /// <summary>
            /// Enum UCSM for "UCSM"
            /// </summary>
            [EnumMember(Value = "UCSM")]
            UCSM,
            
            /// <summary>
            /// Enum IMC for "IMC"
            /// </summary>
            [EnumMember(Value = "IMC")]
            IMC
        }

        /// <summary>
        /// Error code indicating the support status  
        /// </summary>
        /// <value>Error code indicating the support status  </value>
        [DataMember(Name="ErrorCode", EmitDefaultValue=false)]
        public ErrorCodeEnum? ErrorCode { get; set; }
        /// <summary>
        /// Type of the UCS version indicating whether it is a UCSM release vesion or a IMC release   
        /// </summary>
        /// <value>Type of the UCS version indicating whether it is a UCSM release vesion or a IMC release   </value>
        [DataMember(Name="VersionType", EmitDefaultValue=false)]
        public VersionTypeEnum? VersionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HclHardwareCompatibilityProfile" /> class.
        /// </summary>
        /// <param name="DriverIsoUrl">Url for the driver iso for the server model  .</param>
        /// <param name="Id">Id.</param>
        /// <param name="OsVendor">vendor distributing the OS  .</param>
        /// <param name="OsVersion">Version of the OS  .</param>
        /// <param name="ProcessorModel">Model of the processor  .</param>
        /// <param name="Products">supported product list  .</param>
        /// <param name="ServerModel">server model  .</param>
        /// <param name="ServerRevision">revision of the server model  .</param>
        /// <param name="UcsVersion">Ucs version  .</param>
        /// <param name="VersionType">Type of the UCS version indicating whether it is a UCSM release vesion or a IMC release    (default to VersionTypeEnum.UCSM).</param>
        public HclHardwareCompatibilityProfile(string DriverIsoUrl = default(string), string Id = default(string), string OsVendor = default(string), string OsVersion = default(string), string ProcessorModel = default(string), List<HclProduct> Products = default(List<HclProduct>), string ServerModel = default(string), string ServerRevision = default(string), string UcsVersion = default(string), VersionTypeEnum? VersionType = VersionTypeEnum.UCSM)
        {
            this.DriverIsoUrl = DriverIsoUrl;
            this.Id = Id;
            this.OsVendor = OsVendor;
            this.OsVersion = OsVersion;
            this.ProcessorModel = ProcessorModel;
            this.Products = Products;
            this.ServerModel = ServerModel;
            this.ServerRevision = ServerRevision;
            this.UcsVersion = UcsVersion;
            // use default value if no "VersionType" provided
            if (VersionType == null)
            {
                this.VersionType = VersionTypeEnum.UCSM;
            }
            else
            {
                this.VersionType = VersionType;
            }
        }
        
        /// <summary>
        /// Url for the driver iso for the server model  
        /// </summary>
        /// <value>Url for the driver iso for the server model  </value>
        [DataMember(Name="DriverIsoUrl", EmitDefaultValue=false)]
        public string DriverIsoUrl { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// vendor distributing the OS  
        /// </summary>
        /// <value>vendor distributing the OS  </value>
        [DataMember(Name="OsVendor", EmitDefaultValue=false)]
        public string OsVendor { get; set; }

        /// <summary>
        /// Version of the OS  
        /// </summary>
        /// <value>Version of the OS  </value>
        [DataMember(Name="OsVersion", EmitDefaultValue=false)]
        public string OsVersion { get; set; }

        /// <summary>
        /// Model of the processor  
        /// </summary>
        /// <value>Model of the processor  </value>
        [DataMember(Name="ProcessorModel", EmitDefaultValue=false)]
        public string ProcessorModel { get; set; }

        /// <summary>
        /// supported product list  
        /// </summary>
        /// <value>supported product list  </value>
        [DataMember(Name="Products", EmitDefaultValue=false)]
        public List<HclProduct> Products { get; set; }

        /// <summary>
        /// server model  
        /// </summary>
        /// <value>server model  </value>
        [DataMember(Name="ServerModel", EmitDefaultValue=false)]
        public string ServerModel { get; set; }

        /// <summary>
        /// revision of the server model  
        /// </summary>
        /// <value>revision of the server model  </value>
        [DataMember(Name="ServerRevision", EmitDefaultValue=false)]
        public string ServerRevision { get; set; }

        /// <summary>
        /// Ucs version  
        /// </summary>
        /// <value>Ucs version  </value>
        [DataMember(Name="UcsVersion", EmitDefaultValue=false)]
        public string UcsVersion { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HclHardwareCompatibilityProfile {\n");
            sb.Append("  DriverIsoUrl: ").Append(DriverIsoUrl).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OsVendor: ").Append(OsVendor).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  ProcessorModel: ").Append(ProcessorModel).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  ServerModel: ").Append(ServerModel).Append("\n");
            sb.Append("  ServerRevision: ").Append(ServerRevision).Append("\n");
            sb.Append("  UcsVersion: ").Append(UcsVersion).Append("\n");
            sb.Append("  VersionType: ").Append(VersionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HclHardwareCompatibilityProfile);
        }

        /// <summary>
        /// Returns true if HclHardwareCompatibilityProfile instances are equal
        /// </summary>
        /// <param name="other">Instance of HclHardwareCompatibilityProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HclHardwareCompatibilityProfile other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DriverIsoUrl == other.DriverIsoUrl ||
                    this.DriverIsoUrl != null &&
                    this.DriverIsoUrl.Equals(other.DriverIsoUrl)
                ) && 
                (
                    this.ErrorCode == other.ErrorCode ||
                    this.ErrorCode != null &&
                    this.ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.OsVendor == other.OsVendor ||
                    this.OsVendor != null &&
                    this.OsVendor.Equals(other.OsVendor)
                ) && 
                (
                    this.OsVersion == other.OsVersion ||
                    this.OsVersion != null &&
                    this.OsVersion.Equals(other.OsVersion)
                ) && 
                (
                    this.ProcessorModel == other.ProcessorModel ||
                    this.ProcessorModel != null &&
                    this.ProcessorModel.Equals(other.ProcessorModel)
                ) && 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(other.Products)
                ) && 
                (
                    this.ServerModel == other.ServerModel ||
                    this.ServerModel != null &&
                    this.ServerModel.Equals(other.ServerModel)
                ) && 
                (
                    this.ServerRevision == other.ServerRevision ||
                    this.ServerRevision != null &&
                    this.ServerRevision.Equals(other.ServerRevision)
                ) && 
                (
                    this.UcsVersion == other.UcsVersion ||
                    this.UcsVersion != null &&
                    this.UcsVersion.Equals(other.UcsVersion)
                ) && 
                (
                    this.VersionType == other.VersionType ||
                    this.VersionType != null &&
                    this.VersionType.Equals(other.VersionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DriverIsoUrl != null)
                    hash = hash * 59 + this.DriverIsoUrl.GetHashCode();
                if (this.ErrorCode != null)
                    hash = hash * 59 + this.ErrorCode.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.OsVendor != null)
                    hash = hash * 59 + this.OsVendor.GetHashCode();
                if (this.OsVersion != null)
                    hash = hash * 59 + this.OsVersion.GetHashCode();
                if (this.ProcessorModel != null)
                    hash = hash * 59 + this.ProcessorModel.GetHashCode();
                if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                if (this.ServerModel != null)
                    hash = hash * 59 + this.ServerModel.GetHashCode();
                if (this.ServerRevision != null)
                    hash = hash * 59 + this.ServerRevision.GetHashCode();
                if (this.UcsVersion != null)
                    hash = hash * 59 + this.UcsVersion.GetHashCode();
                if (this.VersionType != null)
                    hash = hash * 59 + this.VersionType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
