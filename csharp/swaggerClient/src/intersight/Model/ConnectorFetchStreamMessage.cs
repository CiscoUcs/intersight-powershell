/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// Retrieve a list of cached stream messages by stream id. Cloud services will request stream messages to be re-sent in case of dropped messages (the cloud service receieves an unexpected stream sequence number). On success the device connector will &#39;replay&#39; the messages, publishing them to the streams response topic, they will not be returned in the response to this message. If any of the requested sequences are not present in the cache an error will be returned. 
    /// </summary>
    [DataContract]
    public partial class ConnectorFetchStreamMessage :  IEquatable<ConnectorFetchStreamMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorFetchStreamMessage" /> class.
        /// </summary>
        /// <param name="StreamName">The requested stream name. Stream names are unique per device endpoint.   .</param>
        /// <param name="Sequences">List of sequences to retrieve from the stream cache   .</param>
        public ConnectorFetchStreamMessage(string StreamName = default(string), List<long?> Sequences = default(List<long?>))
        {
            this.StreamName = StreamName;
            this.Sequences = Sequences;
        }
        
        /// <summary>
        /// The requested stream name. Stream names are unique per device endpoint.   
        /// </summary>
        /// <value>The requested stream name. Stream names are unique per device endpoint.   </value>
        [DataMember(Name="StreamName", EmitDefaultValue=false)]
        public string StreamName { get; set; }

        /// <summary>
        /// List of sequences to retrieve from the stream cache   
        /// </summary>
        /// <value>List of sequences to retrieve from the stream cache   </value>
        [DataMember(Name="Sequences", EmitDefaultValue=false)]
        public List<long?> Sequences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectorFetchStreamMessage {\n");
            sb.Append("  StreamName: ").Append(StreamName).Append("\n");
            sb.Append("  Sequences: ").Append(Sequences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConnectorFetchStreamMessage);
        }

        /// <summary>
        /// Returns true if ConnectorFetchStreamMessage instances are equal
        /// </summary>
        /// <param name="other">Instance of ConnectorFetchStreamMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorFetchStreamMessage other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StreamName == other.StreamName ||
                    this.StreamName != null &&
                    this.StreamName.Equals(other.StreamName)
                ) && 
                (
                    this.Sequences == other.Sequences ||
                    this.Sequences != null &&
                    this.Sequences.SequenceEqual(other.Sequences)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StreamName != null)
                    hash = hash * 59 + this.StreamName.GetHashCode();
                if (this.Sequences != null)
                    hash = hash * 59 + this.Sequences.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
