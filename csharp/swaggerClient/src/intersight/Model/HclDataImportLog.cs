/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 0.1.0-559
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// A record to track the data import process from the HCL tool. Create and Read access is provided only to System Administrators 
    /// </summary>
    [DataContract]
    public partial class HclDataImportLog :  IEquatable<HclDataImportLog>, IValidatableObject
    {
        /// <summary>
        /// Type of the import whether it is full or a delta  
        /// </summary>
        /// <value>Type of the import whether it is full or a delta  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImportTypeEnum
        {
            
            /// <summary>
            /// Enum Delta for "Delta"
            /// </summary>
            [EnumMember(Value = "Delta")]
            Delta,
            
            /// <summary>
            /// Enum Full for "Full"
            /// </summary>
            [EnumMember(Value = "Full")]
            Full
        }

        /// <summary>
        /// Type of the initiator whether it is manual or a automated periodic operation by system. The value will be set during DoPost to Manual  
        /// </summary>
        /// <value>Type of the initiator whether it is manual or a automated periodic operation by system. The value will be set during DoPost to Manual  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InitiatorTypeEnum
        {
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Manual for "Manual"
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual
        }

        /// <summary>
        /// Status of the import process  
        /// </summary>
        /// <value>Status of the import process  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum InProgress for "InProgress"
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress,
            
            /// <summary>
            /// Enum Success for "Success"
            /// </summary>
            [EnumMember(Value = "Success")]
            Success,
            
            /// <summary>
            /// Enum Started for "Started"
            /// </summary>
            [EnumMember(Value = "Started")]
            Started,
            
            /// <summary>
            /// Enum Failed for "Failed"
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed,
            
            /// <summary>
            /// Enum NoChange for "NoChange"
            /// </summary>
            [EnumMember(Value = "NoChange")]
            NoChange
        }

        /// <summary>
        /// Type of the import whether it is full or a delta  
        /// </summary>
        /// <value>Type of the import whether it is full or a delta  </value>
        [DataMember(Name="ImportType", EmitDefaultValue=false)]
        public ImportTypeEnum? ImportType { get; set; }
        /// <summary>
        /// Type of the initiator whether it is manual or a automated periodic operation by system. The value will be set during DoPost to Manual  
        /// </summary>
        /// <value>Type of the initiator whether it is manual or a automated periodic operation by system. The value will be set during DoPost to Manual  </value>
        [DataMember(Name="InitiatorType", EmitDefaultValue=false)]
        public InitiatorTypeEnum? InitiatorType { get; set; }
        /// <summary>
        /// Status of the import process  
        /// </summary>
        /// <value>Status of the import process  </value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HclDataImportLog" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.   .</param>
        /// <param name="Account">Account.</param>
        /// <param name="CheckSum">MD5 Checksum of the HCL Data file  .</param>
        /// <param name="ImportType">Type of the import whether it is full or a delta   (default to ImportTypeEnum.Delta).</param>
        /// <param name="LastHclDataModifiedTime">the timestamp of the last modified record in the HCL tool database. This value is used to query and get updated records  .</param>
        /// <param name="Status">Status of the import process   (default to StatusEnum.None).</param>
        /// <param name="StatusDetails">More information on the status   .</param>
        public HclDataImportLog(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), IamAccountRef Account = default(IamAccountRef), string CheckSum = default(string), ImportTypeEnum? ImportType = ImportTypeEnum.Delta, DateTime? LastHclDataModifiedTime = default(DateTime?), StatusEnum? Status = StatusEnum.None, string StatusDetails = default(string))
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.Account = Account;
            this.CheckSum = CheckSum;
            // use default value if no "ImportType" provided
            if (ImportType == null)
            {
                this.ImportType = ImportTypeEnum.Delta;
            }
            else
            {
                this.ImportType = ImportType;
            }
            this.LastHclDataModifiedTime = LastHclDataModifiedTime;
            // use default value if no "Status" provided
            if (Status == null)
            {
                this.Status = StatusEnum.None;
            }
            else
            {
                this.Status = Status;
            }
            this.StatusDetails = StatusDetails;
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.   
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.   </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="Account", EmitDefaultValue=false)]
        public IamAccountRef Account { get; set; }

        /// <summary>
        /// MD5 Checksum of the HCL Data file  
        /// </summary>
        /// <value>MD5 Checksum of the HCL Data file  </value>
        [DataMember(Name="CheckSum", EmitDefaultValue=false)]
        public string CheckSum { get; set; }



        /// <summary>
        /// the timestamp of the last modified record in the HCL tool database. This value is used to query and get updated records  
        /// </summary>
        /// <value>the timestamp of the last modified record in the HCL tool database. This value is used to query and get updated records  </value>
        [DataMember(Name="LastHclDataModifiedTime", EmitDefaultValue=false)]
        public DateTime? LastHclDataModifiedTime { get; set; }


        /// <summary>
        /// More information on the status   
        /// </summary>
        /// <value>More information on the status   </value>
        [DataMember(Name="StatusDetails", EmitDefaultValue=false)]
        public string StatusDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HclDataImportLog {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  CheckSum: ").Append(CheckSum).Append("\n");
            sb.Append("  ImportType: ").Append(ImportType).Append("\n");
            sb.Append("  InitiatorType: ").Append(InitiatorType).Append("\n");
            sb.Append("  LastHclDataModifiedTime: ").Append(LastHclDataModifiedTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDetails: ").Append(StatusDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HclDataImportLog);
        }

        /// <summary>
        /// Returns true if HclDataImportLog instances are equal
        /// </summary>
        /// <param name="other">Instance of HclDataImportLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HclDataImportLog other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.Account == other.Account ||
                    this.Account != null &&
                    this.Account.Equals(other.Account)
                ) && 
                (
                    this.CheckSum == other.CheckSum ||
                    this.CheckSum != null &&
                    this.CheckSum.Equals(other.CheckSum)
                ) && 
                (
                    this.ImportType == other.ImportType ||
                    this.ImportType != null &&
                    this.ImportType.Equals(other.ImportType)
                ) && 
                (
                    this.InitiatorType == other.InitiatorType ||
                    this.InitiatorType != null &&
                    this.InitiatorType.Equals(other.InitiatorType)
                ) && 
                (
                    this.LastHclDataModifiedTime == other.LastHclDataModifiedTime ||
                    this.LastHclDataModifiedTime != null &&
                    this.LastHclDataModifiedTime.Equals(other.LastHclDataModifiedTime)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusDetails == other.StatusDetails ||
                    this.StatusDetails != null &&
                    this.StatusDetails.Equals(other.StatusDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.Account != null)
                    hash = hash * 59 + this.Account.GetHashCode();
                if (this.CheckSum != null)
                    hash = hash * 59 + this.CheckSum.GetHashCode();
                if (this.ImportType != null)
                    hash = hash * 59 + this.ImportType.GetHashCode();
                if (this.InitiatorType != null)
                    hash = hash * 59 + this.InitiatorType.GetHashCode();
                if (this.LastHclDataModifiedTime != null)
                    hash = hash * 59 + this.LastHclDataModifiedTime.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusDetails != null)
                    hash = hash * 59 + this.StatusDetails.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
