/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// Meta data of firmware images from CCO 
    /// </summary>
    [DataContract]
    public partial class FirmwareDistributable :  IEquatable<FirmwareDistributable>, IValidatableObject
    {
        /// <summary>
        /// Source of firmware images  
        /// </summary>
        /// <value>Source of firmware images  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum CCO for "CCO"
            /// </summary>
            [EnumMember(Value = "CCO")]
            CCO
        }

        /// <summary>
        /// Source of firmware images  
        /// </summary>
        /// <value>Source of firmware images  </value>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FirmwareDistributable" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="SupportedModels">Supported models of the endpoint the firmware image is for  .</param>
        public FirmwareDistributable(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), List<string> SupportedModels = default(List<string>))
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.SupportedModels = SupportedModels;
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// Bundle type of the firmware image  
        /// </summary>
        /// <value>Bundle type of the firmware image  </value>
        [DataMember(Name="BundleType", EmitDefaultValue=false)]
        public string BundleType { get; private set; }

        /// <summary>
        /// Description of the firmware image  
        /// </summary>
        /// <value>Description of the firmware image  </value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; private set; }

        /// <summary>
        /// Guid of the firmware image  
        /// </summary>
        /// <value>Guid of the firmware image  </value>
        [DataMember(Name="Guid", EmitDefaultValue=false)]
        public string Guid { get; private set; }

        /// <summary>
        /// MD5 sum of the firmware image  
        /// </summary>
        /// <value>MD5 sum of the firmware image  </value>
        [DataMember(Name="Md5sum", EmitDefaultValue=false)]
        public string Md5sum { get; private set; }

        /// <summary>
        /// Mdfid of the firmware image  
        /// </summary>
        /// <value>Mdfid of the firmware image  </value>
        [DataMember(Name="Mdfid", EmitDefaultValue=false)]
        public string Mdfid { get; private set; }

        /// <summary>
        /// Model of the endpoint the firmware image is for  
        /// </summary>
        /// <value>Model of the endpoint the firmware image is for  </value>
        [DataMember(Name="Model", EmitDefaultValue=false)]
        public string Model { get; private set; }

        /// <summary>
        /// Iso image name of the firmware image  
        /// </summary>
        /// <value>Iso image name of the firmware image  </value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Page number where firmware image is present in Cisco Software Repository  
        /// </summary>
        /// <value>Page number where firmware image is present in Cisco Software Repository  </value>
        [DataMember(Name="PageIndex", EmitDefaultValue=false)]
        public string PageIndex { get; private set; }

        /// <summary>
        /// Platform type of the firmware image  
        /// </summary>
        /// <value>Platform type of the firmware image  </value>
        [DataMember(Name="PlatformType", EmitDefaultValue=false)]
        public string PlatformType { get; private set; }

        /// <summary>
        /// Release date of the firmware image  
        /// </summary>
        /// <value>Release date of the firmware image  </value>
        [DataMember(Name="ReleaseDate", EmitDefaultValue=false)]
        public string ReleaseDate { get; private set; }

        /// <summary>
        /// Size of the firmware image  
        /// </summary>
        /// <value>Size of the firmware image  </value>
        [DataMember(Name="Size", EmitDefaultValue=false)]
        public string Size { get; private set; }

        /// <summary>
        /// Software Advisory for firmware image from Cisco software repository. Read and accept the software advisory before downloading the firmware image.  
        /// </summary>
        /// <value>Software Advisory for firmware image from Cisco software repository. Read and accept the software advisory before downloading the firmware image.  </value>
        [DataMember(Name="SoftwareAdvisoryUrl", EmitDefaultValue=false)]
        public string SoftwareAdvisoryUrl { get; private set; }

        /// <summary>
        /// Software type Id of the firmware image  
        /// </summary>
        /// <value>Software type Id of the firmware image  </value>
        [DataMember(Name="SoftwareTypeId", EmitDefaultValue=false)]
        public string SoftwareTypeId { get; private set; }


        /// <summary>
        /// Supported models of the endpoint the firmware image is for  
        /// </summary>
        /// <value>Supported models of the endpoint the firmware image is for  </value>
        [DataMember(Name="SupportedModels", EmitDefaultValue=false)]
        public List<string> SupportedModels { get; set; }

        /// <summary>
        /// Vendor of the firmware image  
        /// </summary>
        /// <value>Vendor of the firmware image  </value>
        [DataMember(Name="Vendor", EmitDefaultValue=false)]
        public string Vendor { get; private set; }

        /// <summary>
        /// Version of the firmware image   
        /// </summary>
        /// <value>Version of the firmware image   </value>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FirmwareDistributable {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  BundleType: ").Append(BundleType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Md5sum: ").Append(Md5sum).Append("\n");
            sb.Append("  Mdfid: ").Append(Mdfid).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  PlatformType: ").Append(PlatformType).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SoftwareAdvisoryUrl: ").Append(SoftwareAdvisoryUrl).Append("\n");
            sb.Append("  SoftwareTypeId: ").Append(SoftwareTypeId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SupportedModels: ").Append(SupportedModels).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FirmwareDistributable);
        }

        /// <summary>
        /// Returns true if FirmwareDistributable instances are equal
        /// </summary>
        /// <param name="other">Instance of FirmwareDistributable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FirmwareDistributable other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.BundleType == other.BundleType ||
                    this.BundleType != null &&
                    this.BundleType.Equals(other.BundleType)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Guid == other.Guid ||
                    this.Guid != null &&
                    this.Guid.Equals(other.Guid)
                ) && 
                (
                    this.Md5sum == other.Md5sum ||
                    this.Md5sum != null &&
                    this.Md5sum.Equals(other.Md5sum)
                ) && 
                (
                    this.Mdfid == other.Mdfid ||
                    this.Mdfid != null &&
                    this.Mdfid.Equals(other.Mdfid)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PageIndex == other.PageIndex ||
                    this.PageIndex != null &&
                    this.PageIndex.Equals(other.PageIndex)
                ) && 
                (
                    this.PlatformType == other.PlatformType ||
                    this.PlatformType != null &&
                    this.PlatformType.Equals(other.PlatformType)
                ) && 
                (
                    this.ReleaseDate == other.ReleaseDate ||
                    this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(other.ReleaseDate)
                ) && 
                (
                    this.Size == other.Size ||
                    this.Size != null &&
                    this.Size.Equals(other.Size)
                ) && 
                (
                    this.SoftwareAdvisoryUrl == other.SoftwareAdvisoryUrl ||
                    this.SoftwareAdvisoryUrl != null &&
                    this.SoftwareAdvisoryUrl.Equals(other.SoftwareAdvisoryUrl)
                ) && 
                (
                    this.SoftwareTypeId == other.SoftwareTypeId ||
                    this.SoftwareTypeId != null &&
                    this.SoftwareTypeId.Equals(other.SoftwareTypeId)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.SupportedModels == other.SupportedModels ||
                    this.SupportedModels != null &&
                    this.SupportedModels.SequenceEqual(other.SupportedModels)
                ) && 
                (
                    this.Vendor == other.Vendor ||
                    this.Vendor != null &&
                    this.Vendor.Equals(other.Vendor)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.BundleType != null)
                    hash = hash * 59 + this.BundleType.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Guid != null)
                    hash = hash * 59 + this.Guid.GetHashCode();
                if (this.Md5sum != null)
                    hash = hash * 59 + this.Md5sum.GetHashCode();
                if (this.Mdfid != null)
                    hash = hash * 59 + this.Mdfid.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PageIndex != null)
                    hash = hash * 59 + this.PageIndex.GetHashCode();
                if (this.PlatformType != null)
                    hash = hash * 59 + this.PlatformType.GetHashCode();
                if (this.ReleaseDate != null)
                    hash = hash * 59 + this.ReleaseDate.GetHashCode();
                if (this.Size != null)
                    hash = hash * 59 + this.Size.GetHashCode();
                if (this.SoftwareAdvisoryUrl != null)
                    hash = hash * 59 + this.SoftwareAdvisoryUrl.GetHashCode();
                if (this.SoftwareTypeId != null)
                    hash = hash * 59 + this.SoftwareTypeId.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.SupportedModels != null)
                    hash = hash * 59 + this.SupportedModels.GetHashCode();
                if (this.Vendor != null)
                    hash = hash * 59 + this.Vendor.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
