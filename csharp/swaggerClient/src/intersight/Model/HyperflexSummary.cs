/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// HyperflexSummary
    /// </summary>
    [DataContract]
    public partial class HyperflexSummary :  IEquatable<HyperflexSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HyperflexSummary" /> class.
        /// </summary>
        /// <param name="HealingInfo">HealingInfo.</param>
        /// <param name="ResiliencyDetails">ResiliencyDetails.</param>
        /// <param name="ResiliencyInfo">ResiliencyInfo.</param>
        public HyperflexSummary(HyperflexStPlatformClusterHealingInfo HealingInfo = default(HyperflexStPlatformClusterHealingInfo), Object ResiliencyDetails = default(Object), HyperflexStPlatformClusterResiliencyInfo ResiliencyInfo = default(HyperflexStPlatformClusterResiliencyInfo))
        {
            this.HealingInfo = HealingInfo;
            this.ResiliencyDetails = ResiliencyDetails;
            this.ResiliencyInfo = ResiliencyInfo;
        }
        
        /// <summary>
        /// Gets or Sets ActiveNodes
        /// </summary>
        [DataMember(Name="ActiveNodes", EmitDefaultValue=false)]
        public string ActiveNodes { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public string Address { get; private set; }

        /// <summary>
        /// Gets or Sets Boottime
        /// </summary>
        [DataMember(Name="Boottime", EmitDefaultValue=false)]
        public long? Boottime { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterAccessPolicy
        /// </summary>
        [DataMember(Name="ClusterAccessPolicy", EmitDefaultValue=false)]
        public string ClusterAccessPolicy { get; private set; }

        /// <summary>
        /// Gets or Sets CompressionSavings
        /// </summary>
        [DataMember(Name="CompressionSavings", EmitDefaultValue=false)]
        public double? CompressionSavings { get; private set; }

        /// <summary>
        /// Gets or Sets DataReplicationCompliance
        /// </summary>
        [DataMember(Name="DataReplicationCompliance", EmitDefaultValue=false)]
        public string DataReplicationCompliance { get; private set; }

        /// <summary>
        /// Gets or Sets DataReplicationFactor
        /// </summary>
        [DataMember(Name="DataReplicationFactor", EmitDefaultValue=false)]
        public string DataReplicationFactor { get; private set; }

        /// <summary>
        /// Gets or Sets DeduplicationSavings
        /// </summary>
        [DataMember(Name="DeduplicationSavings", EmitDefaultValue=false)]
        public double? DeduplicationSavings { get; private set; }

        /// <summary>
        /// Gets or Sets Downtime
        /// </summary>
        [DataMember(Name="Downtime", EmitDefaultValue=false)]
        public string Downtime { get; private set; }

        /// <summary>
        /// Gets or Sets FreeCapacity
        /// </summary>
        [DataMember(Name="FreeCapacity", EmitDefaultValue=false)]
        public long? FreeCapacity { get; private set; }

        /// <summary>
        /// Gets or Sets HealingInfo
        /// </summary>
        [DataMember(Name="HealingInfo", EmitDefaultValue=false)]
        public HyperflexStPlatformClusterHealingInfo HealingInfo { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets ResiliencyDetails
        /// </summary>
        [DataMember(Name="ResiliencyDetails", EmitDefaultValue=false)]
        public Object ResiliencyDetails { get; set; }

        /// <summary>
        /// Gets or Sets ResiliencyDetailsSize
        /// </summary>
        [DataMember(Name="ResiliencyDetailsSize", EmitDefaultValue=false)]
        public long? ResiliencyDetailsSize { get; private set; }

        /// <summary>
        /// Gets or Sets ResiliencyInfo
        /// </summary>
        [DataMember(Name="ResiliencyInfo", EmitDefaultValue=false)]
        public HyperflexStPlatformClusterResiliencyInfo ResiliencyInfo { get; set; }

        /// <summary>
        /// Gets or Sets SpaceStatus
        /// </summary>
        [DataMember(Name="SpaceStatus", EmitDefaultValue=false)]
        public string SpaceStatus { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; private set; }

        /// <summary>
        /// Gets or Sets TotalCapacity
        /// </summary>
        [DataMember(Name="TotalCapacity", EmitDefaultValue=false)]
        public long? TotalCapacity { get; private set; }

        /// <summary>
        /// Gets or Sets TotalSavings
        /// </summary>
        [DataMember(Name="TotalSavings", EmitDefaultValue=false)]
        public double? TotalSavings { get; private set; }

        /// <summary>
        /// Gets or Sets Uptime
        /// </summary>
        [DataMember(Name="Uptime", EmitDefaultValue=false)]
        public string Uptime { get; private set; }

        /// <summary>
        /// Gets or Sets UsedCapacity
        /// </summary>
        [DataMember(Name="UsedCapacity", EmitDefaultValue=false)]
        public long? UsedCapacity { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HyperflexSummary {\n");
            sb.Append("  ActiveNodes: ").Append(ActiveNodes).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Boottime: ").Append(Boottime).Append("\n");
            sb.Append("  ClusterAccessPolicy: ").Append(ClusterAccessPolicy).Append("\n");
            sb.Append("  CompressionSavings: ").Append(CompressionSavings).Append("\n");
            sb.Append("  DataReplicationCompliance: ").Append(DataReplicationCompliance).Append("\n");
            sb.Append("  DataReplicationFactor: ").Append(DataReplicationFactor).Append("\n");
            sb.Append("  DeduplicationSavings: ").Append(DeduplicationSavings).Append("\n");
            sb.Append("  Downtime: ").Append(Downtime).Append("\n");
            sb.Append("  FreeCapacity: ").Append(FreeCapacity).Append("\n");
            sb.Append("  HealingInfo: ").Append(HealingInfo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResiliencyDetails: ").Append(ResiliencyDetails).Append("\n");
            sb.Append("  ResiliencyDetailsSize: ").Append(ResiliencyDetailsSize).Append("\n");
            sb.Append("  ResiliencyInfo: ").Append(ResiliencyInfo).Append("\n");
            sb.Append("  SpaceStatus: ").Append(SpaceStatus).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TotalCapacity: ").Append(TotalCapacity).Append("\n");
            sb.Append("  TotalSavings: ").Append(TotalSavings).Append("\n");
            sb.Append("  Uptime: ").Append(Uptime).Append("\n");
            sb.Append("  UsedCapacity: ").Append(UsedCapacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HyperflexSummary);
        }

        /// <summary>
        /// Returns true if HyperflexSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of HyperflexSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HyperflexSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActiveNodes == other.ActiveNodes ||
                    this.ActiveNodes != null &&
                    this.ActiveNodes.Equals(other.ActiveNodes)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.Boottime == other.Boottime ||
                    this.Boottime != null &&
                    this.Boottime.Equals(other.Boottime)
                ) && 
                (
                    this.ClusterAccessPolicy == other.ClusterAccessPolicy ||
                    this.ClusterAccessPolicy != null &&
                    this.ClusterAccessPolicy.Equals(other.ClusterAccessPolicy)
                ) && 
                (
                    this.CompressionSavings == other.CompressionSavings ||
                    this.CompressionSavings != null &&
                    this.CompressionSavings.Equals(other.CompressionSavings)
                ) && 
                (
                    this.DataReplicationCompliance == other.DataReplicationCompliance ||
                    this.DataReplicationCompliance != null &&
                    this.DataReplicationCompliance.Equals(other.DataReplicationCompliance)
                ) && 
                (
                    this.DataReplicationFactor == other.DataReplicationFactor ||
                    this.DataReplicationFactor != null &&
                    this.DataReplicationFactor.Equals(other.DataReplicationFactor)
                ) && 
                (
                    this.DeduplicationSavings == other.DeduplicationSavings ||
                    this.DeduplicationSavings != null &&
                    this.DeduplicationSavings.Equals(other.DeduplicationSavings)
                ) && 
                (
                    this.Downtime == other.Downtime ||
                    this.Downtime != null &&
                    this.Downtime.Equals(other.Downtime)
                ) && 
                (
                    this.FreeCapacity == other.FreeCapacity ||
                    this.FreeCapacity != null &&
                    this.FreeCapacity.Equals(other.FreeCapacity)
                ) && 
                (
                    this.HealingInfo == other.HealingInfo ||
                    this.HealingInfo != null &&
                    this.HealingInfo.Equals(other.HealingInfo)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ResiliencyDetails == other.ResiliencyDetails ||
                    this.ResiliencyDetails != null &&
                    this.ResiliencyDetails.Equals(other.ResiliencyDetails)
                ) && 
                (
                    this.ResiliencyDetailsSize == other.ResiliencyDetailsSize ||
                    this.ResiliencyDetailsSize != null &&
                    this.ResiliencyDetailsSize.Equals(other.ResiliencyDetailsSize)
                ) && 
                (
                    this.ResiliencyInfo == other.ResiliencyInfo ||
                    this.ResiliencyInfo != null &&
                    this.ResiliencyInfo.Equals(other.ResiliencyInfo)
                ) && 
                (
                    this.SpaceStatus == other.SpaceStatus ||
                    this.SpaceStatus != null &&
                    this.SpaceStatus.Equals(other.SpaceStatus)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.TotalCapacity == other.TotalCapacity ||
                    this.TotalCapacity != null &&
                    this.TotalCapacity.Equals(other.TotalCapacity)
                ) && 
                (
                    this.TotalSavings == other.TotalSavings ||
                    this.TotalSavings != null &&
                    this.TotalSavings.Equals(other.TotalSavings)
                ) && 
                (
                    this.Uptime == other.Uptime ||
                    this.Uptime != null &&
                    this.Uptime.Equals(other.Uptime)
                ) && 
                (
                    this.UsedCapacity == other.UsedCapacity ||
                    this.UsedCapacity != null &&
                    this.UsedCapacity.Equals(other.UsedCapacity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActiveNodes != null)
                    hash = hash * 59 + this.ActiveNodes.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.Boottime != null)
                    hash = hash * 59 + this.Boottime.GetHashCode();
                if (this.ClusterAccessPolicy != null)
                    hash = hash * 59 + this.ClusterAccessPolicy.GetHashCode();
                if (this.CompressionSavings != null)
                    hash = hash * 59 + this.CompressionSavings.GetHashCode();
                if (this.DataReplicationCompliance != null)
                    hash = hash * 59 + this.DataReplicationCompliance.GetHashCode();
                if (this.DataReplicationFactor != null)
                    hash = hash * 59 + this.DataReplicationFactor.GetHashCode();
                if (this.DeduplicationSavings != null)
                    hash = hash * 59 + this.DeduplicationSavings.GetHashCode();
                if (this.Downtime != null)
                    hash = hash * 59 + this.Downtime.GetHashCode();
                if (this.FreeCapacity != null)
                    hash = hash * 59 + this.FreeCapacity.GetHashCode();
                if (this.HealingInfo != null)
                    hash = hash * 59 + this.HealingInfo.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ResiliencyDetails != null)
                    hash = hash * 59 + this.ResiliencyDetails.GetHashCode();
                if (this.ResiliencyDetailsSize != null)
                    hash = hash * 59 + this.ResiliencyDetailsSize.GetHashCode();
                if (this.ResiliencyInfo != null)
                    hash = hash * 59 + this.ResiliencyInfo.GetHashCode();
                if (this.SpaceStatus != null)
                    hash = hash * 59 + this.SpaceStatus.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.TotalCapacity != null)
                    hash = hash * 59 + this.TotalCapacity.GetHashCode();
                if (this.TotalSavings != null)
                    hash = hash * 59 + this.TotalSavings.GetHashCode();
                if (this.Uptime != null)
                    hash = hash * 59 + this.Uptime.GetHashCode();
                if (this.UsedCapacity != null)
                    hash = hash * 59 + this.UsedCapacity.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
