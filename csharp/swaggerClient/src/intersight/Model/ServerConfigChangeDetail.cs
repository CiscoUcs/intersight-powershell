/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 0.1.0-559
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// Represents the configuration change detail entry. 
    /// </summary>
    [DataContract]
    public partial class ServerConfigChangeDetail :  IEquatable<ServerConfigChangeDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerConfigChangeDetail" /> class.
        /// </summary>
        /// <param name="ConfigChangeContext">ConfigChangeContext.</param>
        /// <param name="ConfigChangeType">ConfigChangeType.</param>
        /// <param name="DisruptionType">DisruptionType.</param>
        /// <param name="Message">Message.</param>
        /// <param name="MessageParams">MessageParams.</param>
        public ServerConfigChangeDetail(PolicyConfigResultContext ConfigChangeContext = default(PolicyConfigResultContext), string ConfigChangeType = default(string), string DisruptionType = default(string), string Message = default(string), Object MessageParams = default(Object))
        {
            this.ConfigChangeContext = ConfigChangeContext;
            this.ConfigChangeType = ConfigChangeType;
            this.DisruptionType = DisruptionType;
            this.Message = Message;
            this.MessageParams = MessageParams;
        }
        
        /// <summary>
        /// Gets or Sets ConfigChangeContext
        /// </summary>
        [DataMember(Name="ConfigChangeContext", EmitDefaultValue=false)]
        public PolicyConfigResultContext ConfigChangeContext { get; set; }

        /// <summary>
        /// Gets or Sets ConfigChangeType
        /// </summary>
        [DataMember(Name="ConfigChangeType", EmitDefaultValue=false)]
        public string ConfigChangeType { get; set; }

        /// <summary>
        /// Gets or Sets DisruptionType
        /// </summary>
        [DataMember(Name="DisruptionType", EmitDefaultValue=false)]
        public string DisruptionType { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets MessageParams
        /// </summary>
        [DataMember(Name="MessageParams", EmitDefaultValue=false)]
        public Object MessageParams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerConfigChangeDetail {\n");
            sb.Append("  ConfigChangeContext: ").Append(ConfigChangeContext).Append("\n");
            sb.Append("  ConfigChangeType: ").Append(ConfigChangeType).Append("\n");
            sb.Append("  DisruptionType: ").Append(DisruptionType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  MessageParams: ").Append(MessageParams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ServerConfigChangeDetail);
        }

        /// <summary>
        /// Returns true if ServerConfigChangeDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of ServerConfigChangeDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerConfigChangeDetail other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ConfigChangeContext == other.ConfigChangeContext ||
                    this.ConfigChangeContext != null &&
                    this.ConfigChangeContext.Equals(other.ConfigChangeContext)
                ) && 
                (
                    this.ConfigChangeType == other.ConfigChangeType ||
                    this.ConfigChangeType != null &&
                    this.ConfigChangeType.Equals(other.ConfigChangeType)
                ) && 
                (
                    this.DisruptionType == other.DisruptionType ||
                    this.DisruptionType != null &&
                    this.DisruptionType.Equals(other.DisruptionType)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.MessageParams == other.MessageParams ||
                    this.MessageParams != null &&
                    this.MessageParams.Equals(other.MessageParams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ConfigChangeContext != null)
                    hash = hash * 59 + this.ConfigChangeContext.GetHashCode();
                if (this.ConfigChangeType != null)
                    hash = hash * 59 + this.ConfigChangeType.GetHashCode();
                if (this.DisruptionType != null)
                    hash = hash * 59 + this.DisruptionType.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.MessageParams != null)
                    hash = hash * 59 + this.MessageParams.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
