/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// Constraints for an application setting 
    /// </summary>
    [DataContract]
    public partial class HyperflexAppSettingConstraint :  IEquatable<HyperflexAppSettingConstraint>, IValidatableObject
    {
        /// <summary>
        /// Hypervisor type for the HyperFlex cluster  
        /// </summary>
        /// <value>Hypervisor type for the HyperFlex cluster  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HypervisorTypeEnum
        {
            
            /// <summary>
            /// Enum ESXi for "ESXi"
            /// </summary>
            [EnumMember(Value = "ESXi")]
            ESXi
        }

        /// <summary>
        /// Management platform for the Hyperflex Cluster  
        /// </summary>
        /// <value>Management platform for the Hyperflex Cluster  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MgmtPlatformEnum
        {
            
            /// <summary>
            /// Enum FI for "FI"
            /// </summary>
            [EnumMember(Value = "FI")]
            FI,
            
            /// <summary>
            /// Enum EDGE for "EDGE"
            /// </summary>
            [EnumMember(Value = "EDGE")]
            EDGE
        }

        /// <summary>
        /// Hypervisor type for the HyperFlex cluster  
        /// </summary>
        /// <value>Hypervisor type for the HyperFlex cluster  </value>
        [DataMember(Name="HypervisorType", EmitDefaultValue=false)]
        public HypervisorTypeEnum? HypervisorType { get; set; }
        /// <summary>
        /// Management platform for the Hyperflex Cluster  
        /// </summary>
        /// <value>Management platform for the Hyperflex Cluster  </value>
        [DataMember(Name="MgmtPlatform", EmitDefaultValue=false)]
        public MgmtPlatformEnum? MgmtPlatform { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HyperflexAppSettingConstraint" /> class.
        /// </summary>
        /// <param name="HxdpVersion">HyperFlex Data Platform version in regex format  .</param>
        /// <param name="HypervisorType">Hypervisor type for the HyperFlex cluster   (default to HypervisorTypeEnum.ESXi).</param>
        /// <param name="MgmtPlatform">Management platform for the Hyperflex Cluster   (default to MgmtPlatformEnum.FI).</param>
        /// <param name="ServerModel">Supported server models in regex format   .</param>
        public HyperflexAppSettingConstraint(string HxdpVersion = default(string), HypervisorTypeEnum? HypervisorType = HypervisorTypeEnum.ESXi, MgmtPlatformEnum? MgmtPlatform = MgmtPlatformEnum.FI, string ServerModel = default(string))
        {
            this.HxdpVersion = HxdpVersion;
            // use default value if no "HypervisorType" provided
            if (HypervisorType == null)
            {
                this.HypervisorType = HypervisorTypeEnum.ESXi;
            }
            else
            {
                this.HypervisorType = HypervisorType;
            }
            // use default value if no "MgmtPlatform" provided
            if (MgmtPlatform == null)
            {
                this.MgmtPlatform = MgmtPlatformEnum.FI;
            }
            else
            {
                this.MgmtPlatform = MgmtPlatform;
            }
            this.ServerModel = ServerModel;
        }
        
        /// <summary>
        /// HyperFlex Data Platform version in regex format  
        /// </summary>
        /// <value>HyperFlex Data Platform version in regex format  </value>
        [DataMember(Name="HxdpVersion", EmitDefaultValue=false)]
        public string HxdpVersion { get; set; }



        /// <summary>
        /// Supported server models in regex format   
        /// </summary>
        /// <value>Supported server models in regex format   </value>
        [DataMember(Name="ServerModel", EmitDefaultValue=false)]
        public string ServerModel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HyperflexAppSettingConstraint {\n");
            sb.Append("  HxdpVersion: ").Append(HxdpVersion).Append("\n");
            sb.Append("  HypervisorType: ").Append(HypervisorType).Append("\n");
            sb.Append("  MgmtPlatform: ").Append(MgmtPlatform).Append("\n");
            sb.Append("  ServerModel: ").Append(ServerModel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HyperflexAppSettingConstraint);
        }

        /// <summary>
        /// Returns true if HyperflexAppSettingConstraint instances are equal
        /// </summary>
        /// <param name="other">Instance of HyperflexAppSettingConstraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HyperflexAppSettingConstraint other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HxdpVersion == other.HxdpVersion ||
                    this.HxdpVersion != null &&
                    this.HxdpVersion.Equals(other.HxdpVersion)
                ) && 
                (
                    this.HypervisorType == other.HypervisorType ||
                    this.HypervisorType != null &&
                    this.HypervisorType.Equals(other.HypervisorType)
                ) && 
                (
                    this.MgmtPlatform == other.MgmtPlatform ||
                    this.MgmtPlatform != null &&
                    this.MgmtPlatform.Equals(other.MgmtPlatform)
                ) && 
                (
                    this.ServerModel == other.ServerModel ||
                    this.ServerModel != null &&
                    this.ServerModel.Equals(other.ServerModel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HxdpVersion != null)
                    hash = hash * 59 + this.HxdpVersion.GetHashCode();
                if (this.HypervisorType != null)
                    hash = hash * 59 + this.HypervisorType.GetHashCode();
                if (this.MgmtPlatform != null)
                    hash = hash * 59 + this.MgmtPlatform.GetHashCode();
                if (this.ServerModel != null)
                    hash = hash * 59 + this.ServerModel.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
