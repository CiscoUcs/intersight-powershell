/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// DNS settings used to access LDAP Providers 
    /// </summary>
    [DataContract]
    public partial class IamLdapDnsParameters :  IEquatable<IamLdapDnsParameters>, IValidatableObject
    {
        /// <summary>
        /// Specifies the source of the domain name used for the DNS SRV request   
        /// </summary>
        /// <value>Specifies the source of the domain name used for the DNS SRV request   </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum Extracted for "Extracted"
            /// </summary>
            [EnumMember(Value = "Extracted")]
            Extracted,
            
            /// <summary>
            /// Enum Configured for "Configured"
            /// </summary>
            [EnumMember(Value = "Configured")]
            Configured,
            
            /// <summary>
            /// Enum ConfiguredExtracted for "ConfiguredExtracted"
            /// </summary>
            [EnumMember(Value = "ConfiguredExtracted")]
            ConfiguredExtracted
        }

        /// <summary>
        /// Specifies the source of the domain name used for the DNS SRV request   
        /// </summary>
        /// <value>Specifies the source of the domain name used for the DNS SRV request   </value>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IamLdapDnsParameters" /> class.
        /// </summary>
        /// <param name="SearchDomain">Domain name that acts as a source for a DNS query  .</param>
        /// <param name="SearchForest">Forest name that acts as a source for a DNS query  .</param>
        /// <param name="Source">Specifies the source of the domain name used for the DNS SRV request    (default to SourceEnum.Extracted).</param>
        public IamLdapDnsParameters(string SearchDomain = default(string), string SearchForest = default(string), SourceEnum? Source = SourceEnum.Extracted)
        {
            this.SearchDomain = SearchDomain;
            this.SearchForest = SearchForest;
            // use default value if no "Source" provided
            if (Source == null)
            {
                this.Source = SourceEnum.Extracted;
            }
            else
            {
                this.Source = Source;
            }
        }
        
        /// <summary>
        /// Domain name that acts as a source for a DNS query  
        /// </summary>
        /// <value>Domain name that acts as a source for a DNS query  </value>
        [DataMember(Name="SearchDomain", EmitDefaultValue=false)]
        public string SearchDomain { get; set; }

        /// <summary>
        /// Forest name that acts as a source for a DNS query  
        /// </summary>
        /// <value>Forest name that acts as a source for a DNS query  </value>
        [DataMember(Name="SearchForest", EmitDefaultValue=false)]
        public string SearchForest { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IamLdapDnsParameters {\n");
            sb.Append("  SearchDomain: ").Append(SearchDomain).Append("\n");
            sb.Append("  SearchForest: ").Append(SearchForest).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IamLdapDnsParameters);
        }

        /// <summary>
        /// Returns true if IamLdapDnsParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of IamLdapDnsParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IamLdapDnsParameters other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SearchDomain == other.SearchDomain ||
                    this.SearchDomain != null &&
                    this.SearchDomain.Equals(other.SearchDomain)
                ) && 
                (
                    this.SearchForest == other.SearchForest ||
                    this.SearchForest != null &&
                    this.SearchForest.Equals(other.SearchForest)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SearchDomain != null)
                    hash = hash * 59 + this.SearchDomain.GetHashCode();
                if (this.SearchForest != null)
                    hash = hash * 59 + this.SearchForest.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
