/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// Users can log in through the base URL (https://intersight.com) or account-specific URLs. When the Intersight user logs in through the base URL, Intersight identifies the accounts and permissions within each account which the user has access to. In case multiple permissions are identified, the user and session objects are created in the onboarding-user account, and the session object is updated with account and permission information. Intersight GUI uses this information to show available accounts and permissions for the user to select. This type is used to store permission information of an account. 
    /// </summary>
    [DataContract]
    public partial class IamPermissionReference :  IEquatable<IamPermissionReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IamPermissionReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public IamPermissionReference()
        {
        }
        
        /// <summary>
        /// MOID of the permission.  
        /// </summary>
        /// <value>MOID of the permission.  </value>
        [DataMember(Name="PermissionIdentifier", EmitDefaultValue=false)]
        public string PermissionIdentifier { get; private set; }

        /// <summary>
        /// Name of the permission.   
        /// </summary>
        /// <value>Name of the permission.   </value>
        [DataMember(Name="PermissionName", EmitDefaultValue=false)]
        public string PermissionName { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IamPermissionReference {\n");
            sb.Append("  PermissionIdentifier: ").Append(PermissionIdentifier).Append("\n");
            sb.Append("  PermissionName: ").Append(PermissionName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IamPermissionReference);
        }

        /// <summary>
        /// Returns true if IamPermissionReference instances are equal
        /// </summary>
        /// <param name="other">Instance of IamPermissionReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IamPermissionReference other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PermissionIdentifier == other.PermissionIdentifier ||
                    this.PermissionIdentifier != null &&
                    this.PermissionIdentifier.Equals(other.PermissionIdentifier)
                ) && 
                (
                    this.PermissionName == other.PermissionName ||
                    this.PermissionName != null &&
                    this.PermissionName.Equals(other.PermissionName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PermissionIdentifier != null)
                    hash = hash * 59 + this.PermissionIdentifier.GetHashCode();
                if (this.PermissionName != null)
                    hash = hash * 59 + this.PermissionName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
