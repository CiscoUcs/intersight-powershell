/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// HyperflexCluster
    /// </summary>
    [DataContract]
    public partial class HyperflexCluster :  IEquatable<HyperflexCluster>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets HypervisorType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HypervisorTypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum HyperV for "HyperV"
            /// </summary>
            [EnumMember(Value = "HyperV")]
            HyperV,
            
            /// <summary>
            /// Enum ESXi for "ESXi"
            /// </summary>
            [EnumMember(Value = "ESXi")]
            ESXi
        }

        /// <summary>
        /// Gets or Sets HypervisorType
        /// </summary>
        [DataMember(Name="HypervisorType", EmitDefaultValue=false)]
        public HypervisorTypeEnum? HypervisorType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HyperflexCluster" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="Alarm">Alarm.</param>
        /// <param name="Nodes">Nodes.</param>
        /// <param name="RegisteredDevice">RegisteredDevice.</param>
        /// <param name="Summary">Summary.</param>
        public HyperflexCluster(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), List<HyperflexAlarmRef> Alarm = default(List<HyperflexAlarmRef>), List<HyperflexNodeRef> Nodes = default(List<HyperflexNodeRef>), AssetDeviceRegistrationRef RegisteredDevice = default(AssetDeviceRegistrationRef), HyperflexSummary Summary = default(HyperflexSummary))
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.Alarm = Alarm;
            this.Nodes = Nodes;
            this.RegisteredDevice = RegisteredDevice;
            this.Summary = Summary;
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// Gets or Sets Alarm
        /// </summary>
        [DataMember(Name="Alarm", EmitDefaultValue=false)]
        public List<HyperflexAlarmRef> Alarm { get; set; }

        /// <summary>
        /// Gets or Sets ClusterName
        /// </summary>
        [DataMember(Name="ClusterName", EmitDefaultValue=false)]
        public string ClusterName { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterType
        /// </summary>
        [DataMember(Name="ClusterType", EmitDefaultValue=false)]
        public long? ClusterType { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterUuid
        /// </summary>
        [DataMember(Name="ClusterUuid", EmitDefaultValue=false)]
        public string ClusterUuid { get; private set; }

        /// <summary>
        /// Gets or Sets ComputeNodeCount
        /// </summary>
        [DataMember(Name="ComputeNodeCount", EmitDefaultValue=false)]
        public long? ComputeNodeCount { get; private set; }

        /// <summary>
        /// Gets or Sets ConvergedNodeCount
        /// </summary>
        [DataMember(Name="ConvergedNodeCount", EmitDefaultValue=false)]
        public long? ConvergedNodeCount { get; private set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name="DeviceId", EmitDefaultValue=false)]
        public string DeviceId { get; private set; }

        /// <summary>
        /// Gets or Sets FltAggr
        /// </summary>
        [DataMember(Name="FltAggr", EmitDefaultValue=false)]
        public long? FltAggr { get; private set; }

        /// <summary>
        /// Gets or Sets HxVersion
        /// </summary>
        [DataMember(Name="HxVersion", EmitDefaultValue=false)]
        public string HxVersion { get; private set; }


        /// <summary>
        /// Gets or Sets HypervisorVersion
        /// </summary>
        [DataMember(Name="HypervisorVersion", EmitDefaultValue=false)]
        public string HypervisorVersion { get; private set; }

        /// <summary>
        /// Gets or Sets Nodes
        /// </summary>
        [DataMember(Name="Nodes", EmitDefaultValue=false)]
        public List<HyperflexNodeRef> Nodes { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredDevice
        /// </summary>
        [DataMember(Name="RegisteredDevice", EmitDefaultValue=false)]
        public AssetDeviceRegistrationRef RegisteredDevice { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name="Summary", EmitDefaultValue=false)]
        public HyperflexSummary Summary { get; set; }

        /// <summary>
        /// Gets or Sets VmCount
        /// </summary>
        [DataMember(Name="VmCount", EmitDefaultValue=false)]
        public long? VmCount { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HyperflexCluster {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  Alarm: ").Append(Alarm).Append("\n");
            sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
            sb.Append("  ClusterType: ").Append(ClusterType).Append("\n");
            sb.Append("  ClusterUuid: ").Append(ClusterUuid).Append("\n");
            sb.Append("  ComputeNodeCount: ").Append(ComputeNodeCount).Append("\n");
            sb.Append("  ConvergedNodeCount: ").Append(ConvergedNodeCount).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  FltAggr: ").Append(FltAggr).Append("\n");
            sb.Append("  HxVersion: ").Append(HxVersion).Append("\n");
            sb.Append("  HypervisorType: ").Append(HypervisorType).Append("\n");
            sb.Append("  HypervisorVersion: ").Append(HypervisorVersion).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  RegisteredDevice: ").Append(RegisteredDevice).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  VmCount: ").Append(VmCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HyperflexCluster);
        }

        /// <summary>
        /// Returns true if HyperflexCluster instances are equal
        /// </summary>
        /// <param name="other">Instance of HyperflexCluster to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HyperflexCluster other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.Alarm == other.Alarm ||
                    this.Alarm != null &&
                    this.Alarm.SequenceEqual(other.Alarm)
                ) && 
                (
                    this.ClusterName == other.ClusterName ||
                    this.ClusterName != null &&
                    this.ClusterName.Equals(other.ClusterName)
                ) && 
                (
                    this.ClusterType == other.ClusterType ||
                    this.ClusterType != null &&
                    this.ClusterType.Equals(other.ClusterType)
                ) && 
                (
                    this.ClusterUuid == other.ClusterUuid ||
                    this.ClusterUuid != null &&
                    this.ClusterUuid.Equals(other.ClusterUuid)
                ) && 
                (
                    this.ComputeNodeCount == other.ComputeNodeCount ||
                    this.ComputeNodeCount != null &&
                    this.ComputeNodeCount.Equals(other.ComputeNodeCount)
                ) && 
                (
                    this.ConvergedNodeCount == other.ConvergedNodeCount ||
                    this.ConvergedNodeCount != null &&
                    this.ConvergedNodeCount.Equals(other.ConvergedNodeCount)
                ) && 
                (
                    this.DeviceId == other.DeviceId ||
                    this.DeviceId != null &&
                    this.DeviceId.Equals(other.DeviceId)
                ) && 
                (
                    this.FltAggr == other.FltAggr ||
                    this.FltAggr != null &&
                    this.FltAggr.Equals(other.FltAggr)
                ) && 
                (
                    this.HxVersion == other.HxVersion ||
                    this.HxVersion != null &&
                    this.HxVersion.Equals(other.HxVersion)
                ) && 
                (
                    this.HypervisorType == other.HypervisorType ||
                    this.HypervisorType != null &&
                    this.HypervisorType.Equals(other.HypervisorType)
                ) && 
                (
                    this.HypervisorVersion == other.HypervisorVersion ||
                    this.HypervisorVersion != null &&
                    this.HypervisorVersion.Equals(other.HypervisorVersion)
                ) && 
                (
                    this.Nodes == other.Nodes ||
                    this.Nodes != null &&
                    this.Nodes.SequenceEqual(other.Nodes)
                ) && 
                (
                    this.RegisteredDevice == other.RegisteredDevice ||
                    this.RegisteredDevice != null &&
                    this.RegisteredDevice.Equals(other.RegisteredDevice)
                ) && 
                (
                    this.Summary == other.Summary ||
                    this.Summary != null &&
                    this.Summary.Equals(other.Summary)
                ) && 
                (
                    this.VmCount == other.VmCount ||
                    this.VmCount != null &&
                    this.VmCount.Equals(other.VmCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.Alarm != null)
                    hash = hash * 59 + this.Alarm.GetHashCode();
                if (this.ClusterName != null)
                    hash = hash * 59 + this.ClusterName.GetHashCode();
                if (this.ClusterType != null)
                    hash = hash * 59 + this.ClusterType.GetHashCode();
                if (this.ClusterUuid != null)
                    hash = hash * 59 + this.ClusterUuid.GetHashCode();
                if (this.ComputeNodeCount != null)
                    hash = hash * 59 + this.ComputeNodeCount.GetHashCode();
                if (this.ConvergedNodeCount != null)
                    hash = hash * 59 + this.ConvergedNodeCount.GetHashCode();
                if (this.DeviceId != null)
                    hash = hash * 59 + this.DeviceId.GetHashCode();
                if (this.FltAggr != null)
                    hash = hash * 59 + this.FltAggr.GetHashCode();
                if (this.HxVersion != null)
                    hash = hash * 59 + this.HxVersion.GetHashCode();
                if (this.HypervisorType != null)
                    hash = hash * 59 + this.HypervisorType.GetHashCode();
                if (this.HypervisorVersion != null)
                    hash = hash * 59 + this.HypervisorVersion.GetHashCode();
                if (this.Nodes != null)
                    hash = hash * 59 + this.Nodes.GetHashCode();
                if (this.RegisteredDevice != null)
                    hash = hash * 59 + this.RegisteredDevice.GetHashCode();
                if (this.Summary != null)
                    hash = hash * 59 + this.Summary.GetHashCode();
                if (this.VmCount != null)
                    hash = hash * 59 + this.VmCount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
