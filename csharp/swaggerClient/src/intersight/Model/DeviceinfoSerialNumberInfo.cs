/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// DeviceinfoSerialNumberInfo
    /// </summary>
    [DataContract]
    public partial class DeviceinfoSerialNumberInfo :  IEquatable<DeviceinfoSerialNumberInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceinfoSerialNumberInfo" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="RegisteredDevice">RegisteredDevice.</param>
        public DeviceinfoSerialNumberInfo(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), AssetDeviceRegistrationRef RegisteredDevice = default(AssetDeviceRegistrationRef))
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.RegisteredDevice = RegisteredDevice;
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// Gets or Sets CoveredProductLineEndDate
        /// </summary>
        [DataMember(Name="CoveredProductLineEndDate", EmitDefaultValue=false)]
        public string CoveredProductLineEndDate { get; private set; }

        /// <summary>
        /// Gets or Sets CustomerAddress
        /// </summary>
        [DataMember(Name="CustomerAddress", EmitDefaultValue=false)]
        public string CustomerAddress { get; private set; }

        /// <summary>
        /// Gets or Sets CustomerCity
        /// </summary>
        [DataMember(Name="CustomerCity", EmitDefaultValue=false)]
        public string CustomerCity { get; private set; }

        /// <summary>
        /// Gets or Sets CustomerCountry
        /// </summary>
        [DataMember(Name="CustomerCountry", EmitDefaultValue=false)]
        public string CustomerCountry { get; private set; }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [DataMember(Name="CustomerName", EmitDefaultValue=false)]
        public string CustomerName { get; private set; }

        /// <summary>
        /// Gets or Sets CustomerProvince
        /// </summary>
        [DataMember(Name="CustomerProvince", EmitDefaultValue=false)]
        public string CustomerProvince { get; private set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name="IsValid", EmitDefaultValue=false)]
        public bool? IsValid { get; private set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; private set; }

        /// <summary>
        /// Gets or Sets OrderablePid
        /// </summary>
        [DataMember(Name="OrderablePid", EmitDefaultValue=false)]
        public string OrderablePid { get; private set; }

        /// <summary>
        /// Gets or Sets RegisteredDevice
        /// </summary>
        [DataMember(Name="RegisteredDevice", EmitDefaultValue=false)]
        public AssetDeviceRegistrationRef RegisteredDevice { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="SerialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; private set; }

        /// <summary>
        /// Gets or Sets ServiceContractNumber
        /// </summary>
        [DataMember(Name="ServiceContractNumber", EmitDefaultValue=false)]
        public string ServiceContractNumber { get; private set; }

        /// <summary>
        /// Gets or Sets ServiceLineDescr
        /// </summary>
        [DataMember(Name="ServiceLineDescr", EmitDefaultValue=false)]
        public string ServiceLineDescr { get; private set; }

        /// <summary>
        /// Gets or Sets WarrantyEndDate
        /// </summary>
        [DataMember(Name="WarrantyEndDate", EmitDefaultValue=false)]
        public string WarrantyEndDate { get; private set; }

        /// <summary>
        /// Gets or Sets WarrantyType
        /// </summary>
        [DataMember(Name="WarrantyType", EmitDefaultValue=false)]
        public string WarrantyType { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceinfoSerialNumberInfo {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  CoveredProductLineEndDate: ").Append(CoveredProductLineEndDate).Append("\n");
            sb.Append("  CustomerAddress: ").Append(CustomerAddress).Append("\n");
            sb.Append("  CustomerCity: ").Append(CustomerCity).Append("\n");
            sb.Append("  CustomerCountry: ").Append(CustomerCountry).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  CustomerProvince: ").Append(CustomerProvince).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  OrderablePid: ").Append(OrderablePid).Append("\n");
            sb.Append("  RegisteredDevice: ").Append(RegisteredDevice).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  ServiceContractNumber: ").Append(ServiceContractNumber).Append("\n");
            sb.Append("  ServiceLineDescr: ").Append(ServiceLineDescr).Append("\n");
            sb.Append("  WarrantyEndDate: ").Append(WarrantyEndDate).Append("\n");
            sb.Append("  WarrantyType: ").Append(WarrantyType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeviceinfoSerialNumberInfo);
        }

        /// <summary>
        /// Returns true if DeviceinfoSerialNumberInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceinfoSerialNumberInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceinfoSerialNumberInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.CoveredProductLineEndDate == other.CoveredProductLineEndDate ||
                    this.CoveredProductLineEndDate != null &&
                    this.CoveredProductLineEndDate.Equals(other.CoveredProductLineEndDate)
                ) && 
                (
                    this.CustomerAddress == other.CustomerAddress ||
                    this.CustomerAddress != null &&
                    this.CustomerAddress.Equals(other.CustomerAddress)
                ) && 
                (
                    this.CustomerCity == other.CustomerCity ||
                    this.CustomerCity != null &&
                    this.CustomerCity.Equals(other.CustomerCity)
                ) && 
                (
                    this.CustomerCountry == other.CustomerCountry ||
                    this.CustomerCountry != null &&
                    this.CustomerCountry.Equals(other.CustomerCountry)
                ) && 
                (
                    this.CustomerName == other.CustomerName ||
                    this.CustomerName != null &&
                    this.CustomerName.Equals(other.CustomerName)
                ) && 
                (
                    this.CustomerProvince == other.CustomerProvince ||
                    this.CustomerProvince != null &&
                    this.CustomerProvince.Equals(other.CustomerProvince)
                ) && 
                (
                    this.IsValid == other.IsValid ||
                    this.IsValid != null &&
                    this.IsValid.Equals(other.IsValid)
                ) && 
                (
                    this.ItemDescription == other.ItemDescription ||
                    this.ItemDescription != null &&
                    this.ItemDescription.Equals(other.ItemDescription)
                ) && 
                (
                    this.OrderablePid == other.OrderablePid ||
                    this.OrderablePid != null &&
                    this.OrderablePid.Equals(other.OrderablePid)
                ) && 
                (
                    this.RegisteredDevice == other.RegisteredDevice ||
                    this.RegisteredDevice != null &&
                    this.RegisteredDevice.Equals(other.RegisteredDevice)
                ) && 
                (
                    this.SerialNumber == other.SerialNumber ||
                    this.SerialNumber != null &&
                    this.SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    this.ServiceContractNumber == other.ServiceContractNumber ||
                    this.ServiceContractNumber != null &&
                    this.ServiceContractNumber.Equals(other.ServiceContractNumber)
                ) && 
                (
                    this.ServiceLineDescr == other.ServiceLineDescr ||
                    this.ServiceLineDescr != null &&
                    this.ServiceLineDescr.Equals(other.ServiceLineDescr)
                ) && 
                (
                    this.WarrantyEndDate == other.WarrantyEndDate ||
                    this.WarrantyEndDate != null &&
                    this.WarrantyEndDate.Equals(other.WarrantyEndDate)
                ) && 
                (
                    this.WarrantyType == other.WarrantyType ||
                    this.WarrantyType != null &&
                    this.WarrantyType.Equals(other.WarrantyType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.CoveredProductLineEndDate != null)
                    hash = hash * 59 + this.CoveredProductLineEndDate.GetHashCode();
                if (this.CustomerAddress != null)
                    hash = hash * 59 + this.CustomerAddress.GetHashCode();
                if (this.CustomerCity != null)
                    hash = hash * 59 + this.CustomerCity.GetHashCode();
                if (this.CustomerCountry != null)
                    hash = hash * 59 + this.CustomerCountry.GetHashCode();
                if (this.CustomerName != null)
                    hash = hash * 59 + this.CustomerName.GetHashCode();
                if (this.CustomerProvince != null)
                    hash = hash * 59 + this.CustomerProvince.GetHashCode();
                if (this.IsValid != null)
                    hash = hash * 59 + this.IsValid.GetHashCode();
                if (this.ItemDescription != null)
                    hash = hash * 59 + this.ItemDescription.GetHashCode();
                if (this.OrderablePid != null)
                    hash = hash * 59 + this.OrderablePid.GetHashCode();
                if (this.RegisteredDevice != null)
                    hash = hash * 59 + this.RegisteredDevice.GetHashCode();
                if (this.SerialNumber != null)
                    hash = hash * 59 + this.SerialNumber.GetHashCode();
                if (this.ServiceContractNumber != null)
                    hash = hash * 59 + this.ServiceContractNumber.GetHashCode();
                if (this.ServiceLineDescr != null)
                    hash = hash * 59 + this.ServiceLineDescr.GetHashCode();
                if (this.WarrantyEndDate != null)
                    hash = hash * 59 + this.WarrantyEndDate.GetHashCode();
                if (this.WarrantyType != null)
                    hash = hash * 59 + this.WarrantyType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
