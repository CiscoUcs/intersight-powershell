/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// Policy for setting BIOS tokens on the endpoint 
    /// </summary>
    [DataContract]
    public partial class BiosPolicy :  IEquatable<BiosPolicy>, IValidatableObject
    {
        /// <summary>
        /// BIOS Token for setting Adjacent Cache Line Prefetcher configuration  
        /// </summary>
        /// <value>BIOS Token for setting Adjacent Cache Line Prefetcher configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdjacentCacheLinePrefetchEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting All USB Devices configuration  
        /// </summary>
        /// <value>BIOS Token for setting All USB Devices configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllUsbDevicesEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Altitude configuration  
        /// </summary>
        /// <value>BIOS Token for setting Altitude configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AltitudeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _1500m for "1500-m"
            /// </summary>
            [EnumMember(Value = "1500-m")]
            _1500m,
            
            /// <summary>
            /// Enum _300m for "300-m"
            /// </summary>
            [EnumMember(Value = "300-m")]
            _300m,
            
            /// <summary>
            /// Enum _3000m for "3000-m"
            /// </summary>
            [EnumMember(Value = "3000-m")]
            _3000m,
            
            /// <summary>
            /// Enum _900m for "900-m"
            /// </summary>
            [EnumMember(Value = "900-m")]
            _900m,
            
            /// <summary>
            /// Enum Auto for "auto"
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto
        }

        /// <summary>
        /// BIOS Token for setting ASPM Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting ASPM Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AspmSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum ForceL0s for "Force L0s"
            /// </summary>
            [EnumMember(Value = "Force L0s")]
            ForceL0s,
            
            /// <summary>
            /// Enum L1Only for "L1 Only"
            /// </summary>
            [EnumMember(Value = "L1 Only")]
            L1Only
        }

        /// <summary>
        /// BIOS Token for setting Assert NMI on PERR configuration  
        /// </summary>
        /// <value>BIOS Token for setting Assert NMI on PERR configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssertNmiOnPerrEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Assert NMI on SERR configuration  
        /// </summary>
        /// <value>BIOS Token for setting Assert NMI on SERR configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssertNmiOnSerrEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Autonomous Core C-state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Autonomous Core C-state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AutoCcStateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting CPU Autonomous Cstate configuration  
        /// </summary>
        /// <value>BIOS Token for setting CPU Autonomous Cstate configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AutonumousCstateEnableEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Baud rate configuration  
        /// </summary>
        /// <value>BIOS Token for setting Baud rate configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BaudRateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _115200 for "115200"
            /// </summary>
            [EnumMember(Value = "115200")]
            _115200,
            
            /// <summary>
            /// Enum _19200 for "19200"
            /// </summary>
            [EnumMember(Value = "19200")]
            _19200,
            
            /// <summary>
            /// Enum _38400 for "38400"
            /// </summary>
            [EnumMember(Value = "38400")]
            _38400,
            
            /// <summary>
            /// Enum _57600 for "57600"
            /// </summary>
            [EnumMember(Value = "57600")]
            _57600,
            
            /// <summary>
            /// Enum _9600 for "9600"
            /// </summary>
            [EnumMember(Value = "9600")]
            _9600
        }

        /// <summary>
        /// BIOS Token for setting BME DMA Mitigation configuration  
        /// </summary>
        /// <value>BIOS Token for setting BME DMA Mitigation configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BmeDmaMitigationEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Number of Retries configuration  
        /// </summary>
        /// <value>BIOS Token for setting Number of Retries configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BootOptionNumRetryEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _13 for "13"
            /// </summary>
            [EnumMember(Value = "13")]
            _13,
            
            /// <summary>
            /// Enum _5 for "5"
            /// </summary>
            [EnumMember(Value = "5")]
            _5,
            
            /// <summary>
            /// Enum Infinite for "Infinite"
            /// </summary>
            [EnumMember(Value = "Infinite")]
            Infinite
        }

        /// <summary>
        /// BIOS Token for setting Cool Down Time (sec) configuration  
        /// </summary>
        /// <value>BIOS Token for setting Cool Down Time (sec) configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BootOptionReCoolDownEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _15 for "15"
            /// </summary>
            [EnumMember(Value = "15")]
            _15,
            
            /// <summary>
            /// Enum _45 for "45"
            /// </summary>
            [EnumMember(Value = "45")]
            _45,
            
            /// <summary>
            /// Enum _90 for "90"
            /// </summary>
            [EnumMember(Value = "90")]
            _90
        }

        /// <summary>
        /// BIOS Token for setting Boot option retry configuration  
        /// </summary>
        /// <value>BIOS Token for setting Boot option retry configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BootOptionRetryEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Boot Performance Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting Boot Performance Mode configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BootPerformanceModeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum MaxEfficient for "Max Efficient"
            /// </summary>
            [EnumMember(Value = "Max Efficient")]
            MaxEfficient,
            
            /// <summary>
            /// Enum MaxPerformance for "Max Performance"
            /// </summary>
            [EnumMember(Value = "Max Performance")]
            MaxPerformance,
            
            /// <summary>
            /// Enum SetbyIntelNM for "Set by Intel NM"
            /// </summary>
            [EnumMember(Value = "Set by Intel NM")]
            SetbyIntelNM
        }

        /// <summary>
        /// BIOS Token for setting Core Performance Boost configuration  
        /// </summary>
        /// <value>BIOS Token for setting Core Performance Boost configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsCmnCpuCpbEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Downcore control configuration  
        /// </summary>
        /// <value>BIOS Token for setting Downcore control configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsCmnCpuGenDowncoreCtrlEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum FOUR22 for "FOUR (2 + 2)"
            /// </summary>
            [EnumMember(Value = "FOUR (2 + 2)")]
            FOUR22,
            
            /// <summary>
            /// Enum FOUR40 for "FOUR (4 + 0)"
            /// </summary>
            [EnumMember(Value = "FOUR (4 + 0)")]
            FOUR40,
            
            /// <summary>
            /// Enum SIX33 for "SIX (3 + 3)"
            /// </summary>
            [EnumMember(Value = "SIX (3 + 3)")]
            SIX33,
            
            /// <summary>
            /// Enum THREE30 for "THREE (3 + 0)"
            /// </summary>
            [EnumMember(Value = "THREE (3 + 0)")]
            THREE30,
            
            /// <summary>
            /// Enum TWO11 for "TWO (1 + 1)"
            /// </summary>
            [EnumMember(Value = "TWO (1 + 1)")]
            TWO11,
            
            /// <summary>
            /// Enum TWO20 for "TWO (2 + 0)"
            /// </summary>
            [EnumMember(Value = "TWO (2 + 0)")]
            TWO20
        }

        /// <summary>
        /// BIOS Token for setting Global C-state Control configuration  
        /// </summary>
        /// <value>BIOS Token for setting Global C-state Control configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsCmnCpuGlobalCstateCtrlEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled
        }

        /// <summary>
        /// BIOS Token for setting L1 Stream HW Prefetcher configuration  
        /// </summary>
        /// <value>BIOS Token for setting L1 Stream HW Prefetcher configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsCmnCpuL1streamHwPrefetcherEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled
        }

        /// <summary>
        /// BIOS Token for setting L2 Stream HW Prefetcher configuration  
        /// </summary>
        /// <value>BIOS Token for setting L2 Stream HW Prefetcher configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsCmnCpuL2streamHwPrefetcherEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled
        }

        /// <summary>
        /// BIOS Token for setting Determinism Slider configuration  
        /// </summary>
        /// <value>BIOS Token for setting Determinism Slider configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsCmnDeterminismSliderEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Performance for "Performance"
            /// </summary>
            [EnumMember(Value = "Performance")]
            Performance,
            
            /// <summary>
            /// Enum Power for "Power"
            /// </summary>
            [EnumMember(Value = "Power")]
            Power
        }

        /// <summary>
        /// BIOS Token for setting IOMMU configuration  
        /// </summary>
        /// <value>BIOS Token for setting IOMMU configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsCmnGnbNbIommuEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled
        }

        /// <summary>
        /// BIOS Token for setting Bank Group Swap configuration  
        /// </summary>
        /// <value>BIOS Token for setting Bank Group Swap configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsCmnMemCtrlBankGroupSwapDdr4Enum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled
        }

        /// <summary>
        /// BIOS Token for setting Chipselect Interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting Chipselect Interleaving configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsCmnMemMapBankInterleaveDdr4Enum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting cTDP Control configuration  
        /// </summary>
        /// <value>BIOS Token for setting cTDP Control configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsCmncTdpCtlEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Manual for "Manual"
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual
        }

        /// <summary>
        /// BIOS Token for setting Memory interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting Memory interleaving configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsDfCmnMemIntlvEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Channel for "Channel"
            /// </summary>
            [EnumMember(Value = "Channel")]
            Channel,
            
            /// <summary>
            /// Enum Die for "Die"
            /// </summary>
            [EnumMember(Value = "Die")]
            Die,
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Socket for "Socket"
            /// </summary>
            [EnumMember(Value = "Socket")]
            Socket
        }

        /// <summary>
        /// BIOS Token for setting Memory interleaving size configuration  
        /// </summary>
        /// <value>BIOS Token for setting Memory interleaving size configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CbsDfCmnMemIntlvSizeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _1KB for "1 KB"
            /// </summary>
            [EnumMember(Value = "1 KB")]
            _1KB,
            
            /// <summary>
            /// Enum _2KB for "2 KB"
            /// </summary>
            [EnumMember(Value = "2 KB")]
            _2KB,
            
            /// <summary>
            /// Enum _256Bytes for "256 Bytes"
            /// </summary>
            [EnumMember(Value = "256 Bytes")]
            _256Bytes,
            
            /// <summary>
            /// Enum _512Bytes for "512 Bytes"
            /// </summary>
            [EnumMember(Value = "512 Bytes")]
            _512Bytes,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto
        }

        /// <summary>
        /// BIOS Token for setting Consistent Device Naming configuration  
        /// </summary>
        /// <value>BIOS Token for setting Consistent Device Naming configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CdnEnableEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting CDN Support for LOM configuration  
        /// </summary>
        /// <value>BIOS Token for setting CDN Support for LOM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CdnSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LOMsOnly for "LOMs Only"
            /// </summary>
            [EnumMember(Value = "LOMs Only")]
            LOMsOnly
        }

        /// <summary>
        /// BIOS Token for setting Channel Interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting Channel Interleaving configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelInterLeaveEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _1way for "1-way"
            /// </summary>
            [EnumMember(Value = "1-way")]
            _1way,
            
            /// <summary>
            /// Enum _2way for "2-way"
            /// </summary>
            [EnumMember(Value = "2-way")]
            _2way,
            
            /// <summary>
            /// Enum _3way for "3-way"
            /// </summary>
            [EnumMember(Value = "3-way")]
            _3way,
            
            /// <summary>
            /// Enum _4way for "4-way"
            /// </summary>
            [EnumMember(Value = "4-way")]
            _4way,
            
            /// <summary>
            /// Enum Auto for "auto"
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto
        }

        /// <summary>
        /// BIOS Token for setting CKE Low Policy configuration  
        /// </summary>
        /// <value>BIOS Token for setting CKE Low Policy configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CkeLowPolicyEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "auto"
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Fast for "fast"
            /// </summary>
            [EnumMember(Value = "fast")]
            Fast,
            
            /// <summary>
            /// Enum Slow for "slow"
            /// </summary>
            [EnumMember(Value = "slow")]
            Slow
        }

        /// <summary>
        /// BIOS Token for setting Closed Loop Therm Throt configuration  
        /// </summary>
        /// <value>BIOS Token for setting Closed Loop Therm Throt configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClosedLoopThermThrotlEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Processor CMCI configuration  
        /// </summary>
        /// <value>BIOS Token for setting Processor CMCI configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CmciEnableEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Config TDP configuration  
        /// </summary>
        /// <value>BIOS Token for setting Config TDP configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConfigTdpEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Console redirection configuration  
        /// </summary>
        /// <value>BIOS Token for setting Console redirection configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConsoleRedirectionEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Com0 for "com-0"
            /// </summary>
            [EnumMember(Value = "com-0")]
            Com0,
            
            /// <summary>
            /// Enum Com1 for "com-1"
            /// </summary>
            [EnumMember(Value = "com-1")]
            Com1,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Serialporta for "serial-port-a"
            /// </summary>
            [EnumMember(Value = "serial-port-a")]
            Serialporta
        }

        /// <summary>
        /// BIOS Token for setting Core MultiProcessing configuration  
        /// </summary>
        /// <value>BIOS Token for setting Core MultiProcessing configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CoreMultiProcessingEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _10 for "10"
            /// </summary>
            [EnumMember(Value = "10")]
            _10,
            
            /// <summary>
            /// Enum _11 for "11"
            /// </summary>
            [EnumMember(Value = "11")]
            _11,
            
            /// <summary>
            /// Enum _12 for "12"
            /// </summary>
            [EnumMember(Value = "12")]
            _12,
            
            /// <summary>
            /// Enum _13 for "13"
            /// </summary>
            [EnumMember(Value = "13")]
            _13,
            
            /// <summary>
            /// Enum _14 for "14"
            /// </summary>
            [EnumMember(Value = "14")]
            _14,
            
            /// <summary>
            /// Enum _15 for "15"
            /// </summary>
            [EnumMember(Value = "15")]
            _15,
            
            /// <summary>
            /// Enum _16 for "16"
            /// </summary>
            [EnumMember(Value = "16")]
            _16,
            
            /// <summary>
            /// Enum _17 for "17"
            /// </summary>
            [EnumMember(Value = "17")]
            _17,
            
            /// <summary>
            /// Enum _18 for "18"
            /// </summary>
            [EnumMember(Value = "18")]
            _18,
            
            /// <summary>
            /// Enum _19 for "19"
            /// </summary>
            [EnumMember(Value = "19")]
            _19,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _20 for "20"
            /// </summary>
            [EnumMember(Value = "20")]
            _20,
            
            /// <summary>
            /// Enum _21 for "21"
            /// </summary>
            [EnumMember(Value = "21")]
            _21,
            
            /// <summary>
            /// Enum _22 for "22"
            /// </summary>
            [EnumMember(Value = "22")]
            _22,
            
            /// <summary>
            /// Enum _23 for "23"
            /// </summary>
            [EnumMember(Value = "23")]
            _23,
            
            /// <summary>
            /// Enum _24 for "24"
            /// </summary>
            [EnumMember(Value = "24")]
            _24,
            
            /// <summary>
            /// Enum _25 for "25"
            /// </summary>
            [EnumMember(Value = "25")]
            _25,
            
            /// <summary>
            /// Enum _26 for "26"
            /// </summary>
            [EnumMember(Value = "26")]
            _26,
            
            /// <summary>
            /// Enum _27 for "27"
            /// </summary>
            [EnumMember(Value = "27")]
            _27,
            
            /// <summary>
            /// Enum _28 for "28"
            /// </summary>
            [EnumMember(Value = "28")]
            _28,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4,
            
            /// <summary>
            /// Enum _5 for "5"
            /// </summary>
            [EnumMember(Value = "5")]
            _5,
            
            /// <summary>
            /// Enum _6 for "6"
            /// </summary>
            [EnumMember(Value = "6")]
            _6,
            
            /// <summary>
            /// Enum _7 for "7"
            /// </summary>
            [EnumMember(Value = "7")]
            _7,
            
            /// <summary>
            /// Enum _8 for "8"
            /// </summary>
            [EnumMember(Value = "8")]
            _8,
            
            /// <summary>
            /// Enum _9 for "9"
            /// </summary>
            [EnumMember(Value = "9")]
            _9,
            
            /// <summary>
            /// Enum All for "all"
            /// </summary>
            [EnumMember(Value = "all")]
            All
        }

        /// <summary>
        /// BIOS Token for setting Energy Performance configuration  
        /// </summary>
        /// <value>BIOS Token for setting Energy Performance configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CpuEnergyPerformanceEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Balancedenergy for "balanced-energy"
            /// </summary>
            [EnumMember(Value = "balanced-energy")]
            Balancedenergy,
            
            /// <summary>
            /// Enum Balancedperformance for "balanced-performance"
            /// </summary>
            [EnumMember(Value = "balanced-performance")]
            Balancedperformance,
            
            /// <summary>
            /// Enum Balancedpower for "balanced-power"
            /// </summary>
            [EnumMember(Value = "balanced-power")]
            Balancedpower,
            
            /// <summary>
            /// Enum Energyefficient for "energy-efficient"
            /// </summary>
            [EnumMember(Value = "energy-efficient")]
            Energyefficient,
            
            /// <summary>
            /// Enum Performance for "performance"
            /// </summary>
            [EnumMember(Value = "performance")]
            Performance,
            
            /// <summary>
            /// Enum Power for "power"
            /// </summary>
            [EnumMember(Value = "power")]
            Power
        }

        /// <summary>
        /// BIOS Token for setting Frequency Floor Override configuration  
        /// </summary>
        /// <value>BIOS Token for setting Frequency Floor Override configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CpuFrequencyFloorEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting CPU Performance configuration  
        /// </summary>
        /// <value>BIOS Token for setting CPU Performance configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CpuPerformanceEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Custom for "custom"
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom,
            
            /// <summary>
            /// Enum Enterprise for "enterprise"
            /// </summary>
            [EnumMember(Value = "enterprise")]
            Enterprise,
            
            /// <summary>
            /// Enum Highthroughput for "high-throughput"
            /// </summary>
            [EnumMember(Value = "high-throughput")]
            Highthroughput,
            
            /// <summary>
            /// Enum Hpc for "hpc"
            /// </summary>
            [EnumMember(Value = "hpc")]
            Hpc
        }

        /// <summary>
        /// BIOS Token for setting Power Technology configuration  
        /// </summary>
        /// <value>BIOS Token for setting Power Technology configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CpuPowerManagementEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Custom for "custom"
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Energyefficient for "energy-efficient"
            /// </summary>
            [EnumMember(Value = "energy-efficient")]
            Energyefficient,
            
            /// <summary>
            /// Enum Performance for "performance"
            /// </summary>
            [EnumMember(Value = "performance")]
            Performance
        }

        /// <summary>
        /// BIOS Token for setting Demand Scrub configuration  
        /// </summary>
        /// <value>BIOS Token for setting Demand Scrub configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DemandScrubEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Direct Cache Access Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Direct Cache Access Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectCacheAccessEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "auto"
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled
        }

        /// <summary>
        /// BIOS Token for setting DRAM Clock Throttling configuration  
        /// </summary>
        /// <value>BIOS Token for setting DRAM Clock Throttling configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DramClockThrottlingEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Balanced for "Balanced"
            /// </summary>
            [EnumMember(Value = "Balanced")]
            Balanced,
            
            /// <summary>
            /// Enum EnergyEfficient for "Energy Efficient"
            /// </summary>
            [EnumMember(Value = "Energy Efficient")]
            EnergyEfficient,
            
            /// <summary>
            /// Enum Performance for "Performance"
            /// </summary>
            [EnumMember(Value = "Performance")]
            Performance
        }

        /// <summary>
        /// BIOS Token for setting DRAM Refresh Rate configuration  
        /// </summary>
        /// <value>BIOS Token for setting DRAM Refresh Rate configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DramRefreshRateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _1x for "1x"
            /// </summary>
            [EnumMember(Value = "1x")]
            _1x,
            
            /// <summary>
            /// Enum _2x for "2x"
            /// </summary>
            [EnumMember(Value = "2x")]
            _2x,
            
            /// <summary>
            /// Enum _3x for "3x"
            /// </summary>
            [EnumMember(Value = "3x")]
            _3x,
            
            /// <summary>
            /// Enum _4x for "4x"
            /// </summary>
            [EnumMember(Value = "4x")]
            _4x,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto
        }

        /// <summary>
        /// BIOS Token for setting Energy Efficient Turbo configuration  
        /// </summary>
        /// <value>BIOS Token for setting Energy Efficient Turbo configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnergyEfficientTurboEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Energy Performance Tuning configuration  
        /// </summary>
        /// <value>BIOS Token for setting Energy Performance Tuning configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EngPerfTuningEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum BIOS for "BIOS"
            /// </summary>
            [EnumMember(Value = "BIOS")]
            BIOS,
            
            /// <summary>
            /// Enum OS for "OS"
            /// </summary>
            [EnumMember(Value = "OS")]
            OS
        }

        /// <summary>
        /// BIOS Token for setting Enhanced Intel Speedstep(R) Technology configuration  
        /// </summary>
        /// <value>BIOS Token for setting Enhanced Intel Speedstep(R) Technology configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnhancedIntelSpeedStepTechEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting EPP Profile configuration  
        /// </summary>
        /// <value>BIOS Token for setting EPP Profile configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EppProfileEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum BalancedPerformance for "Balanced Performance"
            /// </summary>
            [EnumMember(Value = "Balanced Performance")]
            BalancedPerformance,
            
            /// <summary>
            /// Enum BalancedPower for "Balanced Power"
            /// </summary>
            [EnumMember(Value = "Balanced Power")]
            BalancedPower,
            
            /// <summary>
            /// Enum Performance for "Performance"
            /// </summary>
            [EnumMember(Value = "Performance")]
            Performance,
            
            /// <summary>
            /// Enum Power for "Power"
            /// </summary>
            [EnumMember(Value = "Power")]
            Power
        }

        /// <summary>
        /// BIOS Token for setting Execute Disable Bit configuration  
        /// </summary>
        /// <value>BIOS Token for setting Execute Disable Bit configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExecuteDisableBitEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Local X2 Apic configuration  
        /// </summary>
        /// <value>BIOS Token for setting Local X2 Apic configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExtendedApicEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum X2APIC for "X2APIC"
            /// </summary>
            [EnumMember(Value = "X2APIC")]
            X2APIC,
            
            /// <summary>
            /// Enum XAPIC for "XAPIC"
            /// </summary>
            [EnumMember(Value = "XAPIC")]
            XAPIC
        }

        /// <summary>
        /// BIOS Token for setting Flow Control configuration  
        /// </summary>
        /// <value>BIOS Token for setting Flow Control configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlowControlEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Rtscts for "rts-cts"
            /// </summary>
            [EnumMember(Value = "rts-cts")]
            Rtscts
        }

        /// <summary>
        /// BIOS Token for setting FRB-2 Timer configuration  
        /// </summary>
        /// <value>BIOS Token for setting FRB-2 Timer configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Frb2enableEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Hardware Prefetcher configuration  
        /// </summary>
        /// <value>BIOS Token for setting Hardware Prefetcher configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HardwarePrefetchEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting CPU Hardware Power Management configuration  
        /// </summary>
        /// <value>BIOS Token for setting CPU Hardware Power Management configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HwpmEnableEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum HWPMNativeMode for "HWPM Native Mode"
            /// </summary>
            [EnumMember(Value = "HWPM Native Mode")]
            HWPMNativeMode,
            
            /// <summary>
            /// Enum HWPMOOBMode for "HWPM OOB Mode"
            /// </summary>
            [EnumMember(Value = "HWPM OOB Mode")]
            HWPMOOBMode,
            
            /// <summary>
            /// Enum NATIVEMODE for "NATIVE MODE"
            /// </summary>
            [EnumMember(Value = "NATIVE MODE")]
            NATIVEMODE,
            
            /// <summary>
            /// Enum NativeModewithnoLegacy for "Native Mode with no Legacy"
            /// </summary>
            [EnumMember(Value = "Native Mode with no Legacy")]
            NativeModewithnoLegacy,
            
            /// <summary>
            /// Enum OOBMODE for "OOB MODE"
            /// </summary>
            [EnumMember(Value = "OOB MODE")]
            OOBMODE
        }

        /// <summary>
        /// BIOS Token for setting IMC Interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting IMC Interleaving configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImcInterleaveEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _1wayInterleave for "1-way Interleave"
            /// </summary>
            [EnumMember(Value = "1-way Interleave")]
            _1wayInterleave,
            
            /// <summary>
            /// Enum _2wayInterleave for "2-way Interleave"
            /// </summary>
            [EnumMember(Value = "2-way Interleave")]
            _2wayInterleave,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto
        }

        /// <summary>
        /// BIOS Token for setting Intel HyperThreading Tech configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel HyperThreading Tech configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntelHyperThreadingTechEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Intel Turbo Boost Tech configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel Turbo Boost Tech configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntelTurboBoostTechEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Intel(R) VT configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel(R) VT configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntelVirtualizationTechnologyEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Intel VT for directed IO configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel VT for directed IO configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntelVtForDirectedIoEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Intel(R) VT-d Coherency Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel(R) VT-d Coherency Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntelVtdCoherencySupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Intel(R) VT-d Interrupt Remapping configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel(R) VT-d Interrupt Remapping configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntelVtdInterruptRemappingEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Intel(R) VT-d PassThrough DMA support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel(R) VT-d PassThrough DMA support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntelVtdPassThroughDmaSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Intel VTD ATS support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel VTD ATS support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntelVtdatsSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting IIO Error Enable configuration  
        /// </summary>
        /// <value>BIOS Token for setting IIO Error Enable configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IohErrorEnableEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum No for "No"
            /// </summary>
            [EnumMember(Value = "No")]
            No,
            
            /// <summary>
            /// Enum Yes for "Yes"
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes
        }

        /// <summary>
        /// BIOS Token for setting IOH Resource Allocation configuration  
        /// </summary>
        /// <value>BIOS Token for setting IOH Resource Allocation configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IohResourceEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum IOH024kIOH140k for "IOH0 24k IOH1 40k"
            /// </summary>
            [EnumMember(Value = "IOH0 24k IOH1 40k")]
            IOH024kIOH140k,
            
            /// <summary>
            /// Enum IOH032kIOH132k for "IOH0 32k IOH1 32k"
            /// </summary>
            [EnumMember(Value = "IOH0 32k IOH1 32k")]
            IOH032kIOH132k,
            
            /// <summary>
            /// Enum IOH040kIOH124k for "IOH0 40k IOH1 24k"
            /// </summary>
            [EnumMember(Value = "IOH0 40k IOH1 24k")]
            IOH040kIOH124k,
            
            /// <summary>
            /// Enum IOH048kIOH116k for "IOH0 48k IOH1 16k"
            /// </summary>
            [EnumMember(Value = "IOH0 48k IOH1 16k")]
            IOH048kIOH116k,
            
            /// <summary>
            /// Enum IOH056kIOH18k for "IOH0 56k IOH1 8k"
            /// </summary>
            [EnumMember(Value = "IOH0 56k IOH1 8k")]
            IOH056kIOH18k
        }

        /// <summary>
        /// BIOS Token for setting DCU IP Prefetcher configuration  
        /// </summary>
        /// <value>BIOS Token for setting DCU IP Prefetcher configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IpPrefetchEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting IPV6 PXE Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting IPV6 PXE Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Ipv6pxeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting KTI Prefetch configuration  
        /// </summary>
        /// <value>BIOS Token for setting KTI Prefetch configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KtiPrefetchEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Legacy OS redirection configuration  
        /// </summary>
        /// <value>BIOS Token for setting Legacy OS redirection configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegacyOsRedirectionEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Legacy USB Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Legacy USB Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegacyUsbSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "auto"
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled
        }

        /// <summary>
        /// BIOS Token for setting LLC Prefetch configuration  
        /// </summary>
        /// <value>BIOS Token for setting LLC Prefetch configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LlcPrefetchEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting LOM Port 0 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting LOM Port 0 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LomPort0stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting LOM Port 1 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting LOM Port 1 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LomPort1stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting LOM Port 2 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting LOM Port 2 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LomPort2stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting LOM Port 3 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting LOM Port 3 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LomPort3stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting All Onboard LOM Ports configuration  
        /// </summary>
        /// <value>BIOS Token for setting All Onboard LOM Ports configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LomPortsAllStateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Low Voltage DDR Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting Low Voltage DDR Mode configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LvDdrModeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "auto"
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto,
            
            /// <summary>
            /// Enum Performancemode for "performance-mode"
            /// </summary>
            [EnumMember(Value = "performance-mode")]
            Performancemode,
            
            /// <summary>
            /// Enum Powersavingmode for "power-saving-mode"
            /// </summary>
            [EnumMember(Value = "power-saving-mode")]
            Powersavingmode
        }

        /// <summary>
        /// BIOS Token for setting Make Device Non Bootable configuration  
        /// </summary>
        /// <value>BIOS Token for setting Make Device Non Bootable configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MakeDeviceNonBootableEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Memory Interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting Memory Interleaving configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MemoryInterLeaveEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _1WayNodeInterleave for "1 Way Node Interleave"
            /// </summary>
            [EnumMember(Value = "1 Way Node Interleave")]
            _1WayNodeInterleave,
            
            /// <summary>
            /// Enum _2WayNodeInterleave for "2 Way Node Interleave"
            /// </summary>
            [EnumMember(Value = "2 Way Node Interleave")]
            _2WayNodeInterleave,
            
            /// <summary>
            /// Enum _4WayNodeInterleave for "4 Way Node Interleave"
            /// </summary>
            [EnumMember(Value = "4 Way Node Interleave")]
            _4WayNodeInterleave,
            
            /// <summary>
            /// Enum _8WayNodeInterleave for "8 Way Node Interleave"
            /// </summary>
            [EnumMember(Value = "8 Way Node Interleave")]
            _8WayNodeInterleave,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled
        }

        /// <summary>
        /// BIOS Token for setting Memory mapped IO above 4GB configuration  
        /// </summary>
        /// <value>BIOS Token for setting Memory mapped IO above 4GB configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MemoryMappedIoAbove4gbEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Mirroring Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting Mirroring Mode configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MirroringModeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Intersocket for "inter-socket"
            /// </summary>
            [EnumMember(Value = "inter-socket")]
            Intersocket,
            
            /// <summary>
            /// Enum Intrasocket for "intra-socket"
            /// </summary>
            [EnumMember(Value = "intra-socket")]
            Intrasocket
        }

        /// <summary>
        /// BIOS Token for setting MMCFG BASE configuration  
        /// </summary>
        /// <value>BIOS Token for setting MMCFG BASE configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MmcfgBaseEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _1GB for "1 GB"
            /// </summary>
            [EnumMember(Value = "1 GB")]
            _1GB,
            
            /// <summary>
            /// Enum _2GB for "2 GB"
            /// </summary>
            [EnumMember(Value = "2 GB")]
            _2GB,
            
            /// <summary>
            /// Enum _25GB for "2.5 GB"
            /// </summary>
            [EnumMember(Value = "2.5 GB")]
            _25GB,
            
            /// <summary>
            /// Enum _3GB for "3 GB"
            /// </summary>
            [EnumMember(Value = "3 GB")]
            _3GB,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto
        }

        /// <summary>
        /// BIOS Token for setting NUMA optimized configuration  
        /// </summary>
        /// <value>BIOS Token for setting NUMA optimized configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NumaOptimizedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Onboard 10Gbit LOM configuration  
        /// </summary>
        /// <value>BIOS Token for setting Onboard 10Gbit LOM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Onboard10gbitLomEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Onboard Gbit LOM configuration  
        /// </summary>
        /// <value>BIOS Token for setting Onboard Gbit LOM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OnboardGbitLomEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Onboard SCU Storage Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Onboard SCU Storage Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OnboardScuStorageSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Onboard SCU Storage SW Stack configuration  
        /// </summary>
        /// <value>BIOS Token for setting Onboard SCU Storage SW Stack configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OnboardScuStorageSwStackEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum IntelRSTe for "Intel RSTe"
            /// </summary>
            [EnumMember(Value = "Intel RSTe")]
            IntelRSTe,
            
            /// <summary>
            /// Enum LSISWRAID for "LSI SW RAID"
            /// </summary>
            [EnumMember(Value = "LSI SW RAID")]
            LSISWRAID
        }

        /// <summary>
        /// BIOS Token for setting OS Boot Watchdog Timer configuration  
        /// </summary>
        /// <value>BIOS Token for setting OS Boot Watchdog Timer configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OsBootWatchdogTimerEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting OS Boot Watchdog Timer Policy configuration  
        /// </summary>
        /// <value>BIOS Token for setting OS Boot Watchdog Timer Policy configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OsBootWatchdogTimerPolicyEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Donothing for "do-nothing"
            /// </summary>
            [EnumMember(Value = "do-nothing")]
            Donothing,
            
            /// <summary>
            /// Enum Poweroff for "power-off"
            /// </summary>
            [EnumMember(Value = "power-off")]
            Poweroff,
            
            /// <summary>
            /// Enum Reset for "reset"
            /// </summary>
            [EnumMember(Value = "reset")]
            Reset
        }

        /// <summary>
        /// BIOS Token for setting OS Boot Watchdog Timer Timeout configuration  
        /// </summary>
        /// <value>BIOS Token for setting OS Boot Watchdog Timer Timeout configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OsBootWatchdogTimerTimeoutEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _10minutes for "10-minutes"
            /// </summary>
            [EnumMember(Value = "10-minutes")]
            _10minutes,
            
            /// <summary>
            /// Enum _15minutes for "15-minutes"
            /// </summary>
            [EnumMember(Value = "15-minutes")]
            _15minutes,
            
            /// <summary>
            /// Enum _20minutes for "20-minutes"
            /// </summary>
            [EnumMember(Value = "20-minutes")]
            _20minutes,
            
            /// <summary>
            /// Enum _5minutes for "5-minutes"
            /// </summary>
            [EnumMember(Value = "5-minutes")]
            _5minutes
        }

        /// <summary>
        /// BIOS Token for setting Out-of-Band Mgmt Port configuration  
        /// </summary>
        /// <value>BIOS Token for setting Out-of-Band Mgmt Port configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutOfBandMgmtPortEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Package C State Limit configuration  
        /// </summary>
        /// <value>BIOS Token for setting Package C State Limit configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PackageCstateLimitEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum C0C1State for "C0 C1 State"
            /// </summary>
            [EnumMember(Value = "C0 C1 State")]
            C0C1State,
            
            /// <summary>
            /// Enum C0C1 for "C0/C1"
            /// </summary>
            [EnumMember(Value = "C0/C1")]
            C0C1,
            
            /// <summary>
            /// Enum C2 for "C2"
            /// </summary>
            [EnumMember(Value = "C2")]
            C2,
            
            /// <summary>
            /// Enum C6NonRetention for "C6 Non Retention"
            /// </summary>
            [EnumMember(Value = "C6 Non Retention")]
            C6NonRetention,
            
            /// <summary>
            /// Enum C6Retention for "C6 Retention"
            /// </summary>
            [EnumMember(Value = "C6 Retention")]
            C6Retention,
            
            /// <summary>
            /// Enum NoLimit for "No Limit"
            /// </summary>
            [EnumMember(Value = "No Limit")]
            NoLimit
        }

        /// <summary>
        /// BIOS Token for setting Patrol Scrub configuration  
        /// </summary>
        /// <value>BIOS Token for setting Patrol Scrub configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PatrolScrubEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Patrol Scrub Interval configuration  
        /// </summary>
        /// <value>BIOS Token for setting Patrol Scrub Interval configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PatrolScrubDurationEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting NVMe SSD Hot-Plug Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting NVMe SSD Hot-Plug Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PcIeSsdHotPlugSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting xHCI Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting xHCI Mode configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PchUsb30modeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting All PCIe Slots OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting All PCIe Slots OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PciOptionRoMsEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCI ROM CLP configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCI ROM CLP configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PciRomClpEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Power ON Password configuration  
        /// </summary>
        /// <value>BIOS Token for setting Power ON Password configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PopSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting POST Error Pause configuration  
        /// </summary>
        /// <value>BIOS Token for setting POST Error Pause configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PostErrorPauseEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Processor C1E configuration  
        /// </summary>
        /// <value>BIOS Token for setting Processor C1E configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessorC1eEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Processor C3 Report configuration  
        /// </summary>
        /// <value>BIOS Token for setting Processor C3 Report configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessorC3reportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Processor C6 Report configuration  
        /// </summary>
        /// <value>BIOS Token for setting Processor C6 Report configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessorC6reportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting CPU C State configuration  
        /// </summary>
        /// <value>BIOS Token for setting CPU C State configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessorCstateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting P-SATA mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting P-SATA mode configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PsataEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum AHCI for "AHCI"
            /// </summary>
            [EnumMember(Value = "AHCI")]
            AHCI,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum LSISWRAID for "LSI SW RAID"
            /// </summary>
            [EnumMember(Value = "LSI SW RAID")]
            LSISWRAID
        }

        /// <summary>
        /// BIOS Token for setting P-STATE Coordination configuration  
        /// </summary>
        /// <value>BIOS Token for setting P-STATE Coordination configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PstateCoordTypeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum HWALL for "HW ALL"
            /// </summary>
            [EnumMember(Value = "HW ALL")]
            HWALL,
            
            /// <summary>
            /// Enum SWALL for "SW ALL"
            /// </summary>
            [EnumMember(Value = "SW ALL")]
            SWALL,
            
            /// <summary>
            /// Enum SWANY for "SW ANY"
            /// </summary>
            [EnumMember(Value = "SW ANY")]
            SWANY
        }

        /// <summary>
        /// BIOS Token for setting Putty KeyPad configuration  
        /// </summary>
        /// <value>BIOS Token for setting Putty KeyPad configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PuttyKeyPadEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum ESCN for "ESCN"
            /// </summary>
            [EnumMember(Value = "ESCN")]
            ESCN,
            
            /// <summary>
            /// Enum LINUX for "LINUX"
            /// </summary>
            [EnumMember(Value = "LINUX")]
            LINUX,
            
            /// <summary>
            /// Enum SCO for "SCO"
            /// </summary>
            [EnumMember(Value = "SCO")]
            SCO,
            
            /// <summary>
            /// Enum VT100 for "VT100"
            /// </summary>
            [EnumMember(Value = "VT100")]
            VT100,
            
            /// <summary>
            /// Enum VT400 for "VT400"
            /// </summary>
            [EnumMember(Value = "VT400")]
            VT400,
            
            /// <summary>
            /// Enum XTERMR6 for "XTERMR6"
            /// </summary>
            [EnumMember(Value = "XTERMR6")]
            XTERMR6
        }

        /// <summary>
        /// BIOS Token for setting Power Performance Tuning configuration  
        /// </summary>
        /// <value>BIOS Token for setting Power Performance Tuning configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PwrPerfTuningEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Bios for "bios"
            /// </summary>
            [EnumMember(Value = "bios")]
            Bios,
            
            /// <summary>
            /// Enum Os for "os"
            /// </summary>
            [EnumMember(Value = "os")]
            Os
        }

        /// <summary>
        /// BIOS Token for setting QPI Link Frequency Select configuration  
        /// </summary>
        /// <value>BIOS Token for setting QPI Link Frequency Select configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QpiLinkFrequencyEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _64gtS for "6.4-gt/s"
            /// </summary>
            [EnumMember(Value = "6.4-gt/s")]
            _64gtS,
            
            /// <summary>
            /// Enum _72gtS for "7.2-gt/s"
            /// </summary>
            [EnumMember(Value = "7.2-gt/s")]
            _72gtS,
            
            /// <summary>
            /// Enum _80gtS for "8.0-gt/s"
            /// </summary>
            [EnumMember(Value = "8.0-gt/s")]
            _80gtS,
            
            /// <summary>
            /// Enum _96gtS for "9.6-gt/s"
            /// </summary>
            [EnumMember(Value = "9.6-gt/s")]
            _96gtS,
            
            /// <summary>
            /// Enum Auto for "auto"
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto
        }

        /// <summary>
        /// BIOS Token for setting QPI Snoop Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting QPI Snoop Mode configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QpiSnoopModeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "auto"
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto,
            
            /// <summary>
            /// Enum Clusterondie for "cluster-on-die"
            /// </summary>
            [EnumMember(Value = "cluster-on-die")]
            Clusterondie,
            
            /// <summary>
            /// Enum Earlysnoop for "early-snoop"
            /// </summary>
            [EnumMember(Value = "early-snoop")]
            Earlysnoop,
            
            /// <summary>
            /// Enum Homedirectorysnoop for "home-directory-snoop"
            /// </summary>
            [EnumMember(Value = "home-directory-snoop")]
            Homedirectorysnoop,
            
            /// <summary>
            /// Enum Homedirectorysnoopwithosb for "home-directory-snoop-with-osb"
            /// </summary>
            [EnumMember(Value = "home-directory-snoop-with-osb")]
            Homedirectorysnoopwithosb,
            
            /// <summary>
            /// Enum Homesnoop for "home-snoop"
            /// </summary>
            [EnumMember(Value = "home-snoop")]
            Homesnoop
        }

        /// <summary>
        /// BIOS Token for setting Rank Interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting Rank Interleaving configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RankInterLeaveEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum _1way for "1-way"
            /// </summary>
            [EnumMember(Value = "1-way")]
            _1way,
            
            /// <summary>
            /// Enum _2way for "2-way"
            /// </summary>
            [EnumMember(Value = "2-way")]
            _2way,
            
            /// <summary>
            /// Enum _4way for "4-way"
            /// </summary>
            [EnumMember(Value = "4-way")]
            _4way,
            
            /// <summary>
            /// Enum _8way for "8-way"
            /// </summary>
            [EnumMember(Value = "8-way")]
            _8way,
            
            /// <summary>
            /// Enum Auto for "auto"
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto
        }

        /// <summary>
        /// BIOS Token for setting Redirection After BIOS POST configuration  
        /// </summary>
        /// <value>BIOS Token for setting Redirection After BIOS POST configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RedirectionAfterPostEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum AlwaysEnable for "Always Enable"
            /// </summary>
            [EnumMember(Value = "Always Enable")]
            AlwaysEnable,
            
            /// <summary>
            /// Enum Bootloader for "Bootloader"
            /// </summary>
            [EnumMember(Value = "Bootloader")]
            Bootloader
        }

        /// <summary>
        /// BIOS Token for setting SATA mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting SATA mode configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SataModeSelectEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum AHCI for "AHCI"
            /// </summary>
            [EnumMember(Value = "AHCI")]
            AHCI,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum LSISWRAID for "LSI SW RAID"
            /// </summary>
            [EnumMember(Value = "LSI SW RAID")]
            LSISWRAID
        }

        /// <summary>
        /// BIOS Token for setting SelectMemory RAS configuration configuration  
        /// </summary>
        /// <value>BIOS Token for setting SelectMemory RAS configuration configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SelectMemoryRasConfigurationEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Lockstep for "lockstep"
            /// </summary>
            [EnumMember(Value = "lockstep")]
            Lockstep,
            
            /// <summary>
            /// Enum Maximumperformance for "maximum-performance"
            /// </summary>
            [EnumMember(Value = "maximum-performance")]
            Maximumperformance,
            
            /// <summary>
            /// Enum Mirrormode1lm for "mirror-mode-1lm"
            /// </summary>
            [EnumMember(Value = "mirror-mode-1lm")]
            Mirrormode1lm,
            
            /// <summary>
            /// Enum Mirroring for "mirroring"
            /// </summary>
            [EnumMember(Value = "mirroring")]
            Mirroring,
            
            /// <summary>
            /// Enum Sparing for "sparing"
            /// </summary>
            [EnumMember(Value = "sparing")]
            Sparing
        }

        /// <summary>
        /// BIOS Token for setting Serial A Enable configuration  
        /// </summary>
        /// <value>BIOS Token for setting Serial A Enable configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SerialPortAenableEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Single PCTL configuration  
        /// </summary>
        /// <value>BIOS Token for setting Single PCTL configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SinglePctlEnableEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum No for "No"
            /// </summary>
            [EnumMember(Value = "No")]
            No,
            
            /// <summary>
            /// Enum Yes for "Yes"
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:10 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:10 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot10linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 10 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 10 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot10stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:11 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:11 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot11linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 11 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 11 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot11stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:12 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:12 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot12linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 12 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 12 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot12stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:1 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot1linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 1 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 1 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot1stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:2 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot2linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 2 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 2 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot2stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:3 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:3 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot3linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 3 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 3 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot3stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:4 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:4 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot4linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 4 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 4 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot4stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:5 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:5 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot5linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 5 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 5 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot5stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:6 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:6 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot6linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 6 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 6 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot6stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:7 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:7 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot7linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 7 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 7 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot7stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:8 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:8 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot8linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 8 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 8 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot8stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:9 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:9 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot9linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting Slot 9 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 9 state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Slot9stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:FLOM Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:FLOM Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotFlomLinkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Front Nvme1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Front Nvme1 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotFrontNvme1linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Front Nvme2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Front Nvme2 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotFrontNvme2linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Front1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Front1 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotFrontSlot5linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Front2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Front2 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotFrontSlot6linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:HBA Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:HBA Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotHbaLinkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:HBA OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:HBA OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotHbaStateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe LOM:1 Link configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe LOM:1 Link configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotLom1linkEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe LOM:2 Link configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe LOM:2 Link configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotLom2linkEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Slot Mezz state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot Mezz state configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotMezzStateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:MLOM Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:MLOM Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotMlomLinkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot MLOM OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot MLOM OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotMlomStateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting MRAID Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting MRAID Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotMraidLinkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot MRAID OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot MRAID OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotMraidStateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N10 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N10 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN10stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N11 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N11 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN11stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N12 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N12 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN12stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N13 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N13 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN13stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N14 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N14 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN14stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N15 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N15 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN15stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N16 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N16 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN16stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N17 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N17 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN17stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N18 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N18 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN18stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N19 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N19 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN19stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N1 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N1 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN1stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N20 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N20 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN20stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N21 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N21 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN21stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N22 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N22 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN22stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N23 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N23 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN23stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N24 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N24 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN24stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N2 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N2 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN2stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N3 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N3 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN3stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N4 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N4 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN4stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N5 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N5 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN5stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N6 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N6 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN6stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N7 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N7 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN7stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N8 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N8 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN8stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot N9 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N9 OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotN9stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting RAID Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting RAID Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRaidLinkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot RAID OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot RAID OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRaidStateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear Nvme1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear Nvme1 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRearNvme1linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 1 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 1 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRearNvme1stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear Nvme2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear Nvme2 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRearNvme2linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 2 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 2 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRearNvme2stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 3 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 3 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRearNvme3stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 4 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 4 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRearNvme4stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 5 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 5 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRearNvme5stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 6 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 6 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRearNvme6stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 7 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 7 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRearNvme7stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 8 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 8 OptionRom configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRearNvme8stateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser1 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRiser1linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser1 Slot1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser1 Slot1 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRiser1slot1linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser1 Slot2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser1 Slot2 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRiser1slot2linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser1 Slot3 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser1 Slot3 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRiser1slot3linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser2 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRiser2linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser2 Slot4 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser2 Slot4 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRiser2slot4linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser2 Slot5 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser2 Slot5 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRiser2slot5linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser2 Slot6 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser2 Slot6 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotRiser2slot6linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:SAS OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:SAS OptionROM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotSasStateEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum LegacyOnly for "Legacy Only"
            /// </summary>
            [EnumMember(Value = "Legacy Only")]
            LegacyOnly,
            
            /// <summary>
            /// Enum UEFIOnly for "UEFI Only"
            /// </summary>
            [EnumMember(Value = "UEFI Only")]
            UEFIOnly
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:FrontPcie1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:FrontPcie1 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotSsdSlot1linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting PCIe Slot:FrontPcie2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:FrontPcie2 Link Speed configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlotSsdSlot2linkSpeedEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum GEN1 for "GEN1"
            /// </summary>
            [EnumMember(Value = "GEN1")]
            GEN1,
            
            /// <summary>
            /// Enum GEN2 for "GEN2"
            /// </summary>
            [EnumMember(Value = "GEN2")]
            GEN2,
            
            /// <summary>
            /// Enum GEN3 for "GEN3"
            /// </summary>
            [EnumMember(Value = "GEN3")]
            GEN3
        }

        /// <summary>
        /// BIOS Token for setting SMEE configuration  
        /// </summary>
        /// <value>BIOS Token for setting SMEE configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmeeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting SMT Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting SMT Mode configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmtModeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Off for "Off"
            /// </summary>
            [EnumMember(Value = "Off")]
            Off
        }

        /// <summary>
        /// BIOS Token for setting Sub Numa Clustering configuration  
        /// </summary>
        /// <value>BIOS Token for setting Sub Numa Clustering configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SncEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled
        }

        /// <summary>
        /// BIOS Token for setting Sparing Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting Sparing Mode configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SparingModeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Dimmsparing for "dimm-sparing"
            /// </summary>
            [EnumMember(Value = "dimm-sparing")]
            Dimmsparing,
            
            /// <summary>
            /// Enum Ranksparing for "rank-sparing"
            /// </summary>
            [EnumMember(Value = "rank-sparing")]
            Ranksparing
        }

        /// <summary>
        /// BIOS Token for setting SR-IOV Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting SR-IOV Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SrIovEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting DCU Streamer Prefetch configuration  
        /// </summary>
        /// <value>BIOS Token for setting DCU Streamer Prefetch configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StreamerPrefetchEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting SVM Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting SVM Mode configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SvmModeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Terminal Type configuration  
        /// </summary>
        /// <value>BIOS Token for setting Terminal Type configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TerminalTypeEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Pcansi for "pc-ansi"
            /// </summary>
            [EnumMember(Value = "pc-ansi")]
            Pcansi,
            
            /// <summary>
            /// Enum Vtutf8 for "vt-utf8"
            /// </summary>
            [EnumMember(Value = "vt-utf8")]
            Vtutf8,
            
            /// <summary>
            /// Enum Vt100 for "vt100"
            /// </summary>
            [EnumMember(Value = "vt100")]
            Vt100,
            
            /// <summary>
            /// Enum Vt100plus for "vt100-plus"
            /// </summary>
            [EnumMember(Value = "vt100-plus")]
            Vt100plus
        }

        /// <summary>
        /// BIOS Token for setting Trusted Platform Module State configuration  
        /// </summary>
        /// <value>BIOS Token for setting Trusted Platform Module State configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TpmControlEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting TPM Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting TPM Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TpmSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Intel Trusted Execution Technology Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel Trusted Execution Technology Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TxtSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Boot Order Rules configuration  
        /// </summary>
        /// <value>BIOS Token for setting Boot Order Rules configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UcsmBootOrderRuleEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Loose for "Loose"
            /// </summary>
            [EnumMember(Value = "Loose")]
            Loose,
            
            /// <summary>
            /// Enum Strict for "Strict"
            /// </summary>
            [EnumMember(Value = "Strict")]
            Strict
        }

        /// <summary>
        /// BIOS Token for setting Port 60/64 Emulation configuration  
        /// </summary>
        /// <value>BIOS Token for setting Port 60/64 Emulation configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsbEmul6064Enum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting USB Port Front configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port Front configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsbPortFrontEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting USB Port Internal configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port Internal configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsbPortInternalEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting USB Port KVM configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port KVM configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsbPortKvmEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting USB Port Rear configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port Rear configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsbPortRearEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting USB Port SD Card configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port SD Card configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsbPortSdCardEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting USB Port VMedia configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port VMedia configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsbPortVmediaEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting XHCI Legacy Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting XHCI Legacy Support configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsbXhciSupportEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting VGA Priority configuration  
        /// </summary>
        /// <value>BIOS Token for setting VGA Priority configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VgaPriorityEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Offboard for "Offboard"
            /// </summary>
            [EnumMember(Value = "Offboard")]
            Offboard,
            
            /// <summary>
            /// Enum Onboard for "Onboard"
            /// </summary>
            [EnumMember(Value = "Onboard")]
            Onboard,
            
            /// <summary>
            /// Enum OnboardVGADisabled for "Onboard VGA Disabled"
            /// </summary>
            [EnumMember(Value = "Onboard VGA Disabled")]
            OnboardVGADisabled
        }

        /// <summary>
        /// BIOS Token for setting VMD Enablement configuration  
        /// </summary>
        /// <value>BIOS Token for setting VMD Enablement configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VmdEnableEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Workload Configuration configuration  
        /// </summary>
        /// <value>BIOS Token for setting Workload Configuration configuration  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WorkLoadConfigEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Balanced for "Balanced"
            /// </summary>
            [EnumMember(Value = "Balanced")]
            Balanced,
            
            /// <summary>
            /// Enum IOSensitive for "I/O Sensitive"
            /// </summary>
            [EnumMember(Value = "I/O Sensitive")]
            IOSensitive,
            
            /// <summary>
            /// Enum NUMA for "NUMA"
            /// </summary>
            [EnumMember(Value = "NUMA")]
            NUMA,
            
            /// <summary>
            /// Enum UMA for "UMA"
            /// </summary>
            [EnumMember(Value = "UMA")]
            UMA
        }

        /// <summary>
        /// BIOS Token for setting XPT Prefetch configuration   
        /// </summary>
        /// <value>BIOS Token for setting XPT Prefetch configuration   </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum XptPrefetchEnum
        {
            
            /// <summary>
            /// Enum Platformdefault for "platform-default"
            /// </summary>
            [EnumMember(Value = "platform-default")]
            Platformdefault,
            
            /// <summary>
            /// Enum Enabled for "enabled"
            /// </summary>
            [EnumMember(Value = "enabled")]
            Enabled,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled
        }

        /// <summary>
        /// BIOS Token for setting Adjacent Cache Line Prefetcher configuration  
        /// </summary>
        /// <value>BIOS Token for setting Adjacent Cache Line Prefetcher configuration  </value>
        [DataMember(Name="AdjacentCacheLinePrefetch", EmitDefaultValue=false)]
        public AdjacentCacheLinePrefetchEnum? AdjacentCacheLinePrefetch { get; set; }
        /// <summary>
        /// BIOS Token for setting All USB Devices configuration  
        /// </summary>
        /// <value>BIOS Token for setting All USB Devices configuration  </value>
        [DataMember(Name="AllUsbDevices", EmitDefaultValue=false)]
        public AllUsbDevicesEnum? AllUsbDevices { get; set; }
        /// <summary>
        /// BIOS Token for setting Altitude configuration  
        /// </summary>
        /// <value>BIOS Token for setting Altitude configuration  </value>
        [DataMember(Name="Altitude", EmitDefaultValue=false)]
        public AltitudeEnum? Altitude { get; set; }
        /// <summary>
        /// BIOS Token for setting ASPM Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting ASPM Support configuration  </value>
        [DataMember(Name="AspmSupport", EmitDefaultValue=false)]
        public AspmSupportEnum? AspmSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting Assert NMI on PERR configuration  
        /// </summary>
        /// <value>BIOS Token for setting Assert NMI on PERR configuration  </value>
        [DataMember(Name="AssertNmiOnPerr", EmitDefaultValue=false)]
        public AssertNmiOnPerrEnum? AssertNmiOnPerr { get; set; }
        /// <summary>
        /// BIOS Token for setting Assert NMI on SERR configuration  
        /// </summary>
        /// <value>BIOS Token for setting Assert NMI on SERR configuration  </value>
        [DataMember(Name="AssertNmiOnSerr", EmitDefaultValue=false)]
        public AssertNmiOnSerrEnum? AssertNmiOnSerr { get; set; }
        /// <summary>
        /// BIOS Token for setting Autonomous Core C-state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Autonomous Core C-state configuration  </value>
        [DataMember(Name="AutoCcState", EmitDefaultValue=false)]
        public AutoCcStateEnum? AutoCcState { get; set; }
        /// <summary>
        /// BIOS Token for setting CPU Autonomous Cstate configuration  
        /// </summary>
        /// <value>BIOS Token for setting CPU Autonomous Cstate configuration  </value>
        [DataMember(Name="AutonumousCstateEnable", EmitDefaultValue=false)]
        public AutonumousCstateEnableEnum? AutonumousCstateEnable { get; set; }
        /// <summary>
        /// BIOS Token for setting Baud rate configuration  
        /// </summary>
        /// <value>BIOS Token for setting Baud rate configuration  </value>
        [DataMember(Name="BaudRate", EmitDefaultValue=false)]
        public BaudRateEnum? BaudRate { get; set; }
        /// <summary>
        /// BIOS Token for setting BME DMA Mitigation configuration  
        /// </summary>
        /// <value>BIOS Token for setting BME DMA Mitigation configuration  </value>
        [DataMember(Name="BmeDmaMitigation", EmitDefaultValue=false)]
        public BmeDmaMitigationEnum? BmeDmaMitigation { get; set; }
        /// <summary>
        /// BIOS Token for setting Number of Retries configuration  
        /// </summary>
        /// <value>BIOS Token for setting Number of Retries configuration  </value>
        [DataMember(Name="BootOptionNumRetry", EmitDefaultValue=false)]
        public BootOptionNumRetryEnum? BootOptionNumRetry { get; set; }
        /// <summary>
        /// BIOS Token for setting Cool Down Time (sec) configuration  
        /// </summary>
        /// <value>BIOS Token for setting Cool Down Time (sec) configuration  </value>
        [DataMember(Name="BootOptionReCoolDown", EmitDefaultValue=false)]
        public BootOptionReCoolDownEnum? BootOptionReCoolDown { get; set; }
        /// <summary>
        /// BIOS Token for setting Boot option retry configuration  
        /// </summary>
        /// <value>BIOS Token for setting Boot option retry configuration  </value>
        [DataMember(Name="BootOptionRetry", EmitDefaultValue=false)]
        public BootOptionRetryEnum? BootOptionRetry { get; set; }
        /// <summary>
        /// BIOS Token for setting Boot Performance Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting Boot Performance Mode configuration  </value>
        [DataMember(Name="BootPerformanceMode", EmitDefaultValue=false)]
        public BootPerformanceModeEnum? BootPerformanceMode { get; set; }
        /// <summary>
        /// BIOS Token for setting Core Performance Boost configuration  
        /// </summary>
        /// <value>BIOS Token for setting Core Performance Boost configuration  </value>
        [DataMember(Name="CbsCmnCpuCpb", EmitDefaultValue=false)]
        public CbsCmnCpuCpbEnum? CbsCmnCpuCpb { get; set; }
        /// <summary>
        /// BIOS Token for setting Downcore control configuration  
        /// </summary>
        /// <value>BIOS Token for setting Downcore control configuration  </value>
        [DataMember(Name="CbsCmnCpuGenDowncoreCtrl", EmitDefaultValue=false)]
        public CbsCmnCpuGenDowncoreCtrlEnum? CbsCmnCpuGenDowncoreCtrl { get; set; }
        /// <summary>
        /// BIOS Token for setting Global C-state Control configuration  
        /// </summary>
        /// <value>BIOS Token for setting Global C-state Control configuration  </value>
        [DataMember(Name="CbsCmnCpuGlobalCstateCtrl", EmitDefaultValue=false)]
        public CbsCmnCpuGlobalCstateCtrlEnum? CbsCmnCpuGlobalCstateCtrl { get; set; }
        /// <summary>
        /// BIOS Token for setting L1 Stream HW Prefetcher configuration  
        /// </summary>
        /// <value>BIOS Token for setting L1 Stream HW Prefetcher configuration  </value>
        [DataMember(Name="CbsCmnCpuL1streamHwPrefetcher", EmitDefaultValue=false)]
        public CbsCmnCpuL1streamHwPrefetcherEnum? CbsCmnCpuL1streamHwPrefetcher { get; set; }
        /// <summary>
        /// BIOS Token for setting L2 Stream HW Prefetcher configuration  
        /// </summary>
        /// <value>BIOS Token for setting L2 Stream HW Prefetcher configuration  </value>
        [DataMember(Name="CbsCmnCpuL2streamHwPrefetcher", EmitDefaultValue=false)]
        public CbsCmnCpuL2streamHwPrefetcherEnum? CbsCmnCpuL2streamHwPrefetcher { get; set; }
        /// <summary>
        /// BIOS Token for setting Determinism Slider configuration  
        /// </summary>
        /// <value>BIOS Token for setting Determinism Slider configuration  </value>
        [DataMember(Name="CbsCmnDeterminismSlider", EmitDefaultValue=false)]
        public CbsCmnDeterminismSliderEnum? CbsCmnDeterminismSlider { get; set; }
        /// <summary>
        /// BIOS Token for setting IOMMU configuration  
        /// </summary>
        /// <value>BIOS Token for setting IOMMU configuration  </value>
        [DataMember(Name="CbsCmnGnbNbIommu", EmitDefaultValue=false)]
        public CbsCmnGnbNbIommuEnum? CbsCmnGnbNbIommu { get; set; }
        /// <summary>
        /// BIOS Token for setting Bank Group Swap configuration  
        /// </summary>
        /// <value>BIOS Token for setting Bank Group Swap configuration  </value>
        [DataMember(Name="CbsCmnMemCtrlBankGroupSwapDdr4", EmitDefaultValue=false)]
        public CbsCmnMemCtrlBankGroupSwapDdr4Enum? CbsCmnMemCtrlBankGroupSwapDdr4 { get; set; }
        /// <summary>
        /// BIOS Token for setting Chipselect Interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting Chipselect Interleaving configuration  </value>
        [DataMember(Name="CbsCmnMemMapBankInterleaveDdr4", EmitDefaultValue=false)]
        public CbsCmnMemMapBankInterleaveDdr4Enum? CbsCmnMemMapBankInterleaveDdr4 { get; set; }
        /// <summary>
        /// BIOS Token for setting cTDP Control configuration  
        /// </summary>
        /// <value>BIOS Token for setting cTDP Control configuration  </value>
        [DataMember(Name="CbsCmncTdpCtl", EmitDefaultValue=false)]
        public CbsCmncTdpCtlEnum? CbsCmncTdpCtl { get; set; }
        /// <summary>
        /// BIOS Token for setting Memory interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting Memory interleaving configuration  </value>
        [DataMember(Name="CbsDfCmnMemIntlv", EmitDefaultValue=false)]
        public CbsDfCmnMemIntlvEnum? CbsDfCmnMemIntlv { get; set; }
        /// <summary>
        /// BIOS Token for setting Memory interleaving size configuration  
        /// </summary>
        /// <value>BIOS Token for setting Memory interleaving size configuration  </value>
        [DataMember(Name="CbsDfCmnMemIntlvSize", EmitDefaultValue=false)]
        public CbsDfCmnMemIntlvSizeEnum? CbsDfCmnMemIntlvSize { get; set; }
        /// <summary>
        /// BIOS Token for setting Consistent Device Naming configuration  
        /// </summary>
        /// <value>BIOS Token for setting Consistent Device Naming configuration  </value>
        [DataMember(Name="CdnEnable", EmitDefaultValue=false)]
        public CdnEnableEnum? CdnEnable { get; set; }
        /// <summary>
        /// BIOS Token for setting CDN Support for LOM configuration  
        /// </summary>
        /// <value>BIOS Token for setting CDN Support for LOM configuration  </value>
        [DataMember(Name="CdnSupport", EmitDefaultValue=false)]
        public CdnSupportEnum? CdnSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting Channel Interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting Channel Interleaving configuration  </value>
        [DataMember(Name="ChannelInterLeave", EmitDefaultValue=false)]
        public ChannelInterLeaveEnum? ChannelInterLeave { get; set; }
        /// <summary>
        /// BIOS Token for setting CKE Low Policy configuration  
        /// </summary>
        /// <value>BIOS Token for setting CKE Low Policy configuration  </value>
        [DataMember(Name="CkeLowPolicy", EmitDefaultValue=false)]
        public CkeLowPolicyEnum? CkeLowPolicy { get; set; }
        /// <summary>
        /// BIOS Token for setting Closed Loop Therm Throt configuration  
        /// </summary>
        /// <value>BIOS Token for setting Closed Loop Therm Throt configuration  </value>
        [DataMember(Name="ClosedLoopThermThrotl", EmitDefaultValue=false)]
        public ClosedLoopThermThrotlEnum? ClosedLoopThermThrotl { get; set; }
        /// <summary>
        /// BIOS Token for setting Processor CMCI configuration  
        /// </summary>
        /// <value>BIOS Token for setting Processor CMCI configuration  </value>
        [DataMember(Name="CmciEnable", EmitDefaultValue=false)]
        public CmciEnableEnum? CmciEnable { get; set; }
        /// <summary>
        /// BIOS Token for setting Config TDP configuration  
        /// </summary>
        /// <value>BIOS Token for setting Config TDP configuration  </value>
        [DataMember(Name="ConfigTdp", EmitDefaultValue=false)]
        public ConfigTdpEnum? ConfigTdp { get; set; }
        /// <summary>
        /// BIOS Token for setting Console redirection configuration  
        /// </summary>
        /// <value>BIOS Token for setting Console redirection configuration  </value>
        [DataMember(Name="ConsoleRedirection", EmitDefaultValue=false)]
        public ConsoleRedirectionEnum? ConsoleRedirection { get; set; }
        /// <summary>
        /// BIOS Token for setting Core MultiProcessing configuration  
        /// </summary>
        /// <value>BIOS Token for setting Core MultiProcessing configuration  </value>
        [DataMember(Name="CoreMultiProcessing", EmitDefaultValue=false)]
        public CoreMultiProcessingEnum? CoreMultiProcessing { get; set; }
        /// <summary>
        /// BIOS Token for setting Energy Performance configuration  
        /// </summary>
        /// <value>BIOS Token for setting Energy Performance configuration  </value>
        [DataMember(Name="CpuEnergyPerformance", EmitDefaultValue=false)]
        public CpuEnergyPerformanceEnum? CpuEnergyPerformance { get; set; }
        /// <summary>
        /// BIOS Token for setting Frequency Floor Override configuration  
        /// </summary>
        /// <value>BIOS Token for setting Frequency Floor Override configuration  </value>
        [DataMember(Name="CpuFrequencyFloor", EmitDefaultValue=false)]
        public CpuFrequencyFloorEnum? CpuFrequencyFloor { get; set; }
        /// <summary>
        /// BIOS Token for setting CPU Performance configuration  
        /// </summary>
        /// <value>BIOS Token for setting CPU Performance configuration  </value>
        [DataMember(Name="CpuPerformance", EmitDefaultValue=false)]
        public CpuPerformanceEnum? CpuPerformance { get; set; }
        /// <summary>
        /// BIOS Token for setting Power Technology configuration  
        /// </summary>
        /// <value>BIOS Token for setting Power Technology configuration  </value>
        [DataMember(Name="CpuPowerManagement", EmitDefaultValue=false)]
        public CpuPowerManagementEnum? CpuPowerManagement { get; set; }
        /// <summary>
        /// BIOS Token for setting Demand Scrub configuration  
        /// </summary>
        /// <value>BIOS Token for setting Demand Scrub configuration  </value>
        [DataMember(Name="DemandScrub", EmitDefaultValue=false)]
        public DemandScrubEnum? DemandScrub { get; set; }
        /// <summary>
        /// BIOS Token for setting Direct Cache Access Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Direct Cache Access Support configuration  </value>
        [DataMember(Name="DirectCacheAccess", EmitDefaultValue=false)]
        public DirectCacheAccessEnum? DirectCacheAccess { get; set; }
        /// <summary>
        /// BIOS Token for setting DRAM Clock Throttling configuration  
        /// </summary>
        /// <value>BIOS Token for setting DRAM Clock Throttling configuration  </value>
        [DataMember(Name="DramClockThrottling", EmitDefaultValue=false)]
        public DramClockThrottlingEnum? DramClockThrottling { get; set; }
        /// <summary>
        /// BIOS Token for setting DRAM Refresh Rate configuration  
        /// </summary>
        /// <value>BIOS Token for setting DRAM Refresh Rate configuration  </value>
        [DataMember(Name="DramRefreshRate", EmitDefaultValue=false)]
        public DramRefreshRateEnum? DramRefreshRate { get; set; }
        /// <summary>
        /// BIOS Token for setting Energy Efficient Turbo configuration  
        /// </summary>
        /// <value>BIOS Token for setting Energy Efficient Turbo configuration  </value>
        [DataMember(Name="EnergyEfficientTurbo", EmitDefaultValue=false)]
        public EnergyEfficientTurboEnum? EnergyEfficientTurbo { get; set; }
        /// <summary>
        /// BIOS Token for setting Energy Performance Tuning configuration  
        /// </summary>
        /// <value>BIOS Token for setting Energy Performance Tuning configuration  </value>
        [DataMember(Name="EngPerfTuning", EmitDefaultValue=false)]
        public EngPerfTuningEnum? EngPerfTuning { get; set; }
        /// <summary>
        /// BIOS Token for setting Enhanced Intel Speedstep(R) Technology configuration  
        /// </summary>
        /// <value>BIOS Token for setting Enhanced Intel Speedstep(R) Technology configuration  </value>
        [DataMember(Name="EnhancedIntelSpeedStepTech", EmitDefaultValue=false)]
        public EnhancedIntelSpeedStepTechEnum? EnhancedIntelSpeedStepTech { get; set; }
        /// <summary>
        /// BIOS Token for setting EPP Profile configuration  
        /// </summary>
        /// <value>BIOS Token for setting EPP Profile configuration  </value>
        [DataMember(Name="EppProfile", EmitDefaultValue=false)]
        public EppProfileEnum? EppProfile { get; set; }
        /// <summary>
        /// BIOS Token for setting Execute Disable Bit configuration  
        /// </summary>
        /// <value>BIOS Token for setting Execute Disable Bit configuration  </value>
        [DataMember(Name="ExecuteDisableBit", EmitDefaultValue=false)]
        public ExecuteDisableBitEnum? ExecuteDisableBit { get; set; }
        /// <summary>
        /// BIOS Token for setting Local X2 Apic configuration  
        /// </summary>
        /// <value>BIOS Token for setting Local X2 Apic configuration  </value>
        [DataMember(Name="ExtendedApic", EmitDefaultValue=false)]
        public ExtendedApicEnum? ExtendedApic { get; set; }
        /// <summary>
        /// BIOS Token for setting Flow Control configuration  
        /// </summary>
        /// <value>BIOS Token for setting Flow Control configuration  </value>
        [DataMember(Name="FlowControl", EmitDefaultValue=false)]
        public FlowControlEnum? FlowControl { get; set; }
        /// <summary>
        /// BIOS Token for setting FRB-2 Timer configuration  
        /// </summary>
        /// <value>BIOS Token for setting FRB-2 Timer configuration  </value>
        [DataMember(Name="Frb2enable", EmitDefaultValue=false)]
        public Frb2enableEnum? Frb2enable { get; set; }
        /// <summary>
        /// BIOS Token for setting Hardware Prefetcher configuration  
        /// </summary>
        /// <value>BIOS Token for setting Hardware Prefetcher configuration  </value>
        [DataMember(Name="HardwarePrefetch", EmitDefaultValue=false)]
        public HardwarePrefetchEnum? HardwarePrefetch { get; set; }
        /// <summary>
        /// BIOS Token for setting CPU Hardware Power Management configuration  
        /// </summary>
        /// <value>BIOS Token for setting CPU Hardware Power Management configuration  </value>
        [DataMember(Name="HwpmEnable", EmitDefaultValue=false)]
        public HwpmEnableEnum? HwpmEnable { get; set; }
        /// <summary>
        /// BIOS Token for setting IMC Interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting IMC Interleaving configuration  </value>
        [DataMember(Name="ImcInterleave", EmitDefaultValue=false)]
        public ImcInterleaveEnum? ImcInterleave { get; set; }
        /// <summary>
        /// BIOS Token for setting Intel HyperThreading Tech configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel HyperThreading Tech configuration  </value>
        [DataMember(Name="IntelHyperThreadingTech", EmitDefaultValue=false)]
        public IntelHyperThreadingTechEnum? IntelHyperThreadingTech { get; set; }
        /// <summary>
        /// BIOS Token for setting Intel Turbo Boost Tech configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel Turbo Boost Tech configuration  </value>
        [DataMember(Name="IntelTurboBoostTech", EmitDefaultValue=false)]
        public IntelTurboBoostTechEnum? IntelTurboBoostTech { get; set; }
        /// <summary>
        /// BIOS Token for setting Intel(R) VT configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel(R) VT configuration  </value>
        [DataMember(Name="IntelVirtualizationTechnology", EmitDefaultValue=false)]
        public IntelVirtualizationTechnologyEnum? IntelVirtualizationTechnology { get; set; }
        /// <summary>
        /// BIOS Token for setting Intel VT for directed IO configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel VT for directed IO configuration  </value>
        [DataMember(Name="IntelVtForDirectedIo", EmitDefaultValue=false)]
        public IntelVtForDirectedIoEnum? IntelVtForDirectedIo { get; set; }
        /// <summary>
        /// BIOS Token for setting Intel(R) VT-d Coherency Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel(R) VT-d Coherency Support configuration  </value>
        [DataMember(Name="IntelVtdCoherencySupport", EmitDefaultValue=false)]
        public IntelVtdCoherencySupportEnum? IntelVtdCoherencySupport { get; set; }
        /// <summary>
        /// BIOS Token for setting Intel(R) VT-d Interrupt Remapping configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel(R) VT-d Interrupt Remapping configuration  </value>
        [DataMember(Name="IntelVtdInterruptRemapping", EmitDefaultValue=false)]
        public IntelVtdInterruptRemappingEnum? IntelVtdInterruptRemapping { get; set; }
        /// <summary>
        /// BIOS Token for setting Intel(R) VT-d PassThrough DMA support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel(R) VT-d PassThrough DMA support configuration  </value>
        [DataMember(Name="IntelVtdPassThroughDmaSupport", EmitDefaultValue=false)]
        public IntelVtdPassThroughDmaSupportEnum? IntelVtdPassThroughDmaSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting Intel VTD ATS support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel VTD ATS support configuration  </value>
        [DataMember(Name="IntelVtdatsSupport", EmitDefaultValue=false)]
        public IntelVtdatsSupportEnum? IntelVtdatsSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting IIO Error Enable configuration  
        /// </summary>
        /// <value>BIOS Token for setting IIO Error Enable configuration  </value>
        [DataMember(Name="IohErrorEnable", EmitDefaultValue=false)]
        public IohErrorEnableEnum? IohErrorEnable { get; set; }
        /// <summary>
        /// BIOS Token for setting IOH Resource Allocation configuration  
        /// </summary>
        /// <value>BIOS Token for setting IOH Resource Allocation configuration  </value>
        [DataMember(Name="IohResource", EmitDefaultValue=false)]
        public IohResourceEnum? IohResource { get; set; }
        /// <summary>
        /// BIOS Token for setting DCU IP Prefetcher configuration  
        /// </summary>
        /// <value>BIOS Token for setting DCU IP Prefetcher configuration  </value>
        [DataMember(Name="IpPrefetch", EmitDefaultValue=false)]
        public IpPrefetchEnum? IpPrefetch { get; set; }
        /// <summary>
        /// BIOS Token for setting IPV6 PXE Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting IPV6 PXE Support configuration  </value>
        [DataMember(Name="Ipv6pxe", EmitDefaultValue=false)]
        public Ipv6pxeEnum? Ipv6pxe { get; set; }
        /// <summary>
        /// BIOS Token for setting KTI Prefetch configuration  
        /// </summary>
        /// <value>BIOS Token for setting KTI Prefetch configuration  </value>
        [DataMember(Name="KtiPrefetch", EmitDefaultValue=false)]
        public KtiPrefetchEnum? KtiPrefetch { get; set; }
        /// <summary>
        /// BIOS Token for setting Legacy OS redirection configuration  
        /// </summary>
        /// <value>BIOS Token for setting Legacy OS redirection configuration  </value>
        [DataMember(Name="LegacyOsRedirection", EmitDefaultValue=false)]
        public LegacyOsRedirectionEnum? LegacyOsRedirection { get; set; }
        /// <summary>
        /// BIOS Token for setting Legacy USB Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Legacy USB Support configuration  </value>
        [DataMember(Name="LegacyUsbSupport", EmitDefaultValue=false)]
        public LegacyUsbSupportEnum? LegacyUsbSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting LLC Prefetch configuration  
        /// </summary>
        /// <value>BIOS Token for setting LLC Prefetch configuration  </value>
        [DataMember(Name="LlcPrefetch", EmitDefaultValue=false)]
        public LlcPrefetchEnum? LlcPrefetch { get; set; }
        /// <summary>
        /// BIOS Token for setting LOM Port 0 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting LOM Port 0 OptionROM configuration  </value>
        [DataMember(Name="LomPort0state", EmitDefaultValue=false)]
        public LomPort0stateEnum? LomPort0state { get; set; }
        /// <summary>
        /// BIOS Token for setting LOM Port 1 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting LOM Port 1 OptionRom configuration  </value>
        [DataMember(Name="LomPort1state", EmitDefaultValue=false)]
        public LomPort1stateEnum? LomPort1state { get; set; }
        /// <summary>
        /// BIOS Token for setting LOM Port 2 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting LOM Port 2 OptionRom configuration  </value>
        [DataMember(Name="LomPort2state", EmitDefaultValue=false)]
        public LomPort2stateEnum? LomPort2state { get; set; }
        /// <summary>
        /// BIOS Token for setting LOM Port 3 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting LOM Port 3 OptionRom configuration  </value>
        [DataMember(Name="LomPort3state", EmitDefaultValue=false)]
        public LomPort3stateEnum? LomPort3state { get; set; }
        /// <summary>
        /// BIOS Token for setting All Onboard LOM Ports configuration  
        /// </summary>
        /// <value>BIOS Token for setting All Onboard LOM Ports configuration  </value>
        [DataMember(Name="LomPortsAllState", EmitDefaultValue=false)]
        public LomPortsAllStateEnum? LomPortsAllState { get; set; }
        /// <summary>
        /// BIOS Token for setting Low Voltage DDR Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting Low Voltage DDR Mode configuration  </value>
        [DataMember(Name="LvDdrMode", EmitDefaultValue=false)]
        public LvDdrModeEnum? LvDdrMode { get; set; }
        /// <summary>
        /// BIOS Token for setting Make Device Non Bootable configuration  
        /// </summary>
        /// <value>BIOS Token for setting Make Device Non Bootable configuration  </value>
        [DataMember(Name="MakeDeviceNonBootable", EmitDefaultValue=false)]
        public MakeDeviceNonBootableEnum? MakeDeviceNonBootable { get; set; }
        /// <summary>
        /// BIOS Token for setting Memory Interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting Memory Interleaving configuration  </value>
        [DataMember(Name="MemoryInterLeave", EmitDefaultValue=false)]
        public MemoryInterLeaveEnum? MemoryInterLeave { get; set; }
        /// <summary>
        /// BIOS Token for setting Memory mapped IO above 4GB configuration  
        /// </summary>
        /// <value>BIOS Token for setting Memory mapped IO above 4GB configuration  </value>
        [DataMember(Name="MemoryMappedIoAbove4gb", EmitDefaultValue=false)]
        public MemoryMappedIoAbove4gbEnum? MemoryMappedIoAbove4gb { get; set; }
        /// <summary>
        /// BIOS Token for setting Mirroring Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting Mirroring Mode configuration  </value>
        [DataMember(Name="MirroringMode", EmitDefaultValue=false)]
        public MirroringModeEnum? MirroringMode { get; set; }
        /// <summary>
        /// BIOS Token for setting MMCFG BASE configuration  
        /// </summary>
        /// <value>BIOS Token for setting MMCFG BASE configuration  </value>
        [DataMember(Name="MmcfgBase", EmitDefaultValue=false)]
        public MmcfgBaseEnum? MmcfgBase { get; set; }
        /// <summary>
        /// BIOS Token for setting NUMA optimized configuration  
        /// </summary>
        /// <value>BIOS Token for setting NUMA optimized configuration  </value>
        [DataMember(Name="NumaOptimized", EmitDefaultValue=false)]
        public NumaOptimizedEnum? NumaOptimized { get; set; }
        /// <summary>
        /// BIOS Token for setting Onboard 10Gbit LOM configuration  
        /// </summary>
        /// <value>BIOS Token for setting Onboard 10Gbit LOM configuration  </value>
        [DataMember(Name="Onboard10gbitLom", EmitDefaultValue=false)]
        public Onboard10gbitLomEnum? Onboard10gbitLom { get; set; }
        /// <summary>
        /// BIOS Token for setting Onboard Gbit LOM configuration  
        /// </summary>
        /// <value>BIOS Token for setting Onboard Gbit LOM configuration  </value>
        [DataMember(Name="OnboardGbitLom", EmitDefaultValue=false)]
        public OnboardGbitLomEnum? OnboardGbitLom { get; set; }
        /// <summary>
        /// BIOS Token for setting Onboard SCU Storage Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Onboard SCU Storage Support configuration  </value>
        [DataMember(Name="OnboardScuStorageSupport", EmitDefaultValue=false)]
        public OnboardScuStorageSupportEnum? OnboardScuStorageSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting Onboard SCU Storage SW Stack configuration  
        /// </summary>
        /// <value>BIOS Token for setting Onboard SCU Storage SW Stack configuration  </value>
        [DataMember(Name="OnboardScuStorageSwStack", EmitDefaultValue=false)]
        public OnboardScuStorageSwStackEnum? OnboardScuStorageSwStack { get; set; }
        /// <summary>
        /// BIOS Token for setting OS Boot Watchdog Timer configuration  
        /// </summary>
        /// <value>BIOS Token for setting OS Boot Watchdog Timer configuration  </value>
        [DataMember(Name="OsBootWatchdogTimer", EmitDefaultValue=false)]
        public OsBootWatchdogTimerEnum? OsBootWatchdogTimer { get; set; }
        /// <summary>
        /// BIOS Token for setting OS Boot Watchdog Timer Policy configuration  
        /// </summary>
        /// <value>BIOS Token for setting OS Boot Watchdog Timer Policy configuration  </value>
        [DataMember(Name="OsBootWatchdogTimerPolicy", EmitDefaultValue=false)]
        public OsBootWatchdogTimerPolicyEnum? OsBootWatchdogTimerPolicy { get; set; }
        /// <summary>
        /// BIOS Token for setting OS Boot Watchdog Timer Timeout configuration  
        /// </summary>
        /// <value>BIOS Token for setting OS Boot Watchdog Timer Timeout configuration  </value>
        [DataMember(Name="OsBootWatchdogTimerTimeout", EmitDefaultValue=false)]
        public OsBootWatchdogTimerTimeoutEnum? OsBootWatchdogTimerTimeout { get; set; }
        /// <summary>
        /// BIOS Token for setting Out-of-Band Mgmt Port configuration  
        /// </summary>
        /// <value>BIOS Token for setting Out-of-Band Mgmt Port configuration  </value>
        [DataMember(Name="OutOfBandMgmtPort", EmitDefaultValue=false)]
        public OutOfBandMgmtPortEnum? OutOfBandMgmtPort { get; set; }
        /// <summary>
        /// BIOS Token for setting Package C State Limit configuration  
        /// </summary>
        /// <value>BIOS Token for setting Package C State Limit configuration  </value>
        [DataMember(Name="PackageCstateLimit", EmitDefaultValue=false)]
        public PackageCstateLimitEnum? PackageCstateLimit { get; set; }
        /// <summary>
        /// BIOS Token for setting Patrol Scrub configuration  
        /// </summary>
        /// <value>BIOS Token for setting Patrol Scrub configuration  </value>
        [DataMember(Name="PatrolScrub", EmitDefaultValue=false)]
        public PatrolScrubEnum? PatrolScrub { get; set; }
        /// <summary>
        /// BIOS Token for setting Patrol Scrub Interval configuration  
        /// </summary>
        /// <value>BIOS Token for setting Patrol Scrub Interval configuration  </value>
        [DataMember(Name="PatrolScrubDuration", EmitDefaultValue=false)]
        public PatrolScrubDurationEnum? PatrolScrubDuration { get; set; }
        /// <summary>
        /// BIOS Token for setting NVMe SSD Hot-Plug Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting NVMe SSD Hot-Plug Support configuration  </value>
        [DataMember(Name="PcIeSsdHotPlugSupport", EmitDefaultValue=false)]
        public PcIeSsdHotPlugSupportEnum? PcIeSsdHotPlugSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting xHCI Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting xHCI Mode configuration  </value>
        [DataMember(Name="PchUsb30mode", EmitDefaultValue=false)]
        public PchUsb30modeEnum? PchUsb30mode { get; set; }
        /// <summary>
        /// BIOS Token for setting All PCIe Slots OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting All PCIe Slots OptionROM configuration  </value>
        [DataMember(Name="PciOptionRoMs", EmitDefaultValue=false)]
        public PciOptionRoMsEnum? PciOptionRoMs { get; set; }
        /// <summary>
        /// BIOS Token for setting PCI ROM CLP configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCI ROM CLP configuration  </value>
        [DataMember(Name="PciRomClp", EmitDefaultValue=false)]
        public PciRomClpEnum? PciRomClp { get; set; }
        /// <summary>
        /// BIOS Token for setting Power ON Password configuration  
        /// </summary>
        /// <value>BIOS Token for setting Power ON Password configuration  </value>
        [DataMember(Name="PopSupport", EmitDefaultValue=false)]
        public PopSupportEnum? PopSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting POST Error Pause configuration  
        /// </summary>
        /// <value>BIOS Token for setting POST Error Pause configuration  </value>
        [DataMember(Name="PostErrorPause", EmitDefaultValue=false)]
        public PostErrorPauseEnum? PostErrorPause { get; set; }
        /// <summary>
        /// BIOS Token for setting Processor C1E configuration  
        /// </summary>
        /// <value>BIOS Token for setting Processor C1E configuration  </value>
        [DataMember(Name="ProcessorC1e", EmitDefaultValue=false)]
        public ProcessorC1eEnum? ProcessorC1e { get; set; }
        /// <summary>
        /// BIOS Token for setting Processor C3 Report configuration  
        /// </summary>
        /// <value>BIOS Token for setting Processor C3 Report configuration  </value>
        [DataMember(Name="ProcessorC3report", EmitDefaultValue=false)]
        public ProcessorC3reportEnum? ProcessorC3report { get; set; }
        /// <summary>
        /// BIOS Token for setting Processor C6 Report configuration  
        /// </summary>
        /// <value>BIOS Token for setting Processor C6 Report configuration  </value>
        [DataMember(Name="ProcessorC6report", EmitDefaultValue=false)]
        public ProcessorC6reportEnum? ProcessorC6report { get; set; }
        /// <summary>
        /// BIOS Token for setting CPU C State configuration  
        /// </summary>
        /// <value>BIOS Token for setting CPU C State configuration  </value>
        [DataMember(Name="ProcessorCstate", EmitDefaultValue=false)]
        public ProcessorCstateEnum? ProcessorCstate { get; set; }
        /// <summary>
        /// BIOS Token for setting P-SATA mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting P-SATA mode configuration  </value>
        [DataMember(Name="Psata", EmitDefaultValue=false)]
        public PsataEnum? Psata { get; set; }
        /// <summary>
        /// BIOS Token for setting P-STATE Coordination configuration  
        /// </summary>
        /// <value>BIOS Token for setting P-STATE Coordination configuration  </value>
        [DataMember(Name="PstateCoordType", EmitDefaultValue=false)]
        public PstateCoordTypeEnum? PstateCoordType { get; set; }
        /// <summary>
        /// BIOS Token for setting Putty KeyPad configuration  
        /// </summary>
        /// <value>BIOS Token for setting Putty KeyPad configuration  </value>
        [DataMember(Name="PuttyKeyPad", EmitDefaultValue=false)]
        public PuttyKeyPadEnum? PuttyKeyPad { get; set; }
        /// <summary>
        /// BIOS Token for setting Power Performance Tuning configuration  
        /// </summary>
        /// <value>BIOS Token for setting Power Performance Tuning configuration  </value>
        [DataMember(Name="PwrPerfTuning", EmitDefaultValue=false)]
        public PwrPerfTuningEnum? PwrPerfTuning { get; set; }
        /// <summary>
        /// BIOS Token for setting QPI Link Frequency Select configuration  
        /// </summary>
        /// <value>BIOS Token for setting QPI Link Frequency Select configuration  </value>
        [DataMember(Name="QpiLinkFrequency", EmitDefaultValue=false)]
        public QpiLinkFrequencyEnum? QpiLinkFrequency { get; set; }
        /// <summary>
        /// BIOS Token for setting QPI Snoop Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting QPI Snoop Mode configuration  </value>
        [DataMember(Name="QpiSnoopMode", EmitDefaultValue=false)]
        public QpiSnoopModeEnum? QpiSnoopMode { get; set; }
        /// <summary>
        /// BIOS Token for setting Rank Interleaving configuration  
        /// </summary>
        /// <value>BIOS Token for setting Rank Interleaving configuration  </value>
        [DataMember(Name="RankInterLeave", EmitDefaultValue=false)]
        public RankInterLeaveEnum? RankInterLeave { get; set; }
        /// <summary>
        /// BIOS Token for setting Redirection After BIOS POST configuration  
        /// </summary>
        /// <value>BIOS Token for setting Redirection After BIOS POST configuration  </value>
        [DataMember(Name="RedirectionAfterPost", EmitDefaultValue=false)]
        public RedirectionAfterPostEnum? RedirectionAfterPost { get; set; }
        /// <summary>
        /// BIOS Token for setting SATA mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting SATA mode configuration  </value>
        [DataMember(Name="SataModeSelect", EmitDefaultValue=false)]
        public SataModeSelectEnum? SataModeSelect { get; set; }
        /// <summary>
        /// BIOS Token for setting SelectMemory RAS configuration configuration  
        /// </summary>
        /// <value>BIOS Token for setting SelectMemory RAS configuration configuration  </value>
        [DataMember(Name="SelectMemoryRasConfiguration", EmitDefaultValue=false)]
        public SelectMemoryRasConfigurationEnum? SelectMemoryRasConfiguration { get; set; }
        /// <summary>
        /// BIOS Token for setting Serial A Enable configuration  
        /// </summary>
        /// <value>BIOS Token for setting Serial A Enable configuration  </value>
        [DataMember(Name="SerialPortAenable", EmitDefaultValue=false)]
        public SerialPortAenableEnum? SerialPortAenable { get; set; }
        /// <summary>
        /// BIOS Token for setting Single PCTL configuration  
        /// </summary>
        /// <value>BIOS Token for setting Single PCTL configuration  </value>
        [DataMember(Name="SinglePctlEnable", EmitDefaultValue=false)]
        public SinglePctlEnableEnum? SinglePctlEnable { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:10 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:10 Link Speed configuration  </value>
        [DataMember(Name="Slot10linkSpeed", EmitDefaultValue=false)]
        public Slot10linkSpeedEnum? Slot10linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 10 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 10 state configuration  </value>
        [DataMember(Name="Slot10state", EmitDefaultValue=false)]
        public Slot10stateEnum? Slot10state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:11 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:11 Link Speed configuration  </value>
        [DataMember(Name="Slot11linkSpeed", EmitDefaultValue=false)]
        public Slot11linkSpeedEnum? Slot11linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 11 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 11 state configuration  </value>
        [DataMember(Name="Slot11state", EmitDefaultValue=false)]
        public Slot11stateEnum? Slot11state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:12 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:12 Link Speed configuration  </value>
        [DataMember(Name="Slot12linkSpeed", EmitDefaultValue=false)]
        public Slot12linkSpeedEnum? Slot12linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 12 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 12 state configuration  </value>
        [DataMember(Name="Slot12state", EmitDefaultValue=false)]
        public Slot12stateEnum? Slot12state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:1 Link Speed configuration  </value>
        [DataMember(Name="Slot1linkSpeed", EmitDefaultValue=false)]
        public Slot1linkSpeedEnum? Slot1linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 1 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 1 state configuration  </value>
        [DataMember(Name="Slot1state", EmitDefaultValue=false)]
        public Slot1stateEnum? Slot1state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:2 Link Speed configuration  </value>
        [DataMember(Name="Slot2linkSpeed", EmitDefaultValue=false)]
        public Slot2linkSpeedEnum? Slot2linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 2 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 2 state configuration  </value>
        [DataMember(Name="Slot2state", EmitDefaultValue=false)]
        public Slot2stateEnum? Slot2state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:3 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:3 Link Speed configuration  </value>
        [DataMember(Name="Slot3linkSpeed", EmitDefaultValue=false)]
        public Slot3linkSpeedEnum? Slot3linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 3 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 3 state configuration  </value>
        [DataMember(Name="Slot3state", EmitDefaultValue=false)]
        public Slot3stateEnum? Slot3state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:4 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:4 Link Speed configuration  </value>
        [DataMember(Name="Slot4linkSpeed", EmitDefaultValue=false)]
        public Slot4linkSpeedEnum? Slot4linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 4 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 4 state configuration  </value>
        [DataMember(Name="Slot4state", EmitDefaultValue=false)]
        public Slot4stateEnum? Slot4state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:5 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:5 Link Speed configuration  </value>
        [DataMember(Name="Slot5linkSpeed", EmitDefaultValue=false)]
        public Slot5linkSpeedEnum? Slot5linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 5 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 5 state configuration  </value>
        [DataMember(Name="Slot5state", EmitDefaultValue=false)]
        public Slot5stateEnum? Slot5state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:6 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:6 Link Speed configuration  </value>
        [DataMember(Name="Slot6linkSpeed", EmitDefaultValue=false)]
        public Slot6linkSpeedEnum? Slot6linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 6 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 6 state configuration  </value>
        [DataMember(Name="Slot6state", EmitDefaultValue=false)]
        public Slot6stateEnum? Slot6state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:7 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:7 Link Speed configuration  </value>
        [DataMember(Name="Slot7linkSpeed", EmitDefaultValue=false)]
        public Slot7linkSpeedEnum? Slot7linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 7 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 7 state configuration  </value>
        [DataMember(Name="Slot7state", EmitDefaultValue=false)]
        public Slot7stateEnum? Slot7state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:8 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:8 Link Speed configuration  </value>
        [DataMember(Name="Slot8linkSpeed", EmitDefaultValue=false)]
        public Slot8linkSpeedEnum? Slot8linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 8 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 8 state configuration  </value>
        [DataMember(Name="Slot8state", EmitDefaultValue=false)]
        public Slot8stateEnum? Slot8state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:9 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:9 Link Speed configuration  </value>
        [DataMember(Name="Slot9linkSpeed", EmitDefaultValue=false)]
        public Slot9linkSpeedEnum? Slot9linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot 9 state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot 9 state configuration  </value>
        [DataMember(Name="Slot9state", EmitDefaultValue=false)]
        public Slot9stateEnum? Slot9state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:FLOM Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:FLOM Link Speed configuration  </value>
        [DataMember(Name="SlotFlomLinkSpeed", EmitDefaultValue=false)]
        public SlotFlomLinkSpeedEnum? SlotFlomLinkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Front Nvme1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Front Nvme1 Link Speed configuration  </value>
        [DataMember(Name="SlotFrontNvme1linkSpeed", EmitDefaultValue=false)]
        public SlotFrontNvme1linkSpeedEnum? SlotFrontNvme1linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Front Nvme2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Front Nvme2 Link Speed configuration  </value>
        [DataMember(Name="SlotFrontNvme2linkSpeed", EmitDefaultValue=false)]
        public SlotFrontNvme2linkSpeedEnum? SlotFrontNvme2linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Front1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Front1 Link Speed configuration  </value>
        [DataMember(Name="SlotFrontSlot5linkSpeed", EmitDefaultValue=false)]
        public SlotFrontSlot5linkSpeedEnum? SlotFrontSlot5linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Front2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Front2 Link Speed configuration  </value>
        [DataMember(Name="SlotFrontSlot6linkSpeed", EmitDefaultValue=false)]
        public SlotFrontSlot6linkSpeedEnum? SlotFrontSlot6linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:HBA Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:HBA Link Speed configuration  </value>
        [DataMember(Name="SlotHbaLinkSpeed", EmitDefaultValue=false)]
        public SlotHbaLinkSpeedEnum? SlotHbaLinkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:HBA OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:HBA OptionROM configuration  </value>
        [DataMember(Name="SlotHbaState", EmitDefaultValue=false)]
        public SlotHbaStateEnum? SlotHbaState { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe LOM:1 Link configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe LOM:1 Link configuration  </value>
        [DataMember(Name="SlotLom1link", EmitDefaultValue=false)]
        public SlotLom1linkEnum? SlotLom1link { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe LOM:2 Link configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe LOM:2 Link configuration  </value>
        [DataMember(Name="SlotLom2link", EmitDefaultValue=false)]
        public SlotLom2linkEnum? SlotLom2link { get; set; }
        /// <summary>
        /// BIOS Token for setting Slot Mezz state configuration  
        /// </summary>
        /// <value>BIOS Token for setting Slot Mezz state configuration  </value>
        [DataMember(Name="SlotMezzState", EmitDefaultValue=false)]
        public SlotMezzStateEnum? SlotMezzState { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:MLOM Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:MLOM Link Speed configuration  </value>
        [DataMember(Name="SlotMlomLinkSpeed", EmitDefaultValue=false)]
        public SlotMlomLinkSpeedEnum? SlotMlomLinkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot MLOM OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot MLOM OptionROM configuration  </value>
        [DataMember(Name="SlotMlomState", EmitDefaultValue=false)]
        public SlotMlomStateEnum? SlotMlomState { get; set; }
        /// <summary>
        /// BIOS Token for setting MRAID Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting MRAID Link Speed configuration  </value>
        [DataMember(Name="SlotMraidLinkSpeed", EmitDefaultValue=false)]
        public SlotMraidLinkSpeedEnum? SlotMraidLinkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot MRAID OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot MRAID OptionROM configuration  </value>
        [DataMember(Name="SlotMraidState", EmitDefaultValue=false)]
        public SlotMraidStateEnum? SlotMraidState { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N10 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N10 OptionROM configuration  </value>
        [DataMember(Name="SlotN10state", EmitDefaultValue=false)]
        public SlotN10stateEnum? SlotN10state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N11 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N11 OptionROM configuration  </value>
        [DataMember(Name="SlotN11state", EmitDefaultValue=false)]
        public SlotN11stateEnum? SlotN11state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N12 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N12 OptionROM configuration  </value>
        [DataMember(Name="SlotN12state", EmitDefaultValue=false)]
        public SlotN12stateEnum? SlotN12state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N13 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N13 OptionROM configuration  </value>
        [DataMember(Name="SlotN13state", EmitDefaultValue=false)]
        public SlotN13stateEnum? SlotN13state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N14 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N14 OptionROM configuration  </value>
        [DataMember(Name="SlotN14state", EmitDefaultValue=false)]
        public SlotN14stateEnum? SlotN14state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N15 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N15 OptionROM configuration  </value>
        [DataMember(Name="SlotN15state", EmitDefaultValue=false)]
        public SlotN15stateEnum? SlotN15state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N16 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N16 OptionROM configuration  </value>
        [DataMember(Name="SlotN16state", EmitDefaultValue=false)]
        public SlotN16stateEnum? SlotN16state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N17 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N17 OptionROM configuration  </value>
        [DataMember(Name="SlotN17state", EmitDefaultValue=false)]
        public SlotN17stateEnum? SlotN17state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N18 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N18 OptionROM configuration  </value>
        [DataMember(Name="SlotN18state", EmitDefaultValue=false)]
        public SlotN18stateEnum? SlotN18state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N19 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N19 OptionROM configuration  </value>
        [DataMember(Name="SlotN19state", EmitDefaultValue=false)]
        public SlotN19stateEnum? SlotN19state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N1 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N1 OptionROM configuration  </value>
        [DataMember(Name="SlotN1state", EmitDefaultValue=false)]
        public SlotN1stateEnum? SlotN1state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N20 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N20 OptionROM configuration  </value>
        [DataMember(Name="SlotN20state", EmitDefaultValue=false)]
        public SlotN20stateEnum? SlotN20state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N21 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N21 OptionROM configuration  </value>
        [DataMember(Name="SlotN21state", EmitDefaultValue=false)]
        public SlotN21stateEnum? SlotN21state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N22 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N22 OptionROM configuration  </value>
        [DataMember(Name="SlotN22state", EmitDefaultValue=false)]
        public SlotN22stateEnum? SlotN22state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N23 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N23 OptionROM configuration  </value>
        [DataMember(Name="SlotN23state", EmitDefaultValue=false)]
        public SlotN23stateEnum? SlotN23state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N24 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N24 OptionROM configuration  </value>
        [DataMember(Name="SlotN24state", EmitDefaultValue=false)]
        public SlotN24stateEnum? SlotN24state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N2 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N2 OptionROM configuration  </value>
        [DataMember(Name="SlotN2state", EmitDefaultValue=false)]
        public SlotN2stateEnum? SlotN2state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N3 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N3 OptionROM configuration  </value>
        [DataMember(Name="SlotN3state", EmitDefaultValue=false)]
        public SlotN3stateEnum? SlotN3state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N4 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N4 OptionROM configuration  </value>
        [DataMember(Name="SlotN4state", EmitDefaultValue=false)]
        public SlotN4stateEnum? SlotN4state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N5 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N5 OptionROM configuration  </value>
        [DataMember(Name="SlotN5state", EmitDefaultValue=false)]
        public SlotN5stateEnum? SlotN5state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N6 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N6 OptionROM configuration  </value>
        [DataMember(Name="SlotN6state", EmitDefaultValue=false)]
        public SlotN6stateEnum? SlotN6state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N7 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N7 OptionROM configuration  </value>
        [DataMember(Name="SlotN7state", EmitDefaultValue=false)]
        public SlotN7stateEnum? SlotN7state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N8 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N8 OptionROM configuration  </value>
        [DataMember(Name="SlotN8state", EmitDefaultValue=false)]
        public SlotN8stateEnum? SlotN8state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot N9 OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot N9 OptionROM configuration  </value>
        [DataMember(Name="SlotN9state", EmitDefaultValue=false)]
        public SlotN9stateEnum? SlotN9state { get; set; }
        /// <summary>
        /// BIOS Token for setting RAID Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting RAID Link Speed configuration  </value>
        [DataMember(Name="SlotRaidLinkSpeed", EmitDefaultValue=false)]
        public SlotRaidLinkSpeedEnum? SlotRaidLinkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot RAID OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot RAID OptionROM configuration  </value>
        [DataMember(Name="SlotRaidState", EmitDefaultValue=false)]
        public SlotRaidStateEnum? SlotRaidState { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear Nvme1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear Nvme1 Link Speed configuration  </value>
        [DataMember(Name="SlotRearNvme1linkSpeed", EmitDefaultValue=false)]
        public SlotRearNvme1linkSpeedEnum? SlotRearNvme1linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 1 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 1 OptionRom configuration  </value>
        [DataMember(Name="SlotRearNvme1state", EmitDefaultValue=false)]
        public SlotRearNvme1stateEnum? SlotRearNvme1state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear Nvme2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear Nvme2 Link Speed configuration  </value>
        [DataMember(Name="SlotRearNvme2linkSpeed", EmitDefaultValue=false)]
        public SlotRearNvme2linkSpeedEnum? SlotRearNvme2linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 2 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 2 OptionRom configuration  </value>
        [DataMember(Name="SlotRearNvme2state", EmitDefaultValue=false)]
        public SlotRearNvme2stateEnum? SlotRearNvme2state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 3 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 3 OptionRom configuration  </value>
        [DataMember(Name="SlotRearNvme3state", EmitDefaultValue=false)]
        public SlotRearNvme3stateEnum? SlotRearNvme3state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 4 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 4 OptionRom configuration  </value>
        [DataMember(Name="SlotRearNvme4state", EmitDefaultValue=false)]
        public SlotRearNvme4stateEnum? SlotRearNvme4state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 5 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 5 OptionRom configuration  </value>
        [DataMember(Name="SlotRearNvme5state", EmitDefaultValue=false)]
        public SlotRearNvme5stateEnum? SlotRearNvme5state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 6 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 6 OptionRom configuration  </value>
        [DataMember(Name="SlotRearNvme6state", EmitDefaultValue=false)]
        public SlotRearNvme6stateEnum? SlotRearNvme6state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 7 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 7 OptionRom configuration  </value>
        [DataMember(Name="SlotRearNvme7state", EmitDefaultValue=false)]
        public SlotRearNvme7stateEnum? SlotRearNvme7state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Rear NVME 8 OptionRom configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Rear NVME 8 OptionRom configuration  </value>
        [DataMember(Name="SlotRearNvme8state", EmitDefaultValue=false)]
        public SlotRearNvme8stateEnum? SlotRearNvme8state { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser1 Link Speed configuration  </value>
        [DataMember(Name="SlotRiser1linkSpeed", EmitDefaultValue=false)]
        public SlotRiser1linkSpeedEnum? SlotRiser1linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser1 Slot1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser1 Slot1 Link Speed configuration  </value>
        [DataMember(Name="SlotRiser1slot1linkSpeed", EmitDefaultValue=false)]
        public SlotRiser1slot1linkSpeedEnum? SlotRiser1slot1linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser1 Slot2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser1 Slot2 Link Speed configuration  </value>
        [DataMember(Name="SlotRiser1slot2linkSpeed", EmitDefaultValue=false)]
        public SlotRiser1slot2linkSpeedEnum? SlotRiser1slot2linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser1 Slot3 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser1 Slot3 Link Speed configuration  </value>
        [DataMember(Name="SlotRiser1slot3linkSpeed", EmitDefaultValue=false)]
        public SlotRiser1slot3linkSpeedEnum? SlotRiser1slot3linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser2 Link Speed configuration  </value>
        [DataMember(Name="SlotRiser2linkSpeed", EmitDefaultValue=false)]
        public SlotRiser2linkSpeedEnum? SlotRiser2linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser2 Slot4 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser2 Slot4 Link Speed configuration  </value>
        [DataMember(Name="SlotRiser2slot4linkSpeed", EmitDefaultValue=false)]
        public SlotRiser2slot4linkSpeedEnum? SlotRiser2slot4linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser2 Slot5 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser2 Slot5 Link Speed configuration  </value>
        [DataMember(Name="SlotRiser2slot5linkSpeed", EmitDefaultValue=false)]
        public SlotRiser2slot5linkSpeedEnum? SlotRiser2slot5linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:Riser2 Slot6 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:Riser2 Slot6 Link Speed configuration  </value>
        [DataMember(Name="SlotRiser2slot6linkSpeed", EmitDefaultValue=false)]
        public SlotRiser2slot6linkSpeedEnum? SlotRiser2slot6linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:SAS OptionROM configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:SAS OptionROM configuration  </value>
        [DataMember(Name="SlotSasState", EmitDefaultValue=false)]
        public SlotSasStateEnum? SlotSasState { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:FrontPcie1 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:FrontPcie1 Link Speed configuration  </value>
        [DataMember(Name="SlotSsdSlot1linkSpeed", EmitDefaultValue=false)]
        public SlotSsdSlot1linkSpeedEnum? SlotSsdSlot1linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting PCIe Slot:FrontPcie2 Link Speed configuration  
        /// </summary>
        /// <value>BIOS Token for setting PCIe Slot:FrontPcie2 Link Speed configuration  </value>
        [DataMember(Name="SlotSsdSlot2linkSpeed", EmitDefaultValue=false)]
        public SlotSsdSlot2linkSpeedEnum? SlotSsdSlot2linkSpeed { get; set; }
        /// <summary>
        /// BIOS Token for setting SMEE configuration  
        /// </summary>
        /// <value>BIOS Token for setting SMEE configuration  </value>
        [DataMember(Name="Smee", EmitDefaultValue=false)]
        public SmeeEnum? Smee { get; set; }
        /// <summary>
        /// BIOS Token for setting SMT Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting SMT Mode configuration  </value>
        [DataMember(Name="SmtMode", EmitDefaultValue=false)]
        public SmtModeEnum? SmtMode { get; set; }
        /// <summary>
        /// BIOS Token for setting Sub Numa Clustering configuration  
        /// </summary>
        /// <value>BIOS Token for setting Sub Numa Clustering configuration  </value>
        [DataMember(Name="Snc", EmitDefaultValue=false)]
        public SncEnum? Snc { get; set; }
        /// <summary>
        /// BIOS Token for setting Sparing Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting Sparing Mode configuration  </value>
        [DataMember(Name="SparingMode", EmitDefaultValue=false)]
        public SparingModeEnum? SparingMode { get; set; }
        /// <summary>
        /// BIOS Token for setting SR-IOV Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting SR-IOV Support configuration  </value>
        [DataMember(Name="SrIov", EmitDefaultValue=false)]
        public SrIovEnum? SrIov { get; set; }
        /// <summary>
        /// BIOS Token for setting DCU Streamer Prefetch configuration  
        /// </summary>
        /// <value>BIOS Token for setting DCU Streamer Prefetch configuration  </value>
        [DataMember(Name="StreamerPrefetch", EmitDefaultValue=false)]
        public StreamerPrefetchEnum? StreamerPrefetch { get; set; }
        /// <summary>
        /// BIOS Token for setting SVM Mode configuration  
        /// </summary>
        /// <value>BIOS Token for setting SVM Mode configuration  </value>
        [DataMember(Name="SvmMode", EmitDefaultValue=false)]
        public SvmModeEnum? SvmMode { get; set; }
        /// <summary>
        /// BIOS Token for setting Terminal Type configuration  
        /// </summary>
        /// <value>BIOS Token for setting Terminal Type configuration  </value>
        [DataMember(Name="TerminalType", EmitDefaultValue=false)]
        public TerminalTypeEnum? TerminalType { get; set; }
        /// <summary>
        /// BIOS Token for setting Trusted Platform Module State configuration  
        /// </summary>
        /// <value>BIOS Token for setting Trusted Platform Module State configuration  </value>
        [DataMember(Name="TpmControl", EmitDefaultValue=false)]
        public TpmControlEnum? TpmControl { get; set; }
        /// <summary>
        /// BIOS Token for setting TPM Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting TPM Support configuration  </value>
        [DataMember(Name="TpmSupport", EmitDefaultValue=false)]
        public TpmSupportEnum? TpmSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting Intel Trusted Execution Technology Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting Intel Trusted Execution Technology Support configuration  </value>
        [DataMember(Name="TxtSupport", EmitDefaultValue=false)]
        public TxtSupportEnum? TxtSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting Boot Order Rules configuration  
        /// </summary>
        /// <value>BIOS Token for setting Boot Order Rules configuration  </value>
        [DataMember(Name="UcsmBootOrderRule", EmitDefaultValue=false)]
        public UcsmBootOrderRuleEnum? UcsmBootOrderRule { get; set; }
        /// <summary>
        /// BIOS Token for setting Port 60/64 Emulation configuration  
        /// </summary>
        /// <value>BIOS Token for setting Port 60/64 Emulation configuration  </value>
        [DataMember(Name="UsbEmul6064", EmitDefaultValue=false)]
        public UsbEmul6064Enum? UsbEmul6064 { get; set; }
        /// <summary>
        /// BIOS Token for setting USB Port Front configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port Front configuration  </value>
        [DataMember(Name="UsbPortFront", EmitDefaultValue=false)]
        public UsbPortFrontEnum? UsbPortFront { get; set; }
        /// <summary>
        /// BIOS Token for setting USB Port Internal configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port Internal configuration  </value>
        [DataMember(Name="UsbPortInternal", EmitDefaultValue=false)]
        public UsbPortInternalEnum? UsbPortInternal { get; set; }
        /// <summary>
        /// BIOS Token for setting USB Port KVM configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port KVM configuration  </value>
        [DataMember(Name="UsbPortKvm", EmitDefaultValue=false)]
        public UsbPortKvmEnum? UsbPortKvm { get; set; }
        /// <summary>
        /// BIOS Token for setting USB Port Rear configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port Rear configuration  </value>
        [DataMember(Name="UsbPortRear", EmitDefaultValue=false)]
        public UsbPortRearEnum? UsbPortRear { get; set; }
        /// <summary>
        /// BIOS Token for setting USB Port SD Card configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port SD Card configuration  </value>
        [DataMember(Name="UsbPortSdCard", EmitDefaultValue=false)]
        public UsbPortSdCardEnum? UsbPortSdCard { get; set; }
        /// <summary>
        /// BIOS Token for setting USB Port VMedia configuration  
        /// </summary>
        /// <value>BIOS Token for setting USB Port VMedia configuration  </value>
        [DataMember(Name="UsbPortVmedia", EmitDefaultValue=false)]
        public UsbPortVmediaEnum? UsbPortVmedia { get; set; }
        /// <summary>
        /// BIOS Token for setting XHCI Legacy Support configuration  
        /// </summary>
        /// <value>BIOS Token for setting XHCI Legacy Support configuration  </value>
        [DataMember(Name="UsbXhciSupport", EmitDefaultValue=false)]
        public UsbXhciSupportEnum? UsbXhciSupport { get; set; }
        /// <summary>
        /// BIOS Token for setting VGA Priority configuration  
        /// </summary>
        /// <value>BIOS Token for setting VGA Priority configuration  </value>
        [DataMember(Name="VgaPriority", EmitDefaultValue=false)]
        public VgaPriorityEnum? VgaPriority { get; set; }
        /// <summary>
        /// BIOS Token for setting VMD Enablement configuration  
        /// </summary>
        /// <value>BIOS Token for setting VMD Enablement configuration  </value>
        [DataMember(Name="VmdEnable", EmitDefaultValue=false)]
        public VmdEnableEnum? VmdEnable { get; set; }
        /// <summary>
        /// BIOS Token for setting Workload Configuration configuration  
        /// </summary>
        /// <value>BIOS Token for setting Workload Configuration configuration  </value>
        [DataMember(Name="WorkLoadConfig", EmitDefaultValue=false)]
        public WorkLoadConfigEnum? WorkLoadConfig { get; set; }
        /// <summary>
        /// BIOS Token for setting XPT Prefetch configuration   
        /// </summary>
        /// <value>BIOS Token for setting XPT Prefetch configuration   </value>
        [DataMember(Name="XptPrefetch", EmitDefaultValue=false)]
        public XptPrefetchEnum? XptPrefetch { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BiosPolicy" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="Description">Description of the policy.  .</param>
        /// <param name="Name">Name of the policy.   .</param>
        /// <param name="AdjacentCacheLinePrefetch">BIOS Token for setting Adjacent Cache Line Prefetcher configuration   (default to AdjacentCacheLinePrefetchEnum.Platformdefault).</param>
        /// <param name="AllUsbDevices">BIOS Token for setting All USB Devices configuration   (default to AllUsbDevicesEnum.Platformdefault).</param>
        /// <param name="Altitude">BIOS Token for setting Altitude configuration   (default to AltitudeEnum.Platformdefault).</param>
        /// <param name="AspmSupport">BIOS Token for setting ASPM Support configuration   (default to AspmSupportEnum.Platformdefault).</param>
        /// <param name="AssertNmiOnPerr">BIOS Token for setting Assert NMI on PERR configuration   (default to AssertNmiOnPerrEnum.Platformdefault).</param>
        /// <param name="AssertNmiOnSerr">BIOS Token for setting Assert NMI on SERR configuration   (default to AssertNmiOnSerrEnum.Platformdefault).</param>
        /// <param name="AutoCcState">BIOS Token for setting Autonomous Core C-state configuration   (default to AutoCcStateEnum.Platformdefault).</param>
        /// <param name="AutonumousCstateEnable">BIOS Token for setting CPU Autonomous Cstate configuration   (default to AutonumousCstateEnableEnum.Platformdefault).</param>
        /// <param name="BaudRate">BIOS Token for setting Baud rate configuration   (default to BaudRateEnum.Platformdefault).</param>
        /// <param name="BmeDmaMitigation">BIOS Token for setting BME DMA Mitigation configuration   (default to BmeDmaMitigationEnum.Platformdefault).</param>
        /// <param name="BootOptionNumRetry">BIOS Token for setting Number of Retries configuration   (default to BootOptionNumRetryEnum.Platformdefault).</param>
        /// <param name="BootOptionReCoolDown">BIOS Token for setting Cool Down Time (sec) configuration   (default to BootOptionReCoolDownEnum.Platformdefault).</param>
        /// <param name="BootOptionRetry">BIOS Token for setting Boot option retry configuration   (default to BootOptionRetryEnum.Platformdefault).</param>
        /// <param name="BootPerformanceMode">BIOS Token for setting Boot Performance Mode configuration   (default to BootPerformanceModeEnum.Platformdefault).</param>
        /// <param name="CbsCmnCpuCpb">BIOS Token for setting Core Performance Boost configuration   (default to CbsCmnCpuCpbEnum.Platformdefault).</param>
        /// <param name="CbsCmnCpuGenDowncoreCtrl">BIOS Token for setting Downcore control configuration   (default to CbsCmnCpuGenDowncoreCtrlEnum.Platformdefault).</param>
        /// <param name="CbsCmnCpuGlobalCstateCtrl">BIOS Token for setting Global C-state Control configuration   (default to CbsCmnCpuGlobalCstateCtrlEnum.Platformdefault).</param>
        /// <param name="CbsCmnCpuL1streamHwPrefetcher">BIOS Token for setting L1 Stream HW Prefetcher configuration   (default to CbsCmnCpuL1streamHwPrefetcherEnum.Platformdefault).</param>
        /// <param name="CbsCmnCpuL2streamHwPrefetcher">BIOS Token for setting L2 Stream HW Prefetcher configuration   (default to CbsCmnCpuL2streamHwPrefetcherEnum.Platformdefault).</param>
        /// <param name="CbsCmnDeterminismSlider">BIOS Token for setting Determinism Slider configuration   (default to CbsCmnDeterminismSliderEnum.Platformdefault).</param>
        /// <param name="CbsCmnGnbNbIommu">BIOS Token for setting IOMMU configuration   (default to CbsCmnGnbNbIommuEnum.Platformdefault).</param>
        /// <param name="CbsCmnMemCtrlBankGroupSwapDdr4">BIOS Token for setting Bank Group Swap configuration   (default to CbsCmnMemCtrlBankGroupSwapDdr4Enum.Platformdefault).</param>
        /// <param name="CbsCmnMemMapBankInterleaveDdr4">BIOS Token for setting Chipselect Interleaving configuration   (default to CbsCmnMemMapBankInterleaveDdr4Enum.Platformdefault).</param>
        /// <param name="CbsCmncTdpCtl">BIOS Token for setting cTDP Control configuration   (default to CbsCmncTdpCtlEnum.Platformdefault).</param>
        /// <param name="CbsDfCmnMemIntlv">BIOS Token for setting Memory interleaving configuration   (default to CbsDfCmnMemIntlvEnum.Platformdefault).</param>
        /// <param name="CbsDfCmnMemIntlvSize">BIOS Token for setting Memory interleaving size configuration   (default to CbsDfCmnMemIntlvSizeEnum.Platformdefault).</param>
        /// <param name="CdnEnable">BIOS Token for setting Consistent Device Naming configuration   (default to CdnEnableEnum.Platformdefault).</param>
        /// <param name="CdnSupport">BIOS Token for setting CDN Support for LOM configuration   (default to CdnSupportEnum.Platformdefault).</param>
        /// <param name="ChannelInterLeave">BIOS Token for setting Channel Interleaving configuration   (default to ChannelInterLeaveEnum.Platformdefault).</param>
        /// <param name="CkeLowPolicy">BIOS Token for setting CKE Low Policy configuration   (default to CkeLowPolicyEnum.Platformdefault).</param>
        /// <param name="ClosedLoopThermThrotl">BIOS Token for setting Closed Loop Therm Throt configuration   (default to ClosedLoopThermThrotlEnum.Platformdefault).</param>
        /// <param name="CmciEnable">BIOS Token for setting Processor CMCI configuration   (default to CmciEnableEnum.Platformdefault).</param>
        /// <param name="ConfigTdp">BIOS Token for setting Config TDP configuration   (default to ConfigTdpEnum.Platformdefault).</param>
        /// <param name="ConsoleRedirection">BIOS Token for setting Console redirection configuration   (default to ConsoleRedirectionEnum.Platformdefault).</param>
        /// <param name="CoreMultiProcessing">BIOS Token for setting Core MultiProcessing configuration   (default to CoreMultiProcessingEnum.Platformdefault).</param>
        /// <param name="CpuEnergyPerformance">BIOS Token for setting Energy Performance configuration   (default to CpuEnergyPerformanceEnum.Platformdefault).</param>
        /// <param name="CpuFrequencyFloor">BIOS Token for setting Frequency Floor Override configuration   (default to CpuFrequencyFloorEnum.Platformdefault).</param>
        /// <param name="CpuPerformance">BIOS Token for setting CPU Performance configuration   (default to CpuPerformanceEnum.Platformdefault).</param>
        /// <param name="CpuPowerManagement">BIOS Token for setting Power Technology configuration   (default to CpuPowerManagementEnum.Platformdefault).</param>
        /// <param name="DemandScrub">BIOS Token for setting Demand Scrub configuration   (default to DemandScrubEnum.Platformdefault).</param>
        /// <param name="DirectCacheAccess">BIOS Token for setting Direct Cache Access Support configuration   (default to DirectCacheAccessEnum.Platformdefault).</param>
        /// <param name="DramClockThrottling">BIOS Token for setting DRAM Clock Throttling configuration   (default to DramClockThrottlingEnum.Platformdefault).</param>
        /// <param name="DramRefreshRate">BIOS Token for setting DRAM Refresh Rate configuration   (default to DramRefreshRateEnum.Platformdefault).</param>
        /// <param name="EnergyEfficientTurbo">BIOS Token for setting Energy Efficient Turbo configuration   (default to EnergyEfficientTurboEnum.Platformdefault).</param>
        /// <param name="EngPerfTuning">BIOS Token for setting Energy Performance Tuning configuration   (default to EngPerfTuningEnum.Platformdefault).</param>
        /// <param name="EnhancedIntelSpeedStepTech">BIOS Token for setting Enhanced Intel Speedstep(R) Technology configuration   (default to EnhancedIntelSpeedStepTechEnum.Platformdefault).</param>
        /// <param name="EppProfile">BIOS Token for setting EPP Profile configuration   (default to EppProfileEnum.Platformdefault).</param>
        /// <param name="ExecuteDisableBit">BIOS Token for setting Execute Disable Bit configuration   (default to ExecuteDisableBitEnum.Platformdefault).</param>
        /// <param name="ExtendedApic">BIOS Token for setting Local X2 Apic configuration   (default to ExtendedApicEnum.Platformdefault).</param>
        /// <param name="FlowControl">BIOS Token for setting Flow Control configuration   (default to FlowControlEnum.Platformdefault).</param>
        /// <param name="Frb2enable">BIOS Token for setting FRB-2 Timer configuration   (default to Frb2enableEnum.Platformdefault).</param>
        /// <param name="HardwarePrefetch">BIOS Token for setting Hardware Prefetcher configuration   (default to HardwarePrefetchEnum.Platformdefault).</param>
        /// <param name="HwpmEnable">BIOS Token for setting CPU Hardware Power Management configuration   (default to HwpmEnableEnum.Platformdefault).</param>
        /// <param name="ImcInterleave">BIOS Token for setting IMC Interleaving configuration   (default to ImcInterleaveEnum.Platformdefault).</param>
        /// <param name="IntelHyperThreadingTech">BIOS Token for setting Intel HyperThreading Tech configuration   (default to IntelHyperThreadingTechEnum.Platformdefault).</param>
        /// <param name="IntelTurboBoostTech">BIOS Token for setting Intel Turbo Boost Tech configuration   (default to IntelTurboBoostTechEnum.Platformdefault).</param>
        /// <param name="IntelVirtualizationTechnology">BIOS Token for setting Intel(R) VT configuration   (default to IntelVirtualizationTechnologyEnum.Platformdefault).</param>
        /// <param name="IntelVtForDirectedIo">BIOS Token for setting Intel VT for directed IO configuration   (default to IntelVtForDirectedIoEnum.Platformdefault).</param>
        /// <param name="IntelVtdCoherencySupport">BIOS Token for setting Intel(R) VT-d Coherency Support configuration   (default to IntelVtdCoherencySupportEnum.Platformdefault).</param>
        /// <param name="IntelVtdInterruptRemapping">BIOS Token for setting Intel(R) VT-d Interrupt Remapping configuration   (default to IntelVtdInterruptRemappingEnum.Platformdefault).</param>
        /// <param name="IntelVtdPassThroughDmaSupport">BIOS Token for setting Intel(R) VT-d PassThrough DMA support configuration   (default to IntelVtdPassThroughDmaSupportEnum.Platformdefault).</param>
        /// <param name="IntelVtdatsSupport">BIOS Token for setting Intel VTD ATS support configuration   (default to IntelVtdatsSupportEnum.Platformdefault).</param>
        /// <param name="IohErrorEnable">BIOS Token for setting IIO Error Enable configuration   (default to IohErrorEnableEnum.Platformdefault).</param>
        /// <param name="IohResource">BIOS Token for setting IOH Resource Allocation configuration   (default to IohResourceEnum.Platformdefault).</param>
        /// <param name="IpPrefetch">BIOS Token for setting DCU IP Prefetcher configuration   (default to IpPrefetchEnum.Platformdefault).</param>
        /// <param name="Ipv6pxe">BIOS Token for setting IPV6 PXE Support configuration   (default to Ipv6pxeEnum.Platformdefault).</param>
        /// <param name="KtiPrefetch">BIOS Token for setting KTI Prefetch configuration   (default to KtiPrefetchEnum.Platformdefault).</param>
        /// <param name="LegacyOsRedirection">BIOS Token for setting Legacy OS redirection configuration   (default to LegacyOsRedirectionEnum.Platformdefault).</param>
        /// <param name="LegacyUsbSupport">BIOS Token for setting Legacy USB Support configuration   (default to LegacyUsbSupportEnum.Platformdefault).</param>
        /// <param name="LlcPrefetch">BIOS Token for setting LLC Prefetch configuration   (default to LlcPrefetchEnum.Platformdefault).</param>
        /// <param name="LomPort0state">BIOS Token for setting LOM Port 0 OptionROM configuration   (default to LomPort0stateEnum.Platformdefault).</param>
        /// <param name="LomPort1state">BIOS Token for setting LOM Port 1 OptionRom configuration   (default to LomPort1stateEnum.Platformdefault).</param>
        /// <param name="LomPort2state">BIOS Token for setting LOM Port 2 OptionRom configuration   (default to LomPort2stateEnum.Platformdefault).</param>
        /// <param name="LomPort3state">BIOS Token for setting LOM Port 3 OptionRom configuration   (default to LomPort3stateEnum.Platformdefault).</param>
        /// <param name="LomPortsAllState">BIOS Token for setting All Onboard LOM Ports configuration   (default to LomPortsAllStateEnum.Platformdefault).</param>
        /// <param name="LvDdrMode">BIOS Token for setting Low Voltage DDR Mode configuration   (default to LvDdrModeEnum.Platformdefault).</param>
        /// <param name="MakeDeviceNonBootable">BIOS Token for setting Make Device Non Bootable configuration   (default to MakeDeviceNonBootableEnum.Platformdefault).</param>
        /// <param name="MemoryInterLeave">BIOS Token for setting Memory Interleaving configuration   (default to MemoryInterLeaveEnum.Platformdefault).</param>
        /// <param name="MemoryMappedIoAbove4gb">BIOS Token for setting Memory mapped IO above 4GB configuration   (default to MemoryMappedIoAbove4gbEnum.Platformdefault).</param>
        /// <param name="MirroringMode">BIOS Token for setting Mirroring Mode configuration   (default to MirroringModeEnum.Platformdefault).</param>
        /// <param name="MmcfgBase">BIOS Token for setting MMCFG BASE configuration   (default to MmcfgBaseEnum.Platformdefault).</param>
        /// <param name="NumaOptimized">BIOS Token for setting NUMA optimized configuration   (default to NumaOptimizedEnum.Platformdefault).</param>
        /// <param name="Onboard10gbitLom">BIOS Token for setting Onboard 10Gbit LOM configuration   (default to Onboard10gbitLomEnum.Platformdefault).</param>
        /// <param name="OnboardGbitLom">BIOS Token for setting Onboard Gbit LOM configuration   (default to OnboardGbitLomEnum.Platformdefault).</param>
        /// <param name="OnboardScuStorageSupport">BIOS Token for setting Onboard SCU Storage Support configuration   (default to OnboardScuStorageSupportEnum.Platformdefault).</param>
        /// <param name="OnboardScuStorageSwStack">BIOS Token for setting Onboard SCU Storage SW Stack configuration   (default to OnboardScuStorageSwStackEnum.Platformdefault).</param>
        /// <param name="Organization">Organization .</param>
        /// <param name="OsBootWatchdogTimer">BIOS Token for setting OS Boot Watchdog Timer configuration   (default to OsBootWatchdogTimerEnum.Platformdefault).</param>
        /// <param name="OsBootWatchdogTimerPolicy">BIOS Token for setting OS Boot Watchdog Timer Policy configuration   (default to OsBootWatchdogTimerPolicyEnum.Platformdefault).</param>
        /// <param name="OsBootWatchdogTimerTimeout">BIOS Token for setting OS Boot Watchdog Timer Timeout configuration   (default to OsBootWatchdogTimerTimeoutEnum.Platformdefault).</param>
        /// <param name="OutOfBandMgmtPort">BIOS Token for setting Out-of-Band Mgmt Port configuration   (default to OutOfBandMgmtPortEnum.Platformdefault).</param>
        /// <param name="PackageCstateLimit">BIOS Token for setting Package C State Limit configuration   (default to PackageCstateLimitEnum.Platformdefault).</param>
        /// <param name="PatrolScrub">BIOS Token for setting Patrol Scrub configuration   (default to PatrolScrubEnum.Platformdefault).</param>
        /// <param name="PatrolScrubDuration">BIOS Token for setting Patrol Scrub Interval configuration   (default to PatrolScrubDurationEnum.Platformdefault).</param>
        /// <param name="PcIeSsdHotPlugSupport">BIOS Token for setting NVMe SSD Hot-Plug Support configuration   (default to PcIeSsdHotPlugSupportEnum.Platformdefault).</param>
        /// <param name="PchUsb30mode">BIOS Token for setting xHCI Mode configuration   (default to PchUsb30modeEnum.Platformdefault).</param>
        /// <param name="PciOptionRoMs">BIOS Token for setting All PCIe Slots OptionROM configuration   (default to PciOptionRoMsEnum.Platformdefault).</param>
        /// <param name="PciRomClp">BIOS Token for setting PCI ROM CLP configuration   (default to PciRomClpEnum.Platformdefault).</param>
        /// <param name="PopSupport">BIOS Token for setting Power ON Password configuration   (default to PopSupportEnum.Platformdefault).</param>
        /// <param name="PostErrorPause">BIOS Token for setting POST Error Pause configuration   (default to PostErrorPauseEnum.Platformdefault).</param>
        /// <param name="ProcessorC1e">BIOS Token for setting Processor C1E configuration   (default to ProcessorC1eEnum.Platformdefault).</param>
        /// <param name="ProcessorC3report">BIOS Token for setting Processor C3 Report configuration   (default to ProcessorC3reportEnum.Platformdefault).</param>
        /// <param name="ProcessorC6report">BIOS Token for setting Processor C6 Report configuration   (default to ProcessorC6reportEnum.Platformdefault).</param>
        /// <param name="ProcessorCstate">BIOS Token for setting CPU C State configuration   (default to ProcessorCstateEnum.Platformdefault).</param>
        /// <param name="Profiles">Relationship to the profile objects .</param>
        /// <param name="Psata">BIOS Token for setting P-SATA mode configuration   (default to PsataEnum.Platformdefault).</param>
        /// <param name="PstateCoordType">BIOS Token for setting P-STATE Coordination configuration   (default to PstateCoordTypeEnum.Platformdefault).</param>
        /// <param name="PuttyKeyPad">BIOS Token for setting Putty KeyPad configuration   (default to PuttyKeyPadEnum.Platformdefault).</param>
        /// <param name="PwrPerfTuning">BIOS Token for setting Power Performance Tuning configuration   (default to PwrPerfTuningEnum.Platformdefault).</param>
        /// <param name="QpiLinkFrequency">BIOS Token for setting QPI Link Frequency Select configuration   (default to QpiLinkFrequencyEnum.Platformdefault).</param>
        /// <param name="QpiSnoopMode">BIOS Token for setting QPI Snoop Mode configuration   (default to QpiSnoopModeEnum.Platformdefault).</param>
        /// <param name="RankInterLeave">BIOS Token for setting Rank Interleaving configuration   (default to RankInterLeaveEnum.Platformdefault).</param>
        /// <param name="RedirectionAfterPost">BIOS Token for setting Redirection After BIOS POST configuration   (default to RedirectionAfterPostEnum.Platformdefault).</param>
        /// <param name="SataModeSelect">BIOS Token for setting SATA mode configuration   (default to SataModeSelectEnum.Platformdefault).</param>
        /// <param name="SelectMemoryRasConfiguration">BIOS Token for setting SelectMemory RAS configuration configuration   (default to SelectMemoryRasConfigurationEnum.Platformdefault).</param>
        /// <param name="SerialPortAenable">BIOS Token for setting Serial A Enable configuration   (default to SerialPortAenableEnum.Platformdefault).</param>
        /// <param name="SinglePctlEnable">BIOS Token for setting Single PCTL configuration   (default to SinglePctlEnableEnum.Platformdefault).</param>
        /// <param name="Slot10linkSpeed">BIOS Token for setting PCIe Slot:10 Link Speed configuration   (default to Slot10linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot10state">BIOS Token for setting Slot 10 state configuration   (default to Slot10stateEnum.Platformdefault).</param>
        /// <param name="Slot11linkSpeed">BIOS Token for setting PCIe Slot:11 Link Speed configuration   (default to Slot11linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot11state">BIOS Token for setting Slot 11 state configuration   (default to Slot11stateEnum.Platformdefault).</param>
        /// <param name="Slot12linkSpeed">BIOS Token for setting PCIe Slot:12 Link Speed configuration   (default to Slot12linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot12state">BIOS Token for setting Slot 12 state configuration   (default to Slot12stateEnum.Platformdefault).</param>
        /// <param name="Slot1linkSpeed">BIOS Token for setting PCIe Slot:1 Link Speed configuration   (default to Slot1linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot1state">BIOS Token for setting Slot 1 state configuration   (default to Slot1stateEnum.Platformdefault).</param>
        /// <param name="Slot2linkSpeed">BIOS Token for setting PCIe Slot:2 Link Speed configuration   (default to Slot2linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot2state">BIOS Token for setting Slot 2 state configuration   (default to Slot2stateEnum.Platformdefault).</param>
        /// <param name="Slot3linkSpeed">BIOS Token for setting PCIe Slot:3 Link Speed configuration   (default to Slot3linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot3state">BIOS Token for setting Slot 3 state configuration   (default to Slot3stateEnum.Platformdefault).</param>
        /// <param name="Slot4linkSpeed">BIOS Token for setting PCIe Slot:4 Link Speed configuration   (default to Slot4linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot4state">BIOS Token for setting Slot 4 state configuration   (default to Slot4stateEnum.Platformdefault).</param>
        /// <param name="Slot5linkSpeed">BIOS Token for setting PCIe Slot:5 Link Speed configuration   (default to Slot5linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot5state">BIOS Token for setting Slot 5 state configuration   (default to Slot5stateEnum.Platformdefault).</param>
        /// <param name="Slot6linkSpeed">BIOS Token for setting PCIe Slot:6 Link Speed configuration   (default to Slot6linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot6state">BIOS Token for setting Slot 6 state configuration   (default to Slot6stateEnum.Platformdefault).</param>
        /// <param name="Slot7linkSpeed">BIOS Token for setting PCIe Slot:7 Link Speed configuration   (default to Slot7linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot7state">BIOS Token for setting Slot 7 state configuration   (default to Slot7stateEnum.Platformdefault).</param>
        /// <param name="Slot8linkSpeed">BIOS Token for setting PCIe Slot:8 Link Speed configuration   (default to Slot8linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot8state">BIOS Token for setting Slot 8 state configuration   (default to Slot8stateEnum.Platformdefault).</param>
        /// <param name="Slot9linkSpeed">BIOS Token for setting PCIe Slot:9 Link Speed configuration   (default to Slot9linkSpeedEnum.Platformdefault).</param>
        /// <param name="Slot9state">BIOS Token for setting Slot 9 state configuration   (default to Slot9stateEnum.Platformdefault).</param>
        /// <param name="SlotFlomLinkSpeed">BIOS Token for setting PCIe Slot:FLOM Link Speed configuration   (default to SlotFlomLinkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotFrontNvme1linkSpeed">BIOS Token for setting PCIe Slot:Front Nvme1 Link Speed configuration   (default to SlotFrontNvme1linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotFrontNvme2linkSpeed">BIOS Token for setting PCIe Slot:Front Nvme2 Link Speed configuration   (default to SlotFrontNvme2linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotFrontSlot5linkSpeed">BIOS Token for setting PCIe Slot:Front1 Link Speed configuration   (default to SlotFrontSlot5linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotFrontSlot6linkSpeed">BIOS Token for setting PCIe Slot:Front2 Link Speed configuration   (default to SlotFrontSlot6linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotHbaLinkSpeed">BIOS Token for setting PCIe Slot:HBA Link Speed configuration   (default to SlotHbaLinkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotHbaState">BIOS Token for setting PCIe Slot:HBA OptionROM configuration   (default to SlotHbaStateEnum.Platformdefault).</param>
        /// <param name="SlotLom1link">BIOS Token for setting PCIe LOM:1 Link configuration   (default to SlotLom1linkEnum.Platformdefault).</param>
        /// <param name="SlotLom2link">BIOS Token for setting PCIe LOM:2 Link configuration   (default to SlotLom2linkEnum.Platformdefault).</param>
        /// <param name="SlotMezzState">BIOS Token for setting Slot Mezz state configuration   (default to SlotMezzStateEnum.Platformdefault).</param>
        /// <param name="SlotMlomLinkSpeed">BIOS Token for setting PCIe Slot:MLOM Link Speed configuration   (default to SlotMlomLinkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotMlomState">BIOS Token for setting PCIe Slot MLOM OptionROM configuration   (default to SlotMlomStateEnum.Platformdefault).</param>
        /// <param name="SlotMraidLinkSpeed">BIOS Token for setting MRAID Link Speed configuration   (default to SlotMraidLinkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotMraidState">BIOS Token for setting PCIe Slot MRAID OptionROM configuration   (default to SlotMraidStateEnum.Platformdefault).</param>
        /// <param name="SlotN10state">BIOS Token for setting PCIe Slot N10 OptionROM configuration   (default to SlotN10stateEnum.Platformdefault).</param>
        /// <param name="SlotN11state">BIOS Token for setting PCIe Slot N11 OptionROM configuration   (default to SlotN11stateEnum.Platformdefault).</param>
        /// <param name="SlotN12state">BIOS Token for setting PCIe Slot N12 OptionROM configuration   (default to SlotN12stateEnum.Platformdefault).</param>
        /// <param name="SlotN13state">BIOS Token for setting PCIe Slot N13 OptionROM configuration   (default to SlotN13stateEnum.Platformdefault).</param>
        /// <param name="SlotN14state">BIOS Token for setting PCIe Slot N14 OptionROM configuration   (default to SlotN14stateEnum.Platformdefault).</param>
        /// <param name="SlotN15state">BIOS Token for setting PCIe Slot N15 OptionROM configuration   (default to SlotN15stateEnum.Platformdefault).</param>
        /// <param name="SlotN16state">BIOS Token for setting PCIe Slot N16 OptionROM configuration   (default to SlotN16stateEnum.Platformdefault).</param>
        /// <param name="SlotN17state">BIOS Token for setting PCIe Slot N17 OptionROM configuration   (default to SlotN17stateEnum.Platformdefault).</param>
        /// <param name="SlotN18state">BIOS Token for setting PCIe Slot N18 OptionROM configuration   (default to SlotN18stateEnum.Platformdefault).</param>
        /// <param name="SlotN19state">BIOS Token for setting PCIe Slot N19 OptionROM configuration   (default to SlotN19stateEnum.Platformdefault).</param>
        /// <param name="SlotN1state">BIOS Token for setting PCIe Slot N1 OptionROM configuration   (default to SlotN1stateEnum.Platformdefault).</param>
        /// <param name="SlotN20state">BIOS Token for setting PCIe Slot N20 OptionROM configuration   (default to SlotN20stateEnum.Platformdefault).</param>
        /// <param name="SlotN21state">BIOS Token for setting PCIe Slot N21 OptionROM configuration   (default to SlotN21stateEnum.Platformdefault).</param>
        /// <param name="SlotN22state">BIOS Token for setting PCIe Slot N22 OptionROM configuration   (default to SlotN22stateEnum.Platformdefault).</param>
        /// <param name="SlotN23state">BIOS Token for setting PCIe Slot N23 OptionROM configuration   (default to SlotN23stateEnum.Platformdefault).</param>
        /// <param name="SlotN24state">BIOS Token for setting PCIe Slot N24 OptionROM configuration   (default to SlotN24stateEnum.Platformdefault).</param>
        /// <param name="SlotN2state">BIOS Token for setting PCIe Slot N2 OptionROM configuration   (default to SlotN2stateEnum.Platformdefault).</param>
        /// <param name="SlotN3state">BIOS Token for setting PCIe Slot N3 OptionROM configuration   (default to SlotN3stateEnum.Platformdefault).</param>
        /// <param name="SlotN4state">BIOS Token for setting PCIe Slot N4 OptionROM configuration   (default to SlotN4stateEnum.Platformdefault).</param>
        /// <param name="SlotN5state">BIOS Token for setting PCIe Slot N5 OptionROM configuration   (default to SlotN5stateEnum.Platformdefault).</param>
        /// <param name="SlotN6state">BIOS Token for setting PCIe Slot N6 OptionROM configuration   (default to SlotN6stateEnum.Platformdefault).</param>
        /// <param name="SlotN7state">BIOS Token for setting PCIe Slot N7 OptionROM configuration   (default to SlotN7stateEnum.Platformdefault).</param>
        /// <param name="SlotN8state">BIOS Token for setting PCIe Slot N8 OptionROM configuration   (default to SlotN8stateEnum.Platformdefault).</param>
        /// <param name="SlotN9state">BIOS Token for setting PCIe Slot N9 OptionROM configuration   (default to SlotN9stateEnum.Platformdefault).</param>
        /// <param name="SlotRaidLinkSpeed">BIOS Token for setting RAID Link Speed configuration   (default to SlotRaidLinkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotRaidState">BIOS Token for setting PCIe Slot RAID OptionROM configuration   (default to SlotRaidStateEnum.Platformdefault).</param>
        /// <param name="SlotRearNvme1linkSpeed">BIOS Token for setting PCIe Slot:Rear Nvme1 Link Speed configuration   (default to SlotRearNvme1linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotRearNvme1state">BIOS Token for setting PCIe Slot:Rear NVME 1 OptionRom configuration   (default to SlotRearNvme1stateEnum.Platformdefault).</param>
        /// <param name="SlotRearNvme2linkSpeed">BIOS Token for setting PCIe Slot:Rear Nvme2 Link Speed configuration   (default to SlotRearNvme2linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotRearNvme2state">BIOS Token for setting PCIe Slot:Rear NVME 2 OptionRom configuration   (default to SlotRearNvme2stateEnum.Platformdefault).</param>
        /// <param name="SlotRearNvme3state">BIOS Token for setting PCIe Slot:Rear NVME 3 OptionRom configuration   (default to SlotRearNvme3stateEnum.Platformdefault).</param>
        /// <param name="SlotRearNvme4state">BIOS Token for setting PCIe Slot:Rear NVME 4 OptionRom configuration   (default to SlotRearNvme4stateEnum.Platformdefault).</param>
        /// <param name="SlotRearNvme5state">BIOS Token for setting PCIe Slot:Rear NVME 5 OptionRom configuration   (default to SlotRearNvme5stateEnum.Platformdefault).</param>
        /// <param name="SlotRearNvme6state">BIOS Token for setting PCIe Slot:Rear NVME 6 OptionRom configuration   (default to SlotRearNvme6stateEnum.Platformdefault).</param>
        /// <param name="SlotRearNvme7state">BIOS Token for setting PCIe Slot:Rear NVME 7 OptionRom configuration   (default to SlotRearNvme7stateEnum.Platformdefault).</param>
        /// <param name="SlotRearNvme8state">BIOS Token for setting PCIe Slot:Rear NVME 8 OptionRom configuration   (default to SlotRearNvme8stateEnum.Platformdefault).</param>
        /// <param name="SlotRiser1linkSpeed">BIOS Token for setting PCIe Slot:Riser1 Link Speed configuration   (default to SlotRiser1linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotRiser1slot1linkSpeed">BIOS Token for setting PCIe Slot:Riser1 Slot1 Link Speed configuration   (default to SlotRiser1slot1linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotRiser1slot2linkSpeed">BIOS Token for setting PCIe Slot:Riser1 Slot2 Link Speed configuration   (default to SlotRiser1slot2linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotRiser1slot3linkSpeed">BIOS Token for setting PCIe Slot:Riser1 Slot3 Link Speed configuration   (default to SlotRiser1slot3linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotRiser2linkSpeed">BIOS Token for setting PCIe Slot:Riser2 Link Speed configuration   (default to SlotRiser2linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotRiser2slot4linkSpeed">BIOS Token for setting PCIe Slot:Riser2 Slot4 Link Speed configuration   (default to SlotRiser2slot4linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotRiser2slot5linkSpeed">BIOS Token for setting PCIe Slot:Riser2 Slot5 Link Speed configuration   (default to SlotRiser2slot5linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotRiser2slot6linkSpeed">BIOS Token for setting PCIe Slot:Riser2 Slot6 Link Speed configuration   (default to SlotRiser2slot6linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotSasState">BIOS Token for setting PCIe Slot:SAS OptionROM configuration   (default to SlotSasStateEnum.Platformdefault).</param>
        /// <param name="SlotSsdSlot1linkSpeed">BIOS Token for setting PCIe Slot:FrontPcie1 Link Speed configuration   (default to SlotSsdSlot1linkSpeedEnum.Platformdefault).</param>
        /// <param name="SlotSsdSlot2linkSpeed">BIOS Token for setting PCIe Slot:FrontPcie2 Link Speed configuration   (default to SlotSsdSlot2linkSpeedEnum.Platformdefault).</param>
        /// <param name="Smee">BIOS Token for setting SMEE configuration   (default to SmeeEnum.Platformdefault).</param>
        /// <param name="SmtMode">BIOS Token for setting SMT Mode configuration   (default to SmtModeEnum.Platformdefault).</param>
        /// <param name="Snc">BIOS Token for setting Sub Numa Clustering configuration   (default to SncEnum.Platformdefault).</param>
        /// <param name="SparingMode">BIOS Token for setting Sparing Mode configuration   (default to SparingModeEnum.Platformdefault).</param>
        /// <param name="SrIov">BIOS Token for setting SR-IOV Support configuration   (default to SrIovEnum.Platformdefault).</param>
        /// <param name="StreamerPrefetch">BIOS Token for setting DCU Streamer Prefetch configuration   (default to StreamerPrefetchEnum.Platformdefault).</param>
        /// <param name="SvmMode">BIOS Token for setting SVM Mode configuration   (default to SvmModeEnum.Platformdefault).</param>
        /// <param name="TerminalType">BIOS Token for setting Terminal Type configuration   (default to TerminalTypeEnum.Platformdefault).</param>
        /// <param name="TpmControl">BIOS Token for setting Trusted Platform Module State configuration   (default to TpmControlEnum.Platformdefault).</param>
        /// <param name="TpmSupport">BIOS Token for setting TPM Support configuration   (default to TpmSupportEnum.Platformdefault).</param>
        /// <param name="TxtSupport">BIOS Token for setting Intel Trusted Execution Technology Support configuration   (default to TxtSupportEnum.Platformdefault).</param>
        /// <param name="UcsmBootOrderRule">BIOS Token for setting Boot Order Rules configuration   (default to UcsmBootOrderRuleEnum.Platformdefault).</param>
        /// <param name="UsbEmul6064">BIOS Token for setting Port 60/64 Emulation configuration   (default to UsbEmul6064Enum.Platformdefault).</param>
        /// <param name="UsbPortFront">BIOS Token for setting USB Port Front configuration   (default to UsbPortFrontEnum.Platformdefault).</param>
        /// <param name="UsbPortInternal">BIOS Token for setting USB Port Internal configuration   (default to UsbPortInternalEnum.Platformdefault).</param>
        /// <param name="UsbPortKvm">BIOS Token for setting USB Port KVM configuration   (default to UsbPortKvmEnum.Platformdefault).</param>
        /// <param name="UsbPortRear">BIOS Token for setting USB Port Rear configuration   (default to UsbPortRearEnum.Platformdefault).</param>
        /// <param name="UsbPortSdCard">BIOS Token for setting USB Port SD Card configuration   (default to UsbPortSdCardEnum.Platformdefault).</param>
        /// <param name="UsbPortVmedia">BIOS Token for setting USB Port VMedia configuration   (default to UsbPortVmediaEnum.Platformdefault).</param>
        /// <param name="UsbXhciSupport">BIOS Token for setting XHCI Legacy Support configuration   (default to UsbXhciSupportEnum.Platformdefault).</param>
        /// <param name="VgaPriority">BIOS Token for setting VGA Priority configuration   (default to VgaPriorityEnum.Platformdefault).</param>
        /// <param name="VmdEnable">BIOS Token for setting VMD Enablement configuration   (default to VmdEnableEnum.Platformdefault).</param>
        /// <param name="WorkLoadConfig">BIOS Token for setting Workload Configuration configuration   (default to WorkLoadConfigEnum.Platformdefault).</param>
        /// <param name="XptPrefetch">BIOS Token for setting XPT Prefetch configuration    (default to XptPrefetchEnum.Platformdefault).</param>
        public BiosPolicy(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), string Description = default(string), string Name = default(string), AdjacentCacheLinePrefetchEnum? AdjacentCacheLinePrefetch = AdjacentCacheLinePrefetchEnum.Platformdefault, AllUsbDevicesEnum? AllUsbDevices = AllUsbDevicesEnum.Platformdefault, AltitudeEnum? Altitude = AltitudeEnum.Platformdefault, AspmSupportEnum? AspmSupport = AspmSupportEnum.Platformdefault, AssertNmiOnPerrEnum? AssertNmiOnPerr = AssertNmiOnPerrEnum.Platformdefault, AssertNmiOnSerrEnum? AssertNmiOnSerr = AssertNmiOnSerrEnum.Platformdefault, AutoCcStateEnum? AutoCcState = AutoCcStateEnum.Platformdefault, AutonumousCstateEnableEnum? AutonumousCstateEnable = AutonumousCstateEnableEnum.Platformdefault, BaudRateEnum? BaudRate = BaudRateEnum.Platformdefault, BmeDmaMitigationEnum? BmeDmaMitigation = BmeDmaMitigationEnum.Platformdefault, BootOptionNumRetryEnum? BootOptionNumRetry = BootOptionNumRetryEnum.Platformdefault, BootOptionReCoolDownEnum? BootOptionReCoolDown = BootOptionReCoolDownEnum.Platformdefault, BootOptionRetryEnum? BootOptionRetry = BootOptionRetryEnum.Platformdefault, BootPerformanceModeEnum? BootPerformanceMode = BootPerformanceModeEnum.Platformdefault, CbsCmnCpuCpbEnum? CbsCmnCpuCpb = CbsCmnCpuCpbEnum.Platformdefault, CbsCmnCpuGenDowncoreCtrlEnum? CbsCmnCpuGenDowncoreCtrl = CbsCmnCpuGenDowncoreCtrlEnum.Platformdefault, CbsCmnCpuGlobalCstateCtrlEnum? CbsCmnCpuGlobalCstateCtrl = CbsCmnCpuGlobalCstateCtrlEnum.Platformdefault, CbsCmnCpuL1streamHwPrefetcherEnum? CbsCmnCpuL1streamHwPrefetcher = CbsCmnCpuL1streamHwPrefetcherEnum.Platformdefault, CbsCmnCpuL2streamHwPrefetcherEnum? CbsCmnCpuL2streamHwPrefetcher = CbsCmnCpuL2streamHwPrefetcherEnum.Platformdefault, CbsCmnDeterminismSliderEnum? CbsCmnDeterminismSlider = CbsCmnDeterminismSliderEnum.Platformdefault, CbsCmnGnbNbIommuEnum? CbsCmnGnbNbIommu = CbsCmnGnbNbIommuEnum.Platformdefault, CbsCmnMemCtrlBankGroupSwapDdr4Enum? CbsCmnMemCtrlBankGroupSwapDdr4 = CbsCmnMemCtrlBankGroupSwapDdr4Enum.Platformdefault, CbsCmnMemMapBankInterleaveDdr4Enum? CbsCmnMemMapBankInterleaveDdr4 = CbsCmnMemMapBankInterleaveDdr4Enum.Platformdefault, CbsCmncTdpCtlEnum? CbsCmncTdpCtl = CbsCmncTdpCtlEnum.Platformdefault, CbsDfCmnMemIntlvEnum? CbsDfCmnMemIntlv = CbsDfCmnMemIntlvEnum.Platformdefault, CbsDfCmnMemIntlvSizeEnum? CbsDfCmnMemIntlvSize = CbsDfCmnMemIntlvSizeEnum.Platformdefault, CdnEnableEnum? CdnEnable = CdnEnableEnum.Platformdefault, CdnSupportEnum? CdnSupport = CdnSupportEnum.Platformdefault, ChannelInterLeaveEnum? ChannelInterLeave = ChannelInterLeaveEnum.Platformdefault, CkeLowPolicyEnum? CkeLowPolicy = CkeLowPolicyEnum.Platformdefault, ClosedLoopThermThrotlEnum? ClosedLoopThermThrotl = ClosedLoopThermThrotlEnum.Platformdefault, CmciEnableEnum? CmciEnable = CmciEnableEnum.Platformdefault, ConfigTdpEnum? ConfigTdp = ConfigTdpEnum.Platformdefault, ConsoleRedirectionEnum? ConsoleRedirection = ConsoleRedirectionEnum.Platformdefault, CoreMultiProcessingEnum? CoreMultiProcessing = CoreMultiProcessingEnum.Platformdefault, CpuEnergyPerformanceEnum? CpuEnergyPerformance = CpuEnergyPerformanceEnum.Platformdefault, CpuFrequencyFloorEnum? CpuFrequencyFloor = CpuFrequencyFloorEnum.Platformdefault, CpuPerformanceEnum? CpuPerformance = CpuPerformanceEnum.Platformdefault, CpuPowerManagementEnum? CpuPowerManagement = CpuPowerManagementEnum.Platformdefault, DemandScrubEnum? DemandScrub = DemandScrubEnum.Platformdefault, DirectCacheAccessEnum? DirectCacheAccess = DirectCacheAccessEnum.Platformdefault, DramClockThrottlingEnum? DramClockThrottling = DramClockThrottlingEnum.Platformdefault, DramRefreshRateEnum? DramRefreshRate = DramRefreshRateEnum.Platformdefault, EnergyEfficientTurboEnum? EnergyEfficientTurbo = EnergyEfficientTurboEnum.Platformdefault, EngPerfTuningEnum? EngPerfTuning = EngPerfTuningEnum.Platformdefault, EnhancedIntelSpeedStepTechEnum? EnhancedIntelSpeedStepTech = EnhancedIntelSpeedStepTechEnum.Platformdefault, EppProfileEnum? EppProfile = EppProfileEnum.Platformdefault, ExecuteDisableBitEnum? ExecuteDisableBit = ExecuteDisableBitEnum.Platformdefault, ExtendedApicEnum? ExtendedApic = ExtendedApicEnum.Platformdefault, FlowControlEnum? FlowControl = FlowControlEnum.Platformdefault, Frb2enableEnum? Frb2enable = Frb2enableEnum.Platformdefault, HardwarePrefetchEnum? HardwarePrefetch = HardwarePrefetchEnum.Platformdefault, HwpmEnableEnum? HwpmEnable = HwpmEnableEnum.Platformdefault, ImcInterleaveEnum? ImcInterleave = ImcInterleaveEnum.Platformdefault, IntelHyperThreadingTechEnum? IntelHyperThreadingTech = IntelHyperThreadingTechEnum.Platformdefault, IntelTurboBoostTechEnum? IntelTurboBoostTech = IntelTurboBoostTechEnum.Platformdefault, IntelVirtualizationTechnologyEnum? IntelVirtualizationTechnology = IntelVirtualizationTechnologyEnum.Platformdefault, IntelVtForDirectedIoEnum? IntelVtForDirectedIo = IntelVtForDirectedIoEnum.Platformdefault, IntelVtdCoherencySupportEnum? IntelVtdCoherencySupport = IntelVtdCoherencySupportEnum.Platformdefault, IntelVtdInterruptRemappingEnum? IntelVtdInterruptRemapping = IntelVtdInterruptRemappingEnum.Platformdefault, IntelVtdPassThroughDmaSupportEnum? IntelVtdPassThroughDmaSupport = IntelVtdPassThroughDmaSupportEnum.Platformdefault, IntelVtdatsSupportEnum? IntelVtdatsSupport = IntelVtdatsSupportEnum.Platformdefault, IohErrorEnableEnum? IohErrorEnable = IohErrorEnableEnum.Platformdefault, IohResourceEnum? IohResource = IohResourceEnum.Platformdefault, IpPrefetchEnum? IpPrefetch = IpPrefetchEnum.Platformdefault, Ipv6pxeEnum? Ipv6pxe = Ipv6pxeEnum.Platformdefault, KtiPrefetchEnum? KtiPrefetch = KtiPrefetchEnum.Platformdefault, LegacyOsRedirectionEnum? LegacyOsRedirection = LegacyOsRedirectionEnum.Platformdefault, LegacyUsbSupportEnum? LegacyUsbSupport = LegacyUsbSupportEnum.Platformdefault, LlcPrefetchEnum? LlcPrefetch = LlcPrefetchEnum.Platformdefault, LomPort0stateEnum? LomPort0state = LomPort0stateEnum.Platformdefault, LomPort1stateEnum? LomPort1state = LomPort1stateEnum.Platformdefault, LomPort2stateEnum? LomPort2state = LomPort2stateEnum.Platformdefault, LomPort3stateEnum? LomPort3state = LomPort3stateEnum.Platformdefault, LomPortsAllStateEnum? LomPortsAllState = LomPortsAllStateEnum.Platformdefault, LvDdrModeEnum? LvDdrMode = LvDdrModeEnum.Platformdefault, MakeDeviceNonBootableEnum? MakeDeviceNonBootable = MakeDeviceNonBootableEnum.Platformdefault, MemoryInterLeaveEnum? MemoryInterLeave = MemoryInterLeaveEnum.Platformdefault, MemoryMappedIoAbove4gbEnum? MemoryMappedIoAbove4gb = MemoryMappedIoAbove4gbEnum.Platformdefault, MirroringModeEnum? MirroringMode = MirroringModeEnum.Platformdefault, MmcfgBaseEnum? MmcfgBase = MmcfgBaseEnum.Platformdefault, NumaOptimizedEnum? NumaOptimized = NumaOptimizedEnum.Platformdefault, Onboard10gbitLomEnum? Onboard10gbitLom = Onboard10gbitLomEnum.Platformdefault, OnboardGbitLomEnum? OnboardGbitLom = OnboardGbitLomEnum.Platformdefault, OnboardScuStorageSupportEnum? OnboardScuStorageSupport = OnboardScuStorageSupportEnum.Platformdefault, OnboardScuStorageSwStackEnum? OnboardScuStorageSwStack = OnboardScuStorageSwStackEnum.Platformdefault, IamAccountRef Organization = default(IamAccountRef), OsBootWatchdogTimerEnum? OsBootWatchdogTimer = OsBootWatchdogTimerEnum.Platformdefault, OsBootWatchdogTimerPolicyEnum? OsBootWatchdogTimerPolicy = OsBootWatchdogTimerPolicyEnum.Platformdefault, OsBootWatchdogTimerTimeoutEnum? OsBootWatchdogTimerTimeout = OsBootWatchdogTimerTimeoutEnum.Platformdefault, OutOfBandMgmtPortEnum? OutOfBandMgmtPort = OutOfBandMgmtPortEnum.Platformdefault, PackageCstateLimitEnum? PackageCstateLimit = PackageCstateLimitEnum.Platformdefault, PatrolScrubEnum? PatrolScrub = PatrolScrubEnum.Platformdefault, PatrolScrubDurationEnum? PatrolScrubDuration = PatrolScrubDurationEnum.Platformdefault, PcIeSsdHotPlugSupportEnum? PcIeSsdHotPlugSupport = PcIeSsdHotPlugSupportEnum.Platformdefault, PchUsb30modeEnum? PchUsb30mode = PchUsb30modeEnum.Platformdefault, PciOptionRoMsEnum? PciOptionRoMs = PciOptionRoMsEnum.Platformdefault, PciRomClpEnum? PciRomClp = PciRomClpEnum.Platformdefault, PopSupportEnum? PopSupport = PopSupportEnum.Platformdefault, PostErrorPauseEnum? PostErrorPause = PostErrorPauseEnum.Platformdefault, ProcessorC1eEnum? ProcessorC1e = ProcessorC1eEnum.Platformdefault, ProcessorC3reportEnum? ProcessorC3report = ProcessorC3reportEnum.Platformdefault, ProcessorC6reportEnum? ProcessorC6report = ProcessorC6reportEnum.Platformdefault, ProcessorCstateEnum? ProcessorCstate = ProcessorCstateEnum.Platformdefault, List<PolicyAbstractConfigProfileRef> Profiles = default(List<PolicyAbstractConfigProfileRef>), PsataEnum? Psata = PsataEnum.Platformdefault, PstateCoordTypeEnum? PstateCoordType = PstateCoordTypeEnum.Platformdefault, PuttyKeyPadEnum? PuttyKeyPad = PuttyKeyPadEnum.Platformdefault, PwrPerfTuningEnum? PwrPerfTuning = PwrPerfTuningEnum.Platformdefault, QpiLinkFrequencyEnum? QpiLinkFrequency = QpiLinkFrequencyEnum.Platformdefault, QpiSnoopModeEnum? QpiSnoopMode = QpiSnoopModeEnum.Platformdefault, RankInterLeaveEnum? RankInterLeave = RankInterLeaveEnum.Platformdefault, RedirectionAfterPostEnum? RedirectionAfterPost = RedirectionAfterPostEnum.Platformdefault, SataModeSelectEnum? SataModeSelect = SataModeSelectEnum.Platformdefault, SelectMemoryRasConfigurationEnum? SelectMemoryRasConfiguration = SelectMemoryRasConfigurationEnum.Platformdefault, SerialPortAenableEnum? SerialPortAenable = SerialPortAenableEnum.Platformdefault, SinglePctlEnableEnum? SinglePctlEnable = SinglePctlEnableEnum.Platformdefault, Slot10linkSpeedEnum? Slot10linkSpeed = Slot10linkSpeedEnum.Platformdefault, Slot10stateEnum? Slot10state = Slot10stateEnum.Platformdefault, Slot11linkSpeedEnum? Slot11linkSpeed = Slot11linkSpeedEnum.Platformdefault, Slot11stateEnum? Slot11state = Slot11stateEnum.Platformdefault, Slot12linkSpeedEnum? Slot12linkSpeed = Slot12linkSpeedEnum.Platformdefault, Slot12stateEnum? Slot12state = Slot12stateEnum.Platformdefault, Slot1linkSpeedEnum? Slot1linkSpeed = Slot1linkSpeedEnum.Platformdefault, Slot1stateEnum? Slot1state = Slot1stateEnum.Platformdefault, Slot2linkSpeedEnum? Slot2linkSpeed = Slot2linkSpeedEnum.Platformdefault, Slot2stateEnum? Slot2state = Slot2stateEnum.Platformdefault, Slot3linkSpeedEnum? Slot3linkSpeed = Slot3linkSpeedEnum.Platformdefault, Slot3stateEnum? Slot3state = Slot3stateEnum.Platformdefault, Slot4linkSpeedEnum? Slot4linkSpeed = Slot4linkSpeedEnum.Platformdefault, Slot4stateEnum? Slot4state = Slot4stateEnum.Platformdefault, Slot5linkSpeedEnum? Slot5linkSpeed = Slot5linkSpeedEnum.Platformdefault, Slot5stateEnum? Slot5state = Slot5stateEnum.Platformdefault, Slot6linkSpeedEnum? Slot6linkSpeed = Slot6linkSpeedEnum.Platformdefault, Slot6stateEnum? Slot6state = Slot6stateEnum.Platformdefault, Slot7linkSpeedEnum? Slot7linkSpeed = Slot7linkSpeedEnum.Platformdefault, Slot7stateEnum? Slot7state = Slot7stateEnum.Platformdefault, Slot8linkSpeedEnum? Slot8linkSpeed = Slot8linkSpeedEnum.Platformdefault, Slot8stateEnum? Slot8state = Slot8stateEnum.Platformdefault, Slot9linkSpeedEnum? Slot9linkSpeed = Slot9linkSpeedEnum.Platformdefault, Slot9stateEnum? Slot9state = Slot9stateEnum.Platformdefault, SlotFlomLinkSpeedEnum? SlotFlomLinkSpeed = SlotFlomLinkSpeedEnum.Platformdefault, SlotFrontNvme1linkSpeedEnum? SlotFrontNvme1linkSpeed = SlotFrontNvme1linkSpeedEnum.Platformdefault, SlotFrontNvme2linkSpeedEnum? SlotFrontNvme2linkSpeed = SlotFrontNvme2linkSpeedEnum.Platformdefault, SlotFrontSlot5linkSpeedEnum? SlotFrontSlot5linkSpeed = SlotFrontSlot5linkSpeedEnum.Platformdefault, SlotFrontSlot6linkSpeedEnum? SlotFrontSlot6linkSpeed = SlotFrontSlot6linkSpeedEnum.Platformdefault, SlotHbaLinkSpeedEnum? SlotHbaLinkSpeed = SlotHbaLinkSpeedEnum.Platformdefault, SlotHbaStateEnum? SlotHbaState = SlotHbaStateEnum.Platformdefault, SlotLom1linkEnum? SlotLom1link = SlotLom1linkEnum.Platformdefault, SlotLom2linkEnum? SlotLom2link = SlotLom2linkEnum.Platformdefault, SlotMezzStateEnum? SlotMezzState = SlotMezzStateEnum.Platformdefault, SlotMlomLinkSpeedEnum? SlotMlomLinkSpeed = SlotMlomLinkSpeedEnum.Platformdefault, SlotMlomStateEnum? SlotMlomState = SlotMlomStateEnum.Platformdefault, SlotMraidLinkSpeedEnum? SlotMraidLinkSpeed = SlotMraidLinkSpeedEnum.Platformdefault, SlotMraidStateEnum? SlotMraidState = SlotMraidStateEnum.Platformdefault, SlotN10stateEnum? SlotN10state = SlotN10stateEnum.Platformdefault, SlotN11stateEnum? SlotN11state = SlotN11stateEnum.Platformdefault, SlotN12stateEnum? SlotN12state = SlotN12stateEnum.Platformdefault, SlotN13stateEnum? SlotN13state = SlotN13stateEnum.Platformdefault, SlotN14stateEnum? SlotN14state = SlotN14stateEnum.Platformdefault, SlotN15stateEnum? SlotN15state = SlotN15stateEnum.Platformdefault, SlotN16stateEnum? SlotN16state = SlotN16stateEnum.Platformdefault, SlotN17stateEnum? SlotN17state = SlotN17stateEnum.Platformdefault, SlotN18stateEnum? SlotN18state = SlotN18stateEnum.Platformdefault, SlotN19stateEnum? SlotN19state = SlotN19stateEnum.Platformdefault, SlotN1stateEnum? SlotN1state = SlotN1stateEnum.Platformdefault, SlotN20stateEnum? SlotN20state = SlotN20stateEnum.Platformdefault, SlotN21stateEnum? SlotN21state = SlotN21stateEnum.Platformdefault, SlotN22stateEnum? SlotN22state = SlotN22stateEnum.Platformdefault, SlotN23stateEnum? SlotN23state = SlotN23stateEnum.Platformdefault, SlotN24stateEnum? SlotN24state = SlotN24stateEnum.Platformdefault, SlotN2stateEnum? SlotN2state = SlotN2stateEnum.Platformdefault, SlotN3stateEnum? SlotN3state = SlotN3stateEnum.Platformdefault, SlotN4stateEnum? SlotN4state = SlotN4stateEnum.Platformdefault, SlotN5stateEnum? SlotN5state = SlotN5stateEnum.Platformdefault, SlotN6stateEnum? SlotN6state = SlotN6stateEnum.Platformdefault, SlotN7stateEnum? SlotN7state = SlotN7stateEnum.Platformdefault, SlotN8stateEnum? SlotN8state = SlotN8stateEnum.Platformdefault, SlotN9stateEnum? SlotN9state = SlotN9stateEnum.Platformdefault, SlotRaidLinkSpeedEnum? SlotRaidLinkSpeed = SlotRaidLinkSpeedEnum.Platformdefault, SlotRaidStateEnum? SlotRaidState = SlotRaidStateEnum.Platformdefault, SlotRearNvme1linkSpeedEnum? SlotRearNvme1linkSpeed = SlotRearNvme1linkSpeedEnum.Platformdefault, SlotRearNvme1stateEnum? SlotRearNvme1state = SlotRearNvme1stateEnum.Platformdefault, SlotRearNvme2linkSpeedEnum? SlotRearNvme2linkSpeed = SlotRearNvme2linkSpeedEnum.Platformdefault, SlotRearNvme2stateEnum? SlotRearNvme2state = SlotRearNvme2stateEnum.Platformdefault, SlotRearNvme3stateEnum? SlotRearNvme3state = SlotRearNvme3stateEnum.Platformdefault, SlotRearNvme4stateEnum? SlotRearNvme4state = SlotRearNvme4stateEnum.Platformdefault, SlotRearNvme5stateEnum? SlotRearNvme5state = SlotRearNvme5stateEnum.Platformdefault, SlotRearNvme6stateEnum? SlotRearNvme6state = SlotRearNvme6stateEnum.Platformdefault, SlotRearNvme7stateEnum? SlotRearNvme7state = SlotRearNvme7stateEnum.Platformdefault, SlotRearNvme8stateEnum? SlotRearNvme8state = SlotRearNvme8stateEnum.Platformdefault, SlotRiser1linkSpeedEnum? SlotRiser1linkSpeed = SlotRiser1linkSpeedEnum.Platformdefault, SlotRiser1slot1linkSpeedEnum? SlotRiser1slot1linkSpeed = SlotRiser1slot1linkSpeedEnum.Platformdefault, SlotRiser1slot2linkSpeedEnum? SlotRiser1slot2linkSpeed = SlotRiser1slot2linkSpeedEnum.Platformdefault, SlotRiser1slot3linkSpeedEnum? SlotRiser1slot3linkSpeed = SlotRiser1slot3linkSpeedEnum.Platformdefault, SlotRiser2linkSpeedEnum? SlotRiser2linkSpeed = SlotRiser2linkSpeedEnum.Platformdefault, SlotRiser2slot4linkSpeedEnum? SlotRiser2slot4linkSpeed = SlotRiser2slot4linkSpeedEnum.Platformdefault, SlotRiser2slot5linkSpeedEnum? SlotRiser2slot5linkSpeed = SlotRiser2slot5linkSpeedEnum.Platformdefault, SlotRiser2slot6linkSpeedEnum? SlotRiser2slot6linkSpeed = SlotRiser2slot6linkSpeedEnum.Platformdefault, SlotSasStateEnum? SlotSasState = SlotSasStateEnum.Platformdefault, SlotSsdSlot1linkSpeedEnum? SlotSsdSlot1linkSpeed = SlotSsdSlot1linkSpeedEnum.Platformdefault, SlotSsdSlot2linkSpeedEnum? SlotSsdSlot2linkSpeed = SlotSsdSlot2linkSpeedEnum.Platformdefault, SmeeEnum? Smee = SmeeEnum.Platformdefault, SmtModeEnum? SmtMode = SmtModeEnum.Platformdefault, SncEnum? Snc = SncEnum.Platformdefault, SparingModeEnum? SparingMode = SparingModeEnum.Platformdefault, SrIovEnum? SrIov = SrIovEnum.Platformdefault, StreamerPrefetchEnum? StreamerPrefetch = StreamerPrefetchEnum.Platformdefault, SvmModeEnum? SvmMode = SvmModeEnum.Platformdefault, TerminalTypeEnum? TerminalType = TerminalTypeEnum.Platformdefault, TpmControlEnum? TpmControl = TpmControlEnum.Platformdefault, TpmSupportEnum? TpmSupport = TpmSupportEnum.Platformdefault, TxtSupportEnum? TxtSupport = TxtSupportEnum.Platformdefault, UcsmBootOrderRuleEnum? UcsmBootOrderRule = UcsmBootOrderRuleEnum.Platformdefault, UsbEmul6064Enum? UsbEmul6064 = UsbEmul6064Enum.Platformdefault, UsbPortFrontEnum? UsbPortFront = UsbPortFrontEnum.Platformdefault, UsbPortInternalEnum? UsbPortInternal = UsbPortInternalEnum.Platformdefault, UsbPortKvmEnum? UsbPortKvm = UsbPortKvmEnum.Platformdefault, UsbPortRearEnum? UsbPortRear = UsbPortRearEnum.Platformdefault, UsbPortSdCardEnum? UsbPortSdCard = UsbPortSdCardEnum.Platformdefault, UsbPortVmediaEnum? UsbPortVmedia = UsbPortVmediaEnum.Platformdefault, UsbXhciSupportEnum? UsbXhciSupport = UsbXhciSupportEnum.Platformdefault, VgaPriorityEnum? VgaPriority = VgaPriorityEnum.Platformdefault, VmdEnableEnum? VmdEnable = VmdEnableEnum.Platformdefault, WorkLoadConfigEnum? WorkLoadConfig = WorkLoadConfigEnum.Platformdefault, XptPrefetchEnum? XptPrefetch = XptPrefetchEnum.Platformdefault)
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.Description = Description;
            this.Name = Name;
            // use default value if no "AdjacentCacheLinePrefetch" provided
            if (AdjacentCacheLinePrefetch == null)
            {
                this.AdjacentCacheLinePrefetch = AdjacentCacheLinePrefetchEnum.Platformdefault;
            }
            else
            {
                this.AdjacentCacheLinePrefetch = AdjacentCacheLinePrefetch;
            }
            // use default value if no "AllUsbDevices" provided
            if (AllUsbDevices == null)
            {
                this.AllUsbDevices = AllUsbDevicesEnum.Platformdefault;
            }
            else
            {
                this.AllUsbDevices = AllUsbDevices;
            }
            // use default value if no "Altitude" provided
            if (Altitude == null)
            {
                this.Altitude = AltitudeEnum.Platformdefault;
            }
            else
            {
                this.Altitude = Altitude;
            }
            // use default value if no "AspmSupport" provided
            if (AspmSupport == null)
            {
                this.AspmSupport = AspmSupportEnum.Platformdefault;
            }
            else
            {
                this.AspmSupport = AspmSupport;
            }
            // use default value if no "AssertNmiOnPerr" provided
            if (AssertNmiOnPerr == null)
            {
                this.AssertNmiOnPerr = AssertNmiOnPerrEnum.Platformdefault;
            }
            else
            {
                this.AssertNmiOnPerr = AssertNmiOnPerr;
            }
            // use default value if no "AssertNmiOnSerr" provided
            if (AssertNmiOnSerr == null)
            {
                this.AssertNmiOnSerr = AssertNmiOnSerrEnum.Platformdefault;
            }
            else
            {
                this.AssertNmiOnSerr = AssertNmiOnSerr;
            }
            // use default value if no "AutoCcState" provided
            if (AutoCcState == null)
            {
                this.AutoCcState = AutoCcStateEnum.Platformdefault;
            }
            else
            {
                this.AutoCcState = AutoCcState;
            }
            // use default value if no "AutonumousCstateEnable" provided
            if (AutonumousCstateEnable == null)
            {
                this.AutonumousCstateEnable = AutonumousCstateEnableEnum.Platformdefault;
            }
            else
            {
                this.AutonumousCstateEnable = AutonumousCstateEnable;
            }
            // use default value if no "BaudRate" provided
            if (BaudRate == null)
            {
                this.BaudRate = BaudRateEnum.Platformdefault;
            }
            else
            {
                this.BaudRate = BaudRate;
            }
            // use default value if no "BmeDmaMitigation" provided
            if (BmeDmaMitigation == null)
            {
                this.BmeDmaMitigation = BmeDmaMitigationEnum.Platformdefault;
            }
            else
            {
                this.BmeDmaMitigation = BmeDmaMitigation;
            }
            // use default value if no "BootOptionNumRetry" provided
            if (BootOptionNumRetry == null)
            {
                this.BootOptionNumRetry = BootOptionNumRetryEnum.Platformdefault;
            }
            else
            {
                this.BootOptionNumRetry = BootOptionNumRetry;
            }
            // use default value if no "BootOptionReCoolDown" provided
            if (BootOptionReCoolDown == null)
            {
                this.BootOptionReCoolDown = BootOptionReCoolDownEnum.Platformdefault;
            }
            else
            {
                this.BootOptionReCoolDown = BootOptionReCoolDown;
            }
            // use default value if no "BootOptionRetry" provided
            if (BootOptionRetry == null)
            {
                this.BootOptionRetry = BootOptionRetryEnum.Platformdefault;
            }
            else
            {
                this.BootOptionRetry = BootOptionRetry;
            }
            // use default value if no "BootPerformanceMode" provided
            if (BootPerformanceMode == null)
            {
                this.BootPerformanceMode = BootPerformanceModeEnum.Platformdefault;
            }
            else
            {
                this.BootPerformanceMode = BootPerformanceMode;
            }
            // use default value if no "CbsCmnCpuCpb" provided
            if (CbsCmnCpuCpb == null)
            {
                this.CbsCmnCpuCpb = CbsCmnCpuCpbEnum.Platformdefault;
            }
            else
            {
                this.CbsCmnCpuCpb = CbsCmnCpuCpb;
            }
            // use default value if no "CbsCmnCpuGenDowncoreCtrl" provided
            if (CbsCmnCpuGenDowncoreCtrl == null)
            {
                this.CbsCmnCpuGenDowncoreCtrl = CbsCmnCpuGenDowncoreCtrlEnum.Platformdefault;
            }
            else
            {
                this.CbsCmnCpuGenDowncoreCtrl = CbsCmnCpuGenDowncoreCtrl;
            }
            // use default value if no "CbsCmnCpuGlobalCstateCtrl" provided
            if (CbsCmnCpuGlobalCstateCtrl == null)
            {
                this.CbsCmnCpuGlobalCstateCtrl = CbsCmnCpuGlobalCstateCtrlEnum.Platformdefault;
            }
            else
            {
                this.CbsCmnCpuGlobalCstateCtrl = CbsCmnCpuGlobalCstateCtrl;
            }
            // use default value if no "CbsCmnCpuL1streamHwPrefetcher" provided
            if (CbsCmnCpuL1streamHwPrefetcher == null)
            {
                this.CbsCmnCpuL1streamHwPrefetcher = CbsCmnCpuL1streamHwPrefetcherEnum.Platformdefault;
            }
            else
            {
                this.CbsCmnCpuL1streamHwPrefetcher = CbsCmnCpuL1streamHwPrefetcher;
            }
            // use default value if no "CbsCmnCpuL2streamHwPrefetcher" provided
            if (CbsCmnCpuL2streamHwPrefetcher == null)
            {
                this.CbsCmnCpuL2streamHwPrefetcher = CbsCmnCpuL2streamHwPrefetcherEnum.Platformdefault;
            }
            else
            {
                this.CbsCmnCpuL2streamHwPrefetcher = CbsCmnCpuL2streamHwPrefetcher;
            }
            // use default value if no "CbsCmnDeterminismSlider" provided
            if (CbsCmnDeterminismSlider == null)
            {
                this.CbsCmnDeterminismSlider = CbsCmnDeterminismSliderEnum.Platformdefault;
            }
            else
            {
                this.CbsCmnDeterminismSlider = CbsCmnDeterminismSlider;
            }
            // use default value if no "CbsCmnGnbNbIommu" provided
            if (CbsCmnGnbNbIommu == null)
            {
                this.CbsCmnGnbNbIommu = CbsCmnGnbNbIommuEnum.Platformdefault;
            }
            else
            {
                this.CbsCmnGnbNbIommu = CbsCmnGnbNbIommu;
            }
            // use default value if no "CbsCmnMemCtrlBankGroupSwapDdr4" provided
            if (CbsCmnMemCtrlBankGroupSwapDdr4 == null)
            {
                this.CbsCmnMemCtrlBankGroupSwapDdr4 = CbsCmnMemCtrlBankGroupSwapDdr4Enum.Platformdefault;
            }
            else
            {
                this.CbsCmnMemCtrlBankGroupSwapDdr4 = CbsCmnMemCtrlBankGroupSwapDdr4;
            }
            // use default value if no "CbsCmnMemMapBankInterleaveDdr4" provided
            if (CbsCmnMemMapBankInterleaveDdr4 == null)
            {
                this.CbsCmnMemMapBankInterleaveDdr4 = CbsCmnMemMapBankInterleaveDdr4Enum.Platformdefault;
            }
            else
            {
                this.CbsCmnMemMapBankInterleaveDdr4 = CbsCmnMemMapBankInterleaveDdr4;
            }
            // use default value if no "CbsCmncTdpCtl" provided
            if (CbsCmncTdpCtl == null)
            {
                this.CbsCmncTdpCtl = CbsCmncTdpCtlEnum.Platformdefault;
            }
            else
            {
                this.CbsCmncTdpCtl = CbsCmncTdpCtl;
            }
            // use default value if no "CbsDfCmnMemIntlv" provided
            if (CbsDfCmnMemIntlv == null)
            {
                this.CbsDfCmnMemIntlv = CbsDfCmnMemIntlvEnum.Platformdefault;
            }
            else
            {
                this.CbsDfCmnMemIntlv = CbsDfCmnMemIntlv;
            }
            // use default value if no "CbsDfCmnMemIntlvSize" provided
            if (CbsDfCmnMemIntlvSize == null)
            {
                this.CbsDfCmnMemIntlvSize = CbsDfCmnMemIntlvSizeEnum.Platformdefault;
            }
            else
            {
                this.CbsDfCmnMemIntlvSize = CbsDfCmnMemIntlvSize;
            }
            // use default value if no "CdnEnable" provided
            if (CdnEnable == null)
            {
                this.CdnEnable = CdnEnableEnum.Platformdefault;
            }
            else
            {
                this.CdnEnable = CdnEnable;
            }
            // use default value if no "CdnSupport" provided
            if (CdnSupport == null)
            {
                this.CdnSupport = CdnSupportEnum.Platformdefault;
            }
            else
            {
                this.CdnSupport = CdnSupport;
            }
            // use default value if no "ChannelInterLeave" provided
            if (ChannelInterLeave == null)
            {
                this.ChannelInterLeave = ChannelInterLeaveEnum.Platformdefault;
            }
            else
            {
                this.ChannelInterLeave = ChannelInterLeave;
            }
            // use default value if no "CkeLowPolicy" provided
            if (CkeLowPolicy == null)
            {
                this.CkeLowPolicy = CkeLowPolicyEnum.Platformdefault;
            }
            else
            {
                this.CkeLowPolicy = CkeLowPolicy;
            }
            // use default value if no "ClosedLoopThermThrotl" provided
            if (ClosedLoopThermThrotl == null)
            {
                this.ClosedLoopThermThrotl = ClosedLoopThermThrotlEnum.Platformdefault;
            }
            else
            {
                this.ClosedLoopThermThrotl = ClosedLoopThermThrotl;
            }
            // use default value if no "CmciEnable" provided
            if (CmciEnable == null)
            {
                this.CmciEnable = CmciEnableEnum.Platformdefault;
            }
            else
            {
                this.CmciEnable = CmciEnable;
            }
            // use default value if no "ConfigTdp" provided
            if (ConfigTdp == null)
            {
                this.ConfigTdp = ConfigTdpEnum.Platformdefault;
            }
            else
            {
                this.ConfigTdp = ConfigTdp;
            }
            // use default value if no "ConsoleRedirection" provided
            if (ConsoleRedirection == null)
            {
                this.ConsoleRedirection = ConsoleRedirectionEnum.Platformdefault;
            }
            else
            {
                this.ConsoleRedirection = ConsoleRedirection;
            }
            // use default value if no "CoreMultiProcessing" provided
            if (CoreMultiProcessing == null)
            {
                this.CoreMultiProcessing = CoreMultiProcessingEnum.Platformdefault;
            }
            else
            {
                this.CoreMultiProcessing = CoreMultiProcessing;
            }
            // use default value if no "CpuEnergyPerformance" provided
            if (CpuEnergyPerformance == null)
            {
                this.CpuEnergyPerformance = CpuEnergyPerformanceEnum.Platformdefault;
            }
            else
            {
                this.CpuEnergyPerformance = CpuEnergyPerformance;
            }
            // use default value if no "CpuFrequencyFloor" provided
            if (CpuFrequencyFloor == null)
            {
                this.CpuFrequencyFloor = CpuFrequencyFloorEnum.Platformdefault;
            }
            else
            {
                this.CpuFrequencyFloor = CpuFrequencyFloor;
            }
            // use default value if no "CpuPerformance" provided
            if (CpuPerformance == null)
            {
                this.CpuPerformance = CpuPerformanceEnum.Platformdefault;
            }
            else
            {
                this.CpuPerformance = CpuPerformance;
            }
            // use default value if no "CpuPowerManagement" provided
            if (CpuPowerManagement == null)
            {
                this.CpuPowerManagement = CpuPowerManagementEnum.Platformdefault;
            }
            else
            {
                this.CpuPowerManagement = CpuPowerManagement;
            }
            // use default value if no "DemandScrub" provided
            if (DemandScrub == null)
            {
                this.DemandScrub = DemandScrubEnum.Platformdefault;
            }
            else
            {
                this.DemandScrub = DemandScrub;
            }
            // use default value if no "DirectCacheAccess" provided
            if (DirectCacheAccess == null)
            {
                this.DirectCacheAccess = DirectCacheAccessEnum.Platformdefault;
            }
            else
            {
                this.DirectCacheAccess = DirectCacheAccess;
            }
            // use default value if no "DramClockThrottling" provided
            if (DramClockThrottling == null)
            {
                this.DramClockThrottling = DramClockThrottlingEnum.Platformdefault;
            }
            else
            {
                this.DramClockThrottling = DramClockThrottling;
            }
            // use default value if no "DramRefreshRate" provided
            if (DramRefreshRate == null)
            {
                this.DramRefreshRate = DramRefreshRateEnum.Platformdefault;
            }
            else
            {
                this.DramRefreshRate = DramRefreshRate;
            }
            // use default value if no "EnergyEfficientTurbo" provided
            if (EnergyEfficientTurbo == null)
            {
                this.EnergyEfficientTurbo = EnergyEfficientTurboEnum.Platformdefault;
            }
            else
            {
                this.EnergyEfficientTurbo = EnergyEfficientTurbo;
            }
            // use default value if no "EngPerfTuning" provided
            if (EngPerfTuning == null)
            {
                this.EngPerfTuning = EngPerfTuningEnum.Platformdefault;
            }
            else
            {
                this.EngPerfTuning = EngPerfTuning;
            }
            // use default value if no "EnhancedIntelSpeedStepTech" provided
            if (EnhancedIntelSpeedStepTech == null)
            {
                this.EnhancedIntelSpeedStepTech = EnhancedIntelSpeedStepTechEnum.Platformdefault;
            }
            else
            {
                this.EnhancedIntelSpeedStepTech = EnhancedIntelSpeedStepTech;
            }
            // use default value if no "EppProfile" provided
            if (EppProfile == null)
            {
                this.EppProfile = EppProfileEnum.Platformdefault;
            }
            else
            {
                this.EppProfile = EppProfile;
            }
            // use default value if no "ExecuteDisableBit" provided
            if (ExecuteDisableBit == null)
            {
                this.ExecuteDisableBit = ExecuteDisableBitEnum.Platformdefault;
            }
            else
            {
                this.ExecuteDisableBit = ExecuteDisableBit;
            }
            // use default value if no "ExtendedApic" provided
            if (ExtendedApic == null)
            {
                this.ExtendedApic = ExtendedApicEnum.Platformdefault;
            }
            else
            {
                this.ExtendedApic = ExtendedApic;
            }
            // use default value if no "FlowControl" provided
            if (FlowControl == null)
            {
                this.FlowControl = FlowControlEnum.Platformdefault;
            }
            else
            {
                this.FlowControl = FlowControl;
            }
            // use default value if no "Frb2enable" provided
            if (Frb2enable == null)
            {
                this.Frb2enable = Frb2enableEnum.Platformdefault;
            }
            else
            {
                this.Frb2enable = Frb2enable;
            }
            // use default value if no "HardwarePrefetch" provided
            if (HardwarePrefetch == null)
            {
                this.HardwarePrefetch = HardwarePrefetchEnum.Platformdefault;
            }
            else
            {
                this.HardwarePrefetch = HardwarePrefetch;
            }
            // use default value if no "HwpmEnable" provided
            if (HwpmEnable == null)
            {
                this.HwpmEnable = HwpmEnableEnum.Platformdefault;
            }
            else
            {
                this.HwpmEnable = HwpmEnable;
            }
            // use default value if no "ImcInterleave" provided
            if (ImcInterleave == null)
            {
                this.ImcInterleave = ImcInterleaveEnum.Platformdefault;
            }
            else
            {
                this.ImcInterleave = ImcInterleave;
            }
            // use default value if no "IntelHyperThreadingTech" provided
            if (IntelHyperThreadingTech == null)
            {
                this.IntelHyperThreadingTech = IntelHyperThreadingTechEnum.Platformdefault;
            }
            else
            {
                this.IntelHyperThreadingTech = IntelHyperThreadingTech;
            }
            // use default value if no "IntelTurboBoostTech" provided
            if (IntelTurboBoostTech == null)
            {
                this.IntelTurboBoostTech = IntelTurboBoostTechEnum.Platformdefault;
            }
            else
            {
                this.IntelTurboBoostTech = IntelTurboBoostTech;
            }
            // use default value if no "IntelVirtualizationTechnology" provided
            if (IntelVirtualizationTechnology == null)
            {
                this.IntelVirtualizationTechnology = IntelVirtualizationTechnologyEnum.Platformdefault;
            }
            else
            {
                this.IntelVirtualizationTechnology = IntelVirtualizationTechnology;
            }
            // use default value if no "IntelVtForDirectedIo" provided
            if (IntelVtForDirectedIo == null)
            {
                this.IntelVtForDirectedIo = IntelVtForDirectedIoEnum.Platformdefault;
            }
            else
            {
                this.IntelVtForDirectedIo = IntelVtForDirectedIo;
            }
            // use default value if no "IntelVtdCoherencySupport" provided
            if (IntelVtdCoherencySupport == null)
            {
                this.IntelVtdCoherencySupport = IntelVtdCoherencySupportEnum.Platformdefault;
            }
            else
            {
                this.IntelVtdCoherencySupport = IntelVtdCoherencySupport;
            }
            // use default value if no "IntelVtdInterruptRemapping" provided
            if (IntelVtdInterruptRemapping == null)
            {
                this.IntelVtdInterruptRemapping = IntelVtdInterruptRemappingEnum.Platformdefault;
            }
            else
            {
                this.IntelVtdInterruptRemapping = IntelVtdInterruptRemapping;
            }
            // use default value if no "IntelVtdPassThroughDmaSupport" provided
            if (IntelVtdPassThroughDmaSupport == null)
            {
                this.IntelVtdPassThroughDmaSupport = IntelVtdPassThroughDmaSupportEnum.Platformdefault;
            }
            else
            {
                this.IntelVtdPassThroughDmaSupport = IntelVtdPassThroughDmaSupport;
            }
            // use default value if no "IntelVtdatsSupport" provided
            if (IntelVtdatsSupport == null)
            {
                this.IntelVtdatsSupport = IntelVtdatsSupportEnum.Platformdefault;
            }
            else
            {
                this.IntelVtdatsSupport = IntelVtdatsSupport;
            }
            // use default value if no "IohErrorEnable" provided
            if (IohErrorEnable == null)
            {
                this.IohErrorEnable = IohErrorEnableEnum.Platformdefault;
            }
            else
            {
                this.IohErrorEnable = IohErrorEnable;
            }
            // use default value if no "IohResource" provided
            if (IohResource == null)
            {
                this.IohResource = IohResourceEnum.Platformdefault;
            }
            else
            {
                this.IohResource = IohResource;
            }
            // use default value if no "IpPrefetch" provided
            if (IpPrefetch == null)
            {
                this.IpPrefetch = IpPrefetchEnum.Platformdefault;
            }
            else
            {
                this.IpPrefetch = IpPrefetch;
            }
            // use default value if no "Ipv6pxe" provided
            if (Ipv6pxe == null)
            {
                this.Ipv6pxe = Ipv6pxeEnum.Platformdefault;
            }
            else
            {
                this.Ipv6pxe = Ipv6pxe;
            }
            // use default value if no "KtiPrefetch" provided
            if (KtiPrefetch == null)
            {
                this.KtiPrefetch = KtiPrefetchEnum.Platformdefault;
            }
            else
            {
                this.KtiPrefetch = KtiPrefetch;
            }
            // use default value if no "LegacyOsRedirection" provided
            if (LegacyOsRedirection == null)
            {
                this.LegacyOsRedirection = LegacyOsRedirectionEnum.Platformdefault;
            }
            else
            {
                this.LegacyOsRedirection = LegacyOsRedirection;
            }
            // use default value if no "LegacyUsbSupport" provided
            if (LegacyUsbSupport == null)
            {
                this.LegacyUsbSupport = LegacyUsbSupportEnum.Platformdefault;
            }
            else
            {
                this.LegacyUsbSupport = LegacyUsbSupport;
            }
            // use default value if no "LlcPrefetch" provided
            if (LlcPrefetch == null)
            {
                this.LlcPrefetch = LlcPrefetchEnum.Platformdefault;
            }
            else
            {
                this.LlcPrefetch = LlcPrefetch;
            }
            // use default value if no "LomPort0state" provided
            if (LomPort0state == null)
            {
                this.LomPort0state = LomPort0stateEnum.Platformdefault;
            }
            else
            {
                this.LomPort0state = LomPort0state;
            }
            // use default value if no "LomPort1state" provided
            if (LomPort1state == null)
            {
                this.LomPort1state = LomPort1stateEnum.Platformdefault;
            }
            else
            {
                this.LomPort1state = LomPort1state;
            }
            // use default value if no "LomPort2state" provided
            if (LomPort2state == null)
            {
                this.LomPort2state = LomPort2stateEnum.Platformdefault;
            }
            else
            {
                this.LomPort2state = LomPort2state;
            }
            // use default value if no "LomPort3state" provided
            if (LomPort3state == null)
            {
                this.LomPort3state = LomPort3stateEnum.Platformdefault;
            }
            else
            {
                this.LomPort3state = LomPort3state;
            }
            // use default value if no "LomPortsAllState" provided
            if (LomPortsAllState == null)
            {
                this.LomPortsAllState = LomPortsAllStateEnum.Platformdefault;
            }
            else
            {
                this.LomPortsAllState = LomPortsAllState;
            }
            // use default value if no "LvDdrMode" provided
            if (LvDdrMode == null)
            {
                this.LvDdrMode = LvDdrModeEnum.Platformdefault;
            }
            else
            {
                this.LvDdrMode = LvDdrMode;
            }
            // use default value if no "MakeDeviceNonBootable" provided
            if (MakeDeviceNonBootable == null)
            {
                this.MakeDeviceNonBootable = MakeDeviceNonBootableEnum.Platformdefault;
            }
            else
            {
                this.MakeDeviceNonBootable = MakeDeviceNonBootable;
            }
            // use default value if no "MemoryInterLeave" provided
            if (MemoryInterLeave == null)
            {
                this.MemoryInterLeave = MemoryInterLeaveEnum.Platformdefault;
            }
            else
            {
                this.MemoryInterLeave = MemoryInterLeave;
            }
            // use default value if no "MemoryMappedIoAbove4gb" provided
            if (MemoryMappedIoAbove4gb == null)
            {
                this.MemoryMappedIoAbove4gb = MemoryMappedIoAbove4gbEnum.Platformdefault;
            }
            else
            {
                this.MemoryMappedIoAbove4gb = MemoryMappedIoAbove4gb;
            }
            // use default value if no "MirroringMode" provided
            if (MirroringMode == null)
            {
                this.MirroringMode = MirroringModeEnum.Platformdefault;
            }
            else
            {
                this.MirroringMode = MirroringMode;
            }
            // use default value if no "MmcfgBase" provided
            if (MmcfgBase == null)
            {
                this.MmcfgBase = MmcfgBaseEnum.Platformdefault;
            }
            else
            {
                this.MmcfgBase = MmcfgBase;
            }
            // use default value if no "NumaOptimized" provided
            if (NumaOptimized == null)
            {
                this.NumaOptimized = NumaOptimizedEnum.Platformdefault;
            }
            else
            {
                this.NumaOptimized = NumaOptimized;
            }
            // use default value if no "Onboard10gbitLom" provided
            if (Onboard10gbitLom == null)
            {
                this.Onboard10gbitLom = Onboard10gbitLomEnum.Platformdefault;
            }
            else
            {
                this.Onboard10gbitLom = Onboard10gbitLom;
            }
            // use default value if no "OnboardGbitLom" provided
            if (OnboardGbitLom == null)
            {
                this.OnboardGbitLom = OnboardGbitLomEnum.Platformdefault;
            }
            else
            {
                this.OnboardGbitLom = OnboardGbitLom;
            }
            // use default value if no "OnboardScuStorageSupport" provided
            if (OnboardScuStorageSupport == null)
            {
                this.OnboardScuStorageSupport = OnboardScuStorageSupportEnum.Platformdefault;
            }
            else
            {
                this.OnboardScuStorageSupport = OnboardScuStorageSupport;
            }
            // use default value if no "OnboardScuStorageSwStack" provided
            if (OnboardScuStorageSwStack == null)
            {
                this.OnboardScuStorageSwStack = OnboardScuStorageSwStackEnum.Platformdefault;
            }
            else
            {
                this.OnboardScuStorageSwStack = OnboardScuStorageSwStack;
            }
            this.Organization = Organization;
            // use default value if no "OsBootWatchdogTimer" provided
            if (OsBootWatchdogTimer == null)
            {
                this.OsBootWatchdogTimer = OsBootWatchdogTimerEnum.Platformdefault;
            }
            else
            {
                this.OsBootWatchdogTimer = OsBootWatchdogTimer;
            }
            // use default value if no "OsBootWatchdogTimerPolicy" provided
            if (OsBootWatchdogTimerPolicy == null)
            {
                this.OsBootWatchdogTimerPolicy = OsBootWatchdogTimerPolicyEnum.Platformdefault;
            }
            else
            {
                this.OsBootWatchdogTimerPolicy = OsBootWatchdogTimerPolicy;
            }
            // use default value if no "OsBootWatchdogTimerTimeout" provided
            if (OsBootWatchdogTimerTimeout == null)
            {
                this.OsBootWatchdogTimerTimeout = OsBootWatchdogTimerTimeoutEnum.Platformdefault;
            }
            else
            {
                this.OsBootWatchdogTimerTimeout = OsBootWatchdogTimerTimeout;
            }
            // use default value if no "OutOfBandMgmtPort" provided
            if (OutOfBandMgmtPort == null)
            {
                this.OutOfBandMgmtPort = OutOfBandMgmtPortEnum.Platformdefault;
            }
            else
            {
                this.OutOfBandMgmtPort = OutOfBandMgmtPort;
            }
            // use default value if no "PackageCstateLimit" provided
            if (PackageCstateLimit == null)
            {
                this.PackageCstateLimit = PackageCstateLimitEnum.Platformdefault;
            }
            else
            {
                this.PackageCstateLimit = PackageCstateLimit;
            }
            // use default value if no "PatrolScrub" provided
            if (PatrolScrub == null)
            {
                this.PatrolScrub = PatrolScrubEnum.Platformdefault;
            }
            else
            {
                this.PatrolScrub = PatrolScrub;
            }
            // use default value if no "PatrolScrubDuration" provided
            if (PatrolScrubDuration == null)
            {
                this.PatrolScrubDuration = PatrolScrubDurationEnum.Platformdefault;
            }
            else
            {
                this.PatrolScrubDuration = PatrolScrubDuration;
            }
            // use default value if no "PcIeSsdHotPlugSupport" provided
            if (PcIeSsdHotPlugSupport == null)
            {
                this.PcIeSsdHotPlugSupport = PcIeSsdHotPlugSupportEnum.Platformdefault;
            }
            else
            {
                this.PcIeSsdHotPlugSupport = PcIeSsdHotPlugSupport;
            }
            // use default value if no "PchUsb30mode" provided
            if (PchUsb30mode == null)
            {
                this.PchUsb30mode = PchUsb30modeEnum.Platformdefault;
            }
            else
            {
                this.PchUsb30mode = PchUsb30mode;
            }
            // use default value if no "PciOptionRoMs" provided
            if (PciOptionRoMs == null)
            {
                this.PciOptionRoMs = PciOptionRoMsEnum.Platformdefault;
            }
            else
            {
                this.PciOptionRoMs = PciOptionRoMs;
            }
            // use default value if no "PciRomClp" provided
            if (PciRomClp == null)
            {
                this.PciRomClp = PciRomClpEnum.Platformdefault;
            }
            else
            {
                this.PciRomClp = PciRomClp;
            }
            // use default value if no "PopSupport" provided
            if (PopSupport == null)
            {
                this.PopSupport = PopSupportEnum.Platformdefault;
            }
            else
            {
                this.PopSupport = PopSupport;
            }
            // use default value if no "PostErrorPause" provided
            if (PostErrorPause == null)
            {
                this.PostErrorPause = PostErrorPauseEnum.Platformdefault;
            }
            else
            {
                this.PostErrorPause = PostErrorPause;
            }
            // use default value if no "ProcessorC1e" provided
            if (ProcessorC1e == null)
            {
                this.ProcessorC1e = ProcessorC1eEnum.Platformdefault;
            }
            else
            {
                this.ProcessorC1e = ProcessorC1e;
            }
            // use default value if no "ProcessorC3report" provided
            if (ProcessorC3report == null)
            {
                this.ProcessorC3report = ProcessorC3reportEnum.Platformdefault;
            }
            else
            {
                this.ProcessorC3report = ProcessorC3report;
            }
            // use default value if no "ProcessorC6report" provided
            if (ProcessorC6report == null)
            {
                this.ProcessorC6report = ProcessorC6reportEnum.Platformdefault;
            }
            else
            {
                this.ProcessorC6report = ProcessorC6report;
            }
            // use default value if no "ProcessorCstate" provided
            if (ProcessorCstate == null)
            {
                this.ProcessorCstate = ProcessorCstateEnum.Platformdefault;
            }
            else
            {
                this.ProcessorCstate = ProcessorCstate;
            }
            this.Profiles = Profiles;
            // use default value if no "Psata" provided
            if (Psata == null)
            {
                this.Psata = PsataEnum.Platformdefault;
            }
            else
            {
                this.Psata = Psata;
            }
            // use default value if no "PstateCoordType" provided
            if (PstateCoordType == null)
            {
                this.PstateCoordType = PstateCoordTypeEnum.Platformdefault;
            }
            else
            {
                this.PstateCoordType = PstateCoordType;
            }
            // use default value if no "PuttyKeyPad" provided
            if (PuttyKeyPad == null)
            {
                this.PuttyKeyPad = PuttyKeyPadEnum.Platformdefault;
            }
            else
            {
                this.PuttyKeyPad = PuttyKeyPad;
            }
            // use default value if no "PwrPerfTuning" provided
            if (PwrPerfTuning == null)
            {
                this.PwrPerfTuning = PwrPerfTuningEnum.Platformdefault;
            }
            else
            {
                this.PwrPerfTuning = PwrPerfTuning;
            }
            // use default value if no "QpiLinkFrequency" provided
            if (QpiLinkFrequency == null)
            {
                this.QpiLinkFrequency = QpiLinkFrequencyEnum.Platformdefault;
            }
            else
            {
                this.QpiLinkFrequency = QpiLinkFrequency;
            }
            // use default value if no "QpiSnoopMode" provided
            if (QpiSnoopMode == null)
            {
                this.QpiSnoopMode = QpiSnoopModeEnum.Platformdefault;
            }
            else
            {
                this.QpiSnoopMode = QpiSnoopMode;
            }
            // use default value if no "RankInterLeave" provided
            if (RankInterLeave == null)
            {
                this.RankInterLeave = RankInterLeaveEnum.Platformdefault;
            }
            else
            {
                this.RankInterLeave = RankInterLeave;
            }
            // use default value if no "RedirectionAfterPost" provided
            if (RedirectionAfterPost == null)
            {
                this.RedirectionAfterPost = RedirectionAfterPostEnum.Platformdefault;
            }
            else
            {
                this.RedirectionAfterPost = RedirectionAfterPost;
            }
            // use default value if no "SataModeSelect" provided
            if (SataModeSelect == null)
            {
                this.SataModeSelect = SataModeSelectEnum.Platformdefault;
            }
            else
            {
                this.SataModeSelect = SataModeSelect;
            }
            // use default value if no "SelectMemoryRasConfiguration" provided
            if (SelectMemoryRasConfiguration == null)
            {
                this.SelectMemoryRasConfiguration = SelectMemoryRasConfigurationEnum.Platformdefault;
            }
            else
            {
                this.SelectMemoryRasConfiguration = SelectMemoryRasConfiguration;
            }
            // use default value if no "SerialPortAenable" provided
            if (SerialPortAenable == null)
            {
                this.SerialPortAenable = SerialPortAenableEnum.Platformdefault;
            }
            else
            {
                this.SerialPortAenable = SerialPortAenable;
            }
            // use default value if no "SinglePctlEnable" provided
            if (SinglePctlEnable == null)
            {
                this.SinglePctlEnable = SinglePctlEnableEnum.Platformdefault;
            }
            else
            {
                this.SinglePctlEnable = SinglePctlEnable;
            }
            // use default value if no "Slot10linkSpeed" provided
            if (Slot10linkSpeed == null)
            {
                this.Slot10linkSpeed = Slot10linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot10linkSpeed = Slot10linkSpeed;
            }
            // use default value if no "Slot10state" provided
            if (Slot10state == null)
            {
                this.Slot10state = Slot10stateEnum.Platformdefault;
            }
            else
            {
                this.Slot10state = Slot10state;
            }
            // use default value if no "Slot11linkSpeed" provided
            if (Slot11linkSpeed == null)
            {
                this.Slot11linkSpeed = Slot11linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot11linkSpeed = Slot11linkSpeed;
            }
            // use default value if no "Slot11state" provided
            if (Slot11state == null)
            {
                this.Slot11state = Slot11stateEnum.Platformdefault;
            }
            else
            {
                this.Slot11state = Slot11state;
            }
            // use default value if no "Slot12linkSpeed" provided
            if (Slot12linkSpeed == null)
            {
                this.Slot12linkSpeed = Slot12linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot12linkSpeed = Slot12linkSpeed;
            }
            // use default value if no "Slot12state" provided
            if (Slot12state == null)
            {
                this.Slot12state = Slot12stateEnum.Platformdefault;
            }
            else
            {
                this.Slot12state = Slot12state;
            }
            // use default value if no "Slot1linkSpeed" provided
            if (Slot1linkSpeed == null)
            {
                this.Slot1linkSpeed = Slot1linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot1linkSpeed = Slot1linkSpeed;
            }
            // use default value if no "Slot1state" provided
            if (Slot1state == null)
            {
                this.Slot1state = Slot1stateEnum.Platformdefault;
            }
            else
            {
                this.Slot1state = Slot1state;
            }
            // use default value if no "Slot2linkSpeed" provided
            if (Slot2linkSpeed == null)
            {
                this.Slot2linkSpeed = Slot2linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot2linkSpeed = Slot2linkSpeed;
            }
            // use default value if no "Slot2state" provided
            if (Slot2state == null)
            {
                this.Slot2state = Slot2stateEnum.Platformdefault;
            }
            else
            {
                this.Slot2state = Slot2state;
            }
            // use default value if no "Slot3linkSpeed" provided
            if (Slot3linkSpeed == null)
            {
                this.Slot3linkSpeed = Slot3linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot3linkSpeed = Slot3linkSpeed;
            }
            // use default value if no "Slot3state" provided
            if (Slot3state == null)
            {
                this.Slot3state = Slot3stateEnum.Platformdefault;
            }
            else
            {
                this.Slot3state = Slot3state;
            }
            // use default value if no "Slot4linkSpeed" provided
            if (Slot4linkSpeed == null)
            {
                this.Slot4linkSpeed = Slot4linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot4linkSpeed = Slot4linkSpeed;
            }
            // use default value if no "Slot4state" provided
            if (Slot4state == null)
            {
                this.Slot4state = Slot4stateEnum.Platformdefault;
            }
            else
            {
                this.Slot4state = Slot4state;
            }
            // use default value if no "Slot5linkSpeed" provided
            if (Slot5linkSpeed == null)
            {
                this.Slot5linkSpeed = Slot5linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot5linkSpeed = Slot5linkSpeed;
            }
            // use default value if no "Slot5state" provided
            if (Slot5state == null)
            {
                this.Slot5state = Slot5stateEnum.Platformdefault;
            }
            else
            {
                this.Slot5state = Slot5state;
            }
            // use default value if no "Slot6linkSpeed" provided
            if (Slot6linkSpeed == null)
            {
                this.Slot6linkSpeed = Slot6linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot6linkSpeed = Slot6linkSpeed;
            }
            // use default value if no "Slot6state" provided
            if (Slot6state == null)
            {
                this.Slot6state = Slot6stateEnum.Platformdefault;
            }
            else
            {
                this.Slot6state = Slot6state;
            }
            // use default value if no "Slot7linkSpeed" provided
            if (Slot7linkSpeed == null)
            {
                this.Slot7linkSpeed = Slot7linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot7linkSpeed = Slot7linkSpeed;
            }
            // use default value if no "Slot7state" provided
            if (Slot7state == null)
            {
                this.Slot7state = Slot7stateEnum.Platformdefault;
            }
            else
            {
                this.Slot7state = Slot7state;
            }
            // use default value if no "Slot8linkSpeed" provided
            if (Slot8linkSpeed == null)
            {
                this.Slot8linkSpeed = Slot8linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot8linkSpeed = Slot8linkSpeed;
            }
            // use default value if no "Slot8state" provided
            if (Slot8state == null)
            {
                this.Slot8state = Slot8stateEnum.Platformdefault;
            }
            else
            {
                this.Slot8state = Slot8state;
            }
            // use default value if no "Slot9linkSpeed" provided
            if (Slot9linkSpeed == null)
            {
                this.Slot9linkSpeed = Slot9linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.Slot9linkSpeed = Slot9linkSpeed;
            }
            // use default value if no "Slot9state" provided
            if (Slot9state == null)
            {
                this.Slot9state = Slot9stateEnum.Platformdefault;
            }
            else
            {
                this.Slot9state = Slot9state;
            }
            // use default value if no "SlotFlomLinkSpeed" provided
            if (SlotFlomLinkSpeed == null)
            {
                this.SlotFlomLinkSpeed = SlotFlomLinkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotFlomLinkSpeed = SlotFlomLinkSpeed;
            }
            // use default value if no "SlotFrontNvme1linkSpeed" provided
            if (SlotFrontNvme1linkSpeed == null)
            {
                this.SlotFrontNvme1linkSpeed = SlotFrontNvme1linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotFrontNvme1linkSpeed = SlotFrontNvme1linkSpeed;
            }
            // use default value if no "SlotFrontNvme2linkSpeed" provided
            if (SlotFrontNvme2linkSpeed == null)
            {
                this.SlotFrontNvme2linkSpeed = SlotFrontNvme2linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotFrontNvme2linkSpeed = SlotFrontNvme2linkSpeed;
            }
            // use default value if no "SlotFrontSlot5linkSpeed" provided
            if (SlotFrontSlot5linkSpeed == null)
            {
                this.SlotFrontSlot5linkSpeed = SlotFrontSlot5linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotFrontSlot5linkSpeed = SlotFrontSlot5linkSpeed;
            }
            // use default value if no "SlotFrontSlot6linkSpeed" provided
            if (SlotFrontSlot6linkSpeed == null)
            {
                this.SlotFrontSlot6linkSpeed = SlotFrontSlot6linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotFrontSlot6linkSpeed = SlotFrontSlot6linkSpeed;
            }
            // use default value if no "SlotHbaLinkSpeed" provided
            if (SlotHbaLinkSpeed == null)
            {
                this.SlotHbaLinkSpeed = SlotHbaLinkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotHbaLinkSpeed = SlotHbaLinkSpeed;
            }
            // use default value if no "SlotHbaState" provided
            if (SlotHbaState == null)
            {
                this.SlotHbaState = SlotHbaStateEnum.Platformdefault;
            }
            else
            {
                this.SlotHbaState = SlotHbaState;
            }
            // use default value if no "SlotLom1link" provided
            if (SlotLom1link == null)
            {
                this.SlotLom1link = SlotLom1linkEnum.Platformdefault;
            }
            else
            {
                this.SlotLom1link = SlotLom1link;
            }
            // use default value if no "SlotLom2link" provided
            if (SlotLom2link == null)
            {
                this.SlotLom2link = SlotLom2linkEnum.Platformdefault;
            }
            else
            {
                this.SlotLom2link = SlotLom2link;
            }
            // use default value if no "SlotMezzState" provided
            if (SlotMezzState == null)
            {
                this.SlotMezzState = SlotMezzStateEnum.Platformdefault;
            }
            else
            {
                this.SlotMezzState = SlotMezzState;
            }
            // use default value if no "SlotMlomLinkSpeed" provided
            if (SlotMlomLinkSpeed == null)
            {
                this.SlotMlomLinkSpeed = SlotMlomLinkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotMlomLinkSpeed = SlotMlomLinkSpeed;
            }
            // use default value if no "SlotMlomState" provided
            if (SlotMlomState == null)
            {
                this.SlotMlomState = SlotMlomStateEnum.Platformdefault;
            }
            else
            {
                this.SlotMlomState = SlotMlomState;
            }
            // use default value if no "SlotMraidLinkSpeed" provided
            if (SlotMraidLinkSpeed == null)
            {
                this.SlotMraidLinkSpeed = SlotMraidLinkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotMraidLinkSpeed = SlotMraidLinkSpeed;
            }
            // use default value if no "SlotMraidState" provided
            if (SlotMraidState == null)
            {
                this.SlotMraidState = SlotMraidStateEnum.Platformdefault;
            }
            else
            {
                this.SlotMraidState = SlotMraidState;
            }
            // use default value if no "SlotN10state" provided
            if (SlotN10state == null)
            {
                this.SlotN10state = SlotN10stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN10state = SlotN10state;
            }
            // use default value if no "SlotN11state" provided
            if (SlotN11state == null)
            {
                this.SlotN11state = SlotN11stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN11state = SlotN11state;
            }
            // use default value if no "SlotN12state" provided
            if (SlotN12state == null)
            {
                this.SlotN12state = SlotN12stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN12state = SlotN12state;
            }
            // use default value if no "SlotN13state" provided
            if (SlotN13state == null)
            {
                this.SlotN13state = SlotN13stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN13state = SlotN13state;
            }
            // use default value if no "SlotN14state" provided
            if (SlotN14state == null)
            {
                this.SlotN14state = SlotN14stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN14state = SlotN14state;
            }
            // use default value if no "SlotN15state" provided
            if (SlotN15state == null)
            {
                this.SlotN15state = SlotN15stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN15state = SlotN15state;
            }
            // use default value if no "SlotN16state" provided
            if (SlotN16state == null)
            {
                this.SlotN16state = SlotN16stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN16state = SlotN16state;
            }
            // use default value if no "SlotN17state" provided
            if (SlotN17state == null)
            {
                this.SlotN17state = SlotN17stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN17state = SlotN17state;
            }
            // use default value if no "SlotN18state" provided
            if (SlotN18state == null)
            {
                this.SlotN18state = SlotN18stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN18state = SlotN18state;
            }
            // use default value if no "SlotN19state" provided
            if (SlotN19state == null)
            {
                this.SlotN19state = SlotN19stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN19state = SlotN19state;
            }
            // use default value if no "SlotN1state" provided
            if (SlotN1state == null)
            {
                this.SlotN1state = SlotN1stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN1state = SlotN1state;
            }
            // use default value if no "SlotN20state" provided
            if (SlotN20state == null)
            {
                this.SlotN20state = SlotN20stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN20state = SlotN20state;
            }
            // use default value if no "SlotN21state" provided
            if (SlotN21state == null)
            {
                this.SlotN21state = SlotN21stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN21state = SlotN21state;
            }
            // use default value if no "SlotN22state" provided
            if (SlotN22state == null)
            {
                this.SlotN22state = SlotN22stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN22state = SlotN22state;
            }
            // use default value if no "SlotN23state" provided
            if (SlotN23state == null)
            {
                this.SlotN23state = SlotN23stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN23state = SlotN23state;
            }
            // use default value if no "SlotN24state" provided
            if (SlotN24state == null)
            {
                this.SlotN24state = SlotN24stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN24state = SlotN24state;
            }
            // use default value if no "SlotN2state" provided
            if (SlotN2state == null)
            {
                this.SlotN2state = SlotN2stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN2state = SlotN2state;
            }
            // use default value if no "SlotN3state" provided
            if (SlotN3state == null)
            {
                this.SlotN3state = SlotN3stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN3state = SlotN3state;
            }
            // use default value if no "SlotN4state" provided
            if (SlotN4state == null)
            {
                this.SlotN4state = SlotN4stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN4state = SlotN4state;
            }
            // use default value if no "SlotN5state" provided
            if (SlotN5state == null)
            {
                this.SlotN5state = SlotN5stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN5state = SlotN5state;
            }
            // use default value if no "SlotN6state" provided
            if (SlotN6state == null)
            {
                this.SlotN6state = SlotN6stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN6state = SlotN6state;
            }
            // use default value if no "SlotN7state" provided
            if (SlotN7state == null)
            {
                this.SlotN7state = SlotN7stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN7state = SlotN7state;
            }
            // use default value if no "SlotN8state" provided
            if (SlotN8state == null)
            {
                this.SlotN8state = SlotN8stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN8state = SlotN8state;
            }
            // use default value if no "SlotN9state" provided
            if (SlotN9state == null)
            {
                this.SlotN9state = SlotN9stateEnum.Platformdefault;
            }
            else
            {
                this.SlotN9state = SlotN9state;
            }
            // use default value if no "SlotRaidLinkSpeed" provided
            if (SlotRaidLinkSpeed == null)
            {
                this.SlotRaidLinkSpeed = SlotRaidLinkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRaidLinkSpeed = SlotRaidLinkSpeed;
            }
            // use default value if no "SlotRaidState" provided
            if (SlotRaidState == null)
            {
                this.SlotRaidState = SlotRaidStateEnum.Platformdefault;
            }
            else
            {
                this.SlotRaidState = SlotRaidState;
            }
            // use default value if no "SlotRearNvme1linkSpeed" provided
            if (SlotRearNvme1linkSpeed == null)
            {
                this.SlotRearNvme1linkSpeed = SlotRearNvme1linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRearNvme1linkSpeed = SlotRearNvme1linkSpeed;
            }
            // use default value if no "SlotRearNvme1state" provided
            if (SlotRearNvme1state == null)
            {
                this.SlotRearNvme1state = SlotRearNvme1stateEnum.Platformdefault;
            }
            else
            {
                this.SlotRearNvme1state = SlotRearNvme1state;
            }
            // use default value if no "SlotRearNvme2linkSpeed" provided
            if (SlotRearNvme2linkSpeed == null)
            {
                this.SlotRearNvme2linkSpeed = SlotRearNvme2linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRearNvme2linkSpeed = SlotRearNvme2linkSpeed;
            }
            // use default value if no "SlotRearNvme2state" provided
            if (SlotRearNvme2state == null)
            {
                this.SlotRearNvme2state = SlotRearNvme2stateEnum.Platformdefault;
            }
            else
            {
                this.SlotRearNvme2state = SlotRearNvme2state;
            }
            // use default value if no "SlotRearNvme3state" provided
            if (SlotRearNvme3state == null)
            {
                this.SlotRearNvme3state = SlotRearNvme3stateEnum.Platformdefault;
            }
            else
            {
                this.SlotRearNvme3state = SlotRearNvme3state;
            }
            // use default value if no "SlotRearNvme4state" provided
            if (SlotRearNvme4state == null)
            {
                this.SlotRearNvme4state = SlotRearNvme4stateEnum.Platformdefault;
            }
            else
            {
                this.SlotRearNvme4state = SlotRearNvme4state;
            }
            // use default value if no "SlotRearNvme5state" provided
            if (SlotRearNvme5state == null)
            {
                this.SlotRearNvme5state = SlotRearNvme5stateEnum.Platformdefault;
            }
            else
            {
                this.SlotRearNvme5state = SlotRearNvme5state;
            }
            // use default value if no "SlotRearNvme6state" provided
            if (SlotRearNvme6state == null)
            {
                this.SlotRearNvme6state = SlotRearNvme6stateEnum.Platformdefault;
            }
            else
            {
                this.SlotRearNvme6state = SlotRearNvme6state;
            }
            // use default value if no "SlotRearNvme7state" provided
            if (SlotRearNvme7state == null)
            {
                this.SlotRearNvme7state = SlotRearNvme7stateEnum.Platformdefault;
            }
            else
            {
                this.SlotRearNvme7state = SlotRearNvme7state;
            }
            // use default value if no "SlotRearNvme8state" provided
            if (SlotRearNvme8state == null)
            {
                this.SlotRearNvme8state = SlotRearNvme8stateEnum.Platformdefault;
            }
            else
            {
                this.SlotRearNvme8state = SlotRearNvme8state;
            }
            // use default value if no "SlotRiser1linkSpeed" provided
            if (SlotRiser1linkSpeed == null)
            {
                this.SlotRiser1linkSpeed = SlotRiser1linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRiser1linkSpeed = SlotRiser1linkSpeed;
            }
            // use default value if no "SlotRiser1slot1linkSpeed" provided
            if (SlotRiser1slot1linkSpeed == null)
            {
                this.SlotRiser1slot1linkSpeed = SlotRiser1slot1linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRiser1slot1linkSpeed = SlotRiser1slot1linkSpeed;
            }
            // use default value if no "SlotRiser1slot2linkSpeed" provided
            if (SlotRiser1slot2linkSpeed == null)
            {
                this.SlotRiser1slot2linkSpeed = SlotRiser1slot2linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRiser1slot2linkSpeed = SlotRiser1slot2linkSpeed;
            }
            // use default value if no "SlotRiser1slot3linkSpeed" provided
            if (SlotRiser1slot3linkSpeed == null)
            {
                this.SlotRiser1slot3linkSpeed = SlotRiser1slot3linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRiser1slot3linkSpeed = SlotRiser1slot3linkSpeed;
            }
            // use default value if no "SlotRiser2linkSpeed" provided
            if (SlotRiser2linkSpeed == null)
            {
                this.SlotRiser2linkSpeed = SlotRiser2linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRiser2linkSpeed = SlotRiser2linkSpeed;
            }
            // use default value if no "SlotRiser2slot4linkSpeed" provided
            if (SlotRiser2slot4linkSpeed == null)
            {
                this.SlotRiser2slot4linkSpeed = SlotRiser2slot4linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRiser2slot4linkSpeed = SlotRiser2slot4linkSpeed;
            }
            // use default value if no "SlotRiser2slot5linkSpeed" provided
            if (SlotRiser2slot5linkSpeed == null)
            {
                this.SlotRiser2slot5linkSpeed = SlotRiser2slot5linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRiser2slot5linkSpeed = SlotRiser2slot5linkSpeed;
            }
            // use default value if no "SlotRiser2slot6linkSpeed" provided
            if (SlotRiser2slot6linkSpeed == null)
            {
                this.SlotRiser2slot6linkSpeed = SlotRiser2slot6linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotRiser2slot6linkSpeed = SlotRiser2slot6linkSpeed;
            }
            // use default value if no "SlotSasState" provided
            if (SlotSasState == null)
            {
                this.SlotSasState = SlotSasStateEnum.Platformdefault;
            }
            else
            {
                this.SlotSasState = SlotSasState;
            }
            // use default value if no "SlotSsdSlot1linkSpeed" provided
            if (SlotSsdSlot1linkSpeed == null)
            {
                this.SlotSsdSlot1linkSpeed = SlotSsdSlot1linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotSsdSlot1linkSpeed = SlotSsdSlot1linkSpeed;
            }
            // use default value if no "SlotSsdSlot2linkSpeed" provided
            if (SlotSsdSlot2linkSpeed == null)
            {
                this.SlotSsdSlot2linkSpeed = SlotSsdSlot2linkSpeedEnum.Platformdefault;
            }
            else
            {
                this.SlotSsdSlot2linkSpeed = SlotSsdSlot2linkSpeed;
            }
            // use default value if no "Smee" provided
            if (Smee == null)
            {
                this.Smee = SmeeEnum.Platformdefault;
            }
            else
            {
                this.Smee = Smee;
            }
            // use default value if no "SmtMode" provided
            if (SmtMode == null)
            {
                this.SmtMode = SmtModeEnum.Platformdefault;
            }
            else
            {
                this.SmtMode = SmtMode;
            }
            // use default value if no "Snc" provided
            if (Snc == null)
            {
                this.Snc = SncEnum.Platformdefault;
            }
            else
            {
                this.Snc = Snc;
            }
            // use default value if no "SparingMode" provided
            if (SparingMode == null)
            {
                this.SparingMode = SparingModeEnum.Platformdefault;
            }
            else
            {
                this.SparingMode = SparingMode;
            }
            // use default value if no "SrIov" provided
            if (SrIov == null)
            {
                this.SrIov = SrIovEnum.Platformdefault;
            }
            else
            {
                this.SrIov = SrIov;
            }
            // use default value if no "StreamerPrefetch" provided
            if (StreamerPrefetch == null)
            {
                this.StreamerPrefetch = StreamerPrefetchEnum.Platformdefault;
            }
            else
            {
                this.StreamerPrefetch = StreamerPrefetch;
            }
            // use default value if no "SvmMode" provided
            if (SvmMode == null)
            {
                this.SvmMode = SvmModeEnum.Platformdefault;
            }
            else
            {
                this.SvmMode = SvmMode;
            }
            // use default value if no "TerminalType" provided
            if (TerminalType == null)
            {
                this.TerminalType = TerminalTypeEnum.Platformdefault;
            }
            else
            {
                this.TerminalType = TerminalType;
            }
            // use default value if no "TpmControl" provided
            if (TpmControl == null)
            {
                this.TpmControl = TpmControlEnum.Platformdefault;
            }
            else
            {
                this.TpmControl = TpmControl;
            }
            // use default value if no "TpmSupport" provided
            if (TpmSupport == null)
            {
                this.TpmSupport = TpmSupportEnum.Platformdefault;
            }
            else
            {
                this.TpmSupport = TpmSupport;
            }
            // use default value if no "TxtSupport" provided
            if (TxtSupport == null)
            {
                this.TxtSupport = TxtSupportEnum.Platformdefault;
            }
            else
            {
                this.TxtSupport = TxtSupport;
            }
            // use default value if no "UcsmBootOrderRule" provided
            if (UcsmBootOrderRule == null)
            {
                this.UcsmBootOrderRule = UcsmBootOrderRuleEnum.Platformdefault;
            }
            else
            {
                this.UcsmBootOrderRule = UcsmBootOrderRule;
            }
            // use default value if no "UsbEmul6064" provided
            if (UsbEmul6064 == null)
            {
                this.UsbEmul6064 = UsbEmul6064Enum.Platformdefault;
            }
            else
            {
                this.UsbEmul6064 = UsbEmul6064;
            }
            // use default value if no "UsbPortFront" provided
            if (UsbPortFront == null)
            {
                this.UsbPortFront = UsbPortFrontEnum.Platformdefault;
            }
            else
            {
                this.UsbPortFront = UsbPortFront;
            }
            // use default value if no "UsbPortInternal" provided
            if (UsbPortInternal == null)
            {
                this.UsbPortInternal = UsbPortInternalEnum.Platformdefault;
            }
            else
            {
                this.UsbPortInternal = UsbPortInternal;
            }
            // use default value if no "UsbPortKvm" provided
            if (UsbPortKvm == null)
            {
                this.UsbPortKvm = UsbPortKvmEnum.Platformdefault;
            }
            else
            {
                this.UsbPortKvm = UsbPortKvm;
            }
            // use default value if no "UsbPortRear" provided
            if (UsbPortRear == null)
            {
                this.UsbPortRear = UsbPortRearEnum.Platformdefault;
            }
            else
            {
                this.UsbPortRear = UsbPortRear;
            }
            // use default value if no "UsbPortSdCard" provided
            if (UsbPortSdCard == null)
            {
                this.UsbPortSdCard = UsbPortSdCardEnum.Platformdefault;
            }
            else
            {
                this.UsbPortSdCard = UsbPortSdCard;
            }
            // use default value if no "UsbPortVmedia" provided
            if (UsbPortVmedia == null)
            {
                this.UsbPortVmedia = UsbPortVmediaEnum.Platformdefault;
            }
            else
            {
                this.UsbPortVmedia = UsbPortVmedia;
            }
            // use default value if no "UsbXhciSupport" provided
            if (UsbXhciSupport == null)
            {
                this.UsbXhciSupport = UsbXhciSupportEnum.Platformdefault;
            }
            else
            {
                this.UsbXhciSupport = UsbXhciSupport;
            }
            // use default value if no "VgaPriority" provided
            if (VgaPriority == null)
            {
                this.VgaPriority = VgaPriorityEnum.Platformdefault;
            }
            else
            {
                this.VgaPriority = VgaPriority;
            }
            // use default value if no "VmdEnable" provided
            if (VmdEnable == null)
            {
                this.VmdEnable = VmdEnableEnum.Platformdefault;
            }
            else
            {
                this.VmdEnable = VmdEnable;
            }
            // use default value if no "WorkLoadConfig" provided
            if (WorkLoadConfig == null)
            {
                this.WorkLoadConfig = WorkLoadConfigEnum.Platformdefault;
            }
            else
            {
                this.WorkLoadConfig = WorkLoadConfig;
            }
            // use default value if no "XptPrefetch" provided
            if (XptPrefetch == null)
            {
                this.XptPrefetch = XptPrefetchEnum.Platformdefault;
            }
            else
            {
                this.XptPrefetch = XptPrefetch;
            }
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// Description of the policy.  
        /// </summary>
        /// <value>Description of the policy.  </value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Name of the policy.   
        /// </summary>
        /// <value>Name of the policy.   </value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }























































































        /// <summary>
        /// Organization 
        /// </summary>
        /// <value>Organization </value>
        [DataMember(Name="Organization", EmitDefaultValue=false)]
        public IamAccountRef Organization { get; set; }


















        /// <summary>
        /// Relationship to the profile objects 
        /// </summary>
        /// <value>Relationship to the profile objects </value>
        [DataMember(Name="Profiles", EmitDefaultValue=false)]
        public List<PolicyAbstractConfigProfileRef> Profiles { get; set; }


























































































































        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiosPolicy {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AdjacentCacheLinePrefetch: ").Append(AdjacentCacheLinePrefetch).Append("\n");
            sb.Append("  AllUsbDevices: ").Append(AllUsbDevices).Append("\n");
            sb.Append("  Altitude: ").Append(Altitude).Append("\n");
            sb.Append("  AspmSupport: ").Append(AspmSupport).Append("\n");
            sb.Append("  AssertNmiOnPerr: ").Append(AssertNmiOnPerr).Append("\n");
            sb.Append("  AssertNmiOnSerr: ").Append(AssertNmiOnSerr).Append("\n");
            sb.Append("  AutoCcState: ").Append(AutoCcState).Append("\n");
            sb.Append("  AutonumousCstateEnable: ").Append(AutonumousCstateEnable).Append("\n");
            sb.Append("  BaudRate: ").Append(BaudRate).Append("\n");
            sb.Append("  BmeDmaMitigation: ").Append(BmeDmaMitigation).Append("\n");
            sb.Append("  BootOptionNumRetry: ").Append(BootOptionNumRetry).Append("\n");
            sb.Append("  BootOptionReCoolDown: ").Append(BootOptionReCoolDown).Append("\n");
            sb.Append("  BootOptionRetry: ").Append(BootOptionRetry).Append("\n");
            sb.Append("  BootPerformanceMode: ").Append(BootPerformanceMode).Append("\n");
            sb.Append("  CbsCmnCpuCpb: ").Append(CbsCmnCpuCpb).Append("\n");
            sb.Append("  CbsCmnCpuGenDowncoreCtrl: ").Append(CbsCmnCpuGenDowncoreCtrl).Append("\n");
            sb.Append("  CbsCmnCpuGlobalCstateCtrl: ").Append(CbsCmnCpuGlobalCstateCtrl).Append("\n");
            sb.Append("  CbsCmnCpuL1streamHwPrefetcher: ").Append(CbsCmnCpuL1streamHwPrefetcher).Append("\n");
            sb.Append("  CbsCmnCpuL2streamHwPrefetcher: ").Append(CbsCmnCpuL2streamHwPrefetcher).Append("\n");
            sb.Append("  CbsCmnDeterminismSlider: ").Append(CbsCmnDeterminismSlider).Append("\n");
            sb.Append("  CbsCmnGnbNbIommu: ").Append(CbsCmnGnbNbIommu).Append("\n");
            sb.Append("  CbsCmnMemCtrlBankGroupSwapDdr4: ").Append(CbsCmnMemCtrlBankGroupSwapDdr4).Append("\n");
            sb.Append("  CbsCmnMemMapBankInterleaveDdr4: ").Append(CbsCmnMemMapBankInterleaveDdr4).Append("\n");
            sb.Append("  CbsCmncTdpCtl: ").Append(CbsCmncTdpCtl).Append("\n");
            sb.Append("  CbsDfCmnMemIntlv: ").Append(CbsDfCmnMemIntlv).Append("\n");
            sb.Append("  CbsDfCmnMemIntlvSize: ").Append(CbsDfCmnMemIntlvSize).Append("\n");
            sb.Append("  CdnEnable: ").Append(CdnEnable).Append("\n");
            sb.Append("  CdnSupport: ").Append(CdnSupport).Append("\n");
            sb.Append("  ChannelInterLeave: ").Append(ChannelInterLeave).Append("\n");
            sb.Append("  CkeLowPolicy: ").Append(CkeLowPolicy).Append("\n");
            sb.Append("  ClosedLoopThermThrotl: ").Append(ClosedLoopThermThrotl).Append("\n");
            sb.Append("  CmciEnable: ").Append(CmciEnable).Append("\n");
            sb.Append("  ConfigTdp: ").Append(ConfigTdp).Append("\n");
            sb.Append("  ConsoleRedirection: ").Append(ConsoleRedirection).Append("\n");
            sb.Append("  CoreMultiProcessing: ").Append(CoreMultiProcessing).Append("\n");
            sb.Append("  CpuEnergyPerformance: ").Append(CpuEnergyPerformance).Append("\n");
            sb.Append("  CpuFrequencyFloor: ").Append(CpuFrequencyFloor).Append("\n");
            sb.Append("  CpuPerformance: ").Append(CpuPerformance).Append("\n");
            sb.Append("  CpuPowerManagement: ").Append(CpuPowerManagement).Append("\n");
            sb.Append("  DemandScrub: ").Append(DemandScrub).Append("\n");
            sb.Append("  DirectCacheAccess: ").Append(DirectCacheAccess).Append("\n");
            sb.Append("  DramClockThrottling: ").Append(DramClockThrottling).Append("\n");
            sb.Append("  DramRefreshRate: ").Append(DramRefreshRate).Append("\n");
            sb.Append("  EnergyEfficientTurbo: ").Append(EnergyEfficientTurbo).Append("\n");
            sb.Append("  EngPerfTuning: ").Append(EngPerfTuning).Append("\n");
            sb.Append("  EnhancedIntelSpeedStepTech: ").Append(EnhancedIntelSpeedStepTech).Append("\n");
            sb.Append("  EppProfile: ").Append(EppProfile).Append("\n");
            sb.Append("  ExecuteDisableBit: ").Append(ExecuteDisableBit).Append("\n");
            sb.Append("  ExtendedApic: ").Append(ExtendedApic).Append("\n");
            sb.Append("  FlowControl: ").Append(FlowControl).Append("\n");
            sb.Append("  Frb2enable: ").Append(Frb2enable).Append("\n");
            sb.Append("  HardwarePrefetch: ").Append(HardwarePrefetch).Append("\n");
            sb.Append("  HwpmEnable: ").Append(HwpmEnable).Append("\n");
            sb.Append("  ImcInterleave: ").Append(ImcInterleave).Append("\n");
            sb.Append("  IntelHyperThreadingTech: ").Append(IntelHyperThreadingTech).Append("\n");
            sb.Append("  IntelTurboBoostTech: ").Append(IntelTurboBoostTech).Append("\n");
            sb.Append("  IntelVirtualizationTechnology: ").Append(IntelVirtualizationTechnology).Append("\n");
            sb.Append("  IntelVtForDirectedIo: ").Append(IntelVtForDirectedIo).Append("\n");
            sb.Append("  IntelVtdCoherencySupport: ").Append(IntelVtdCoherencySupport).Append("\n");
            sb.Append("  IntelVtdInterruptRemapping: ").Append(IntelVtdInterruptRemapping).Append("\n");
            sb.Append("  IntelVtdPassThroughDmaSupport: ").Append(IntelVtdPassThroughDmaSupport).Append("\n");
            sb.Append("  IntelVtdatsSupport: ").Append(IntelVtdatsSupport).Append("\n");
            sb.Append("  IohErrorEnable: ").Append(IohErrorEnable).Append("\n");
            sb.Append("  IohResource: ").Append(IohResource).Append("\n");
            sb.Append("  IpPrefetch: ").Append(IpPrefetch).Append("\n");
            sb.Append("  Ipv6pxe: ").Append(Ipv6pxe).Append("\n");
            sb.Append("  KtiPrefetch: ").Append(KtiPrefetch).Append("\n");
            sb.Append("  LegacyOsRedirection: ").Append(LegacyOsRedirection).Append("\n");
            sb.Append("  LegacyUsbSupport: ").Append(LegacyUsbSupport).Append("\n");
            sb.Append("  LlcPrefetch: ").Append(LlcPrefetch).Append("\n");
            sb.Append("  LomPort0state: ").Append(LomPort0state).Append("\n");
            sb.Append("  LomPort1state: ").Append(LomPort1state).Append("\n");
            sb.Append("  LomPort2state: ").Append(LomPort2state).Append("\n");
            sb.Append("  LomPort3state: ").Append(LomPort3state).Append("\n");
            sb.Append("  LomPortsAllState: ").Append(LomPortsAllState).Append("\n");
            sb.Append("  LvDdrMode: ").Append(LvDdrMode).Append("\n");
            sb.Append("  MakeDeviceNonBootable: ").Append(MakeDeviceNonBootable).Append("\n");
            sb.Append("  MemoryInterLeave: ").Append(MemoryInterLeave).Append("\n");
            sb.Append("  MemoryMappedIoAbove4gb: ").Append(MemoryMappedIoAbove4gb).Append("\n");
            sb.Append("  MirroringMode: ").Append(MirroringMode).Append("\n");
            sb.Append("  MmcfgBase: ").Append(MmcfgBase).Append("\n");
            sb.Append("  NumaOptimized: ").Append(NumaOptimized).Append("\n");
            sb.Append("  Onboard10gbitLom: ").Append(Onboard10gbitLom).Append("\n");
            sb.Append("  OnboardGbitLom: ").Append(OnboardGbitLom).Append("\n");
            sb.Append("  OnboardScuStorageSupport: ").Append(OnboardScuStorageSupport).Append("\n");
            sb.Append("  OnboardScuStorageSwStack: ").Append(OnboardScuStorageSwStack).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  OsBootWatchdogTimer: ").Append(OsBootWatchdogTimer).Append("\n");
            sb.Append("  OsBootWatchdogTimerPolicy: ").Append(OsBootWatchdogTimerPolicy).Append("\n");
            sb.Append("  OsBootWatchdogTimerTimeout: ").Append(OsBootWatchdogTimerTimeout).Append("\n");
            sb.Append("  OutOfBandMgmtPort: ").Append(OutOfBandMgmtPort).Append("\n");
            sb.Append("  PackageCstateLimit: ").Append(PackageCstateLimit).Append("\n");
            sb.Append("  PatrolScrub: ").Append(PatrolScrub).Append("\n");
            sb.Append("  PatrolScrubDuration: ").Append(PatrolScrubDuration).Append("\n");
            sb.Append("  PcIeSsdHotPlugSupport: ").Append(PcIeSsdHotPlugSupport).Append("\n");
            sb.Append("  PchUsb30mode: ").Append(PchUsb30mode).Append("\n");
            sb.Append("  PciOptionRoMs: ").Append(PciOptionRoMs).Append("\n");
            sb.Append("  PciRomClp: ").Append(PciRomClp).Append("\n");
            sb.Append("  PopSupport: ").Append(PopSupport).Append("\n");
            sb.Append("  PostErrorPause: ").Append(PostErrorPause).Append("\n");
            sb.Append("  ProcessorC1e: ").Append(ProcessorC1e).Append("\n");
            sb.Append("  ProcessorC3report: ").Append(ProcessorC3report).Append("\n");
            sb.Append("  ProcessorC6report: ").Append(ProcessorC6report).Append("\n");
            sb.Append("  ProcessorCstate: ").Append(ProcessorCstate).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  Psata: ").Append(Psata).Append("\n");
            sb.Append("  PstateCoordType: ").Append(PstateCoordType).Append("\n");
            sb.Append("  PuttyKeyPad: ").Append(PuttyKeyPad).Append("\n");
            sb.Append("  PwrPerfTuning: ").Append(PwrPerfTuning).Append("\n");
            sb.Append("  QpiLinkFrequency: ").Append(QpiLinkFrequency).Append("\n");
            sb.Append("  QpiSnoopMode: ").Append(QpiSnoopMode).Append("\n");
            sb.Append("  RankInterLeave: ").Append(RankInterLeave).Append("\n");
            sb.Append("  RedirectionAfterPost: ").Append(RedirectionAfterPost).Append("\n");
            sb.Append("  SataModeSelect: ").Append(SataModeSelect).Append("\n");
            sb.Append("  SelectMemoryRasConfiguration: ").Append(SelectMemoryRasConfiguration).Append("\n");
            sb.Append("  SerialPortAenable: ").Append(SerialPortAenable).Append("\n");
            sb.Append("  SinglePctlEnable: ").Append(SinglePctlEnable).Append("\n");
            sb.Append("  Slot10linkSpeed: ").Append(Slot10linkSpeed).Append("\n");
            sb.Append("  Slot10state: ").Append(Slot10state).Append("\n");
            sb.Append("  Slot11linkSpeed: ").Append(Slot11linkSpeed).Append("\n");
            sb.Append("  Slot11state: ").Append(Slot11state).Append("\n");
            sb.Append("  Slot12linkSpeed: ").Append(Slot12linkSpeed).Append("\n");
            sb.Append("  Slot12state: ").Append(Slot12state).Append("\n");
            sb.Append("  Slot1linkSpeed: ").Append(Slot1linkSpeed).Append("\n");
            sb.Append("  Slot1state: ").Append(Slot1state).Append("\n");
            sb.Append("  Slot2linkSpeed: ").Append(Slot2linkSpeed).Append("\n");
            sb.Append("  Slot2state: ").Append(Slot2state).Append("\n");
            sb.Append("  Slot3linkSpeed: ").Append(Slot3linkSpeed).Append("\n");
            sb.Append("  Slot3state: ").Append(Slot3state).Append("\n");
            sb.Append("  Slot4linkSpeed: ").Append(Slot4linkSpeed).Append("\n");
            sb.Append("  Slot4state: ").Append(Slot4state).Append("\n");
            sb.Append("  Slot5linkSpeed: ").Append(Slot5linkSpeed).Append("\n");
            sb.Append("  Slot5state: ").Append(Slot5state).Append("\n");
            sb.Append("  Slot6linkSpeed: ").Append(Slot6linkSpeed).Append("\n");
            sb.Append("  Slot6state: ").Append(Slot6state).Append("\n");
            sb.Append("  Slot7linkSpeed: ").Append(Slot7linkSpeed).Append("\n");
            sb.Append("  Slot7state: ").Append(Slot7state).Append("\n");
            sb.Append("  Slot8linkSpeed: ").Append(Slot8linkSpeed).Append("\n");
            sb.Append("  Slot8state: ").Append(Slot8state).Append("\n");
            sb.Append("  Slot9linkSpeed: ").Append(Slot9linkSpeed).Append("\n");
            sb.Append("  Slot9state: ").Append(Slot9state).Append("\n");
            sb.Append("  SlotFlomLinkSpeed: ").Append(SlotFlomLinkSpeed).Append("\n");
            sb.Append("  SlotFrontNvme1linkSpeed: ").Append(SlotFrontNvme1linkSpeed).Append("\n");
            sb.Append("  SlotFrontNvme2linkSpeed: ").Append(SlotFrontNvme2linkSpeed).Append("\n");
            sb.Append("  SlotFrontSlot5linkSpeed: ").Append(SlotFrontSlot5linkSpeed).Append("\n");
            sb.Append("  SlotFrontSlot6linkSpeed: ").Append(SlotFrontSlot6linkSpeed).Append("\n");
            sb.Append("  SlotHbaLinkSpeed: ").Append(SlotHbaLinkSpeed).Append("\n");
            sb.Append("  SlotHbaState: ").Append(SlotHbaState).Append("\n");
            sb.Append("  SlotLom1link: ").Append(SlotLom1link).Append("\n");
            sb.Append("  SlotLom2link: ").Append(SlotLom2link).Append("\n");
            sb.Append("  SlotMezzState: ").Append(SlotMezzState).Append("\n");
            sb.Append("  SlotMlomLinkSpeed: ").Append(SlotMlomLinkSpeed).Append("\n");
            sb.Append("  SlotMlomState: ").Append(SlotMlomState).Append("\n");
            sb.Append("  SlotMraidLinkSpeed: ").Append(SlotMraidLinkSpeed).Append("\n");
            sb.Append("  SlotMraidState: ").Append(SlotMraidState).Append("\n");
            sb.Append("  SlotN10state: ").Append(SlotN10state).Append("\n");
            sb.Append("  SlotN11state: ").Append(SlotN11state).Append("\n");
            sb.Append("  SlotN12state: ").Append(SlotN12state).Append("\n");
            sb.Append("  SlotN13state: ").Append(SlotN13state).Append("\n");
            sb.Append("  SlotN14state: ").Append(SlotN14state).Append("\n");
            sb.Append("  SlotN15state: ").Append(SlotN15state).Append("\n");
            sb.Append("  SlotN16state: ").Append(SlotN16state).Append("\n");
            sb.Append("  SlotN17state: ").Append(SlotN17state).Append("\n");
            sb.Append("  SlotN18state: ").Append(SlotN18state).Append("\n");
            sb.Append("  SlotN19state: ").Append(SlotN19state).Append("\n");
            sb.Append("  SlotN1state: ").Append(SlotN1state).Append("\n");
            sb.Append("  SlotN20state: ").Append(SlotN20state).Append("\n");
            sb.Append("  SlotN21state: ").Append(SlotN21state).Append("\n");
            sb.Append("  SlotN22state: ").Append(SlotN22state).Append("\n");
            sb.Append("  SlotN23state: ").Append(SlotN23state).Append("\n");
            sb.Append("  SlotN24state: ").Append(SlotN24state).Append("\n");
            sb.Append("  SlotN2state: ").Append(SlotN2state).Append("\n");
            sb.Append("  SlotN3state: ").Append(SlotN3state).Append("\n");
            sb.Append("  SlotN4state: ").Append(SlotN4state).Append("\n");
            sb.Append("  SlotN5state: ").Append(SlotN5state).Append("\n");
            sb.Append("  SlotN6state: ").Append(SlotN6state).Append("\n");
            sb.Append("  SlotN7state: ").Append(SlotN7state).Append("\n");
            sb.Append("  SlotN8state: ").Append(SlotN8state).Append("\n");
            sb.Append("  SlotN9state: ").Append(SlotN9state).Append("\n");
            sb.Append("  SlotRaidLinkSpeed: ").Append(SlotRaidLinkSpeed).Append("\n");
            sb.Append("  SlotRaidState: ").Append(SlotRaidState).Append("\n");
            sb.Append("  SlotRearNvme1linkSpeed: ").Append(SlotRearNvme1linkSpeed).Append("\n");
            sb.Append("  SlotRearNvme1state: ").Append(SlotRearNvme1state).Append("\n");
            sb.Append("  SlotRearNvme2linkSpeed: ").Append(SlotRearNvme2linkSpeed).Append("\n");
            sb.Append("  SlotRearNvme2state: ").Append(SlotRearNvme2state).Append("\n");
            sb.Append("  SlotRearNvme3state: ").Append(SlotRearNvme3state).Append("\n");
            sb.Append("  SlotRearNvme4state: ").Append(SlotRearNvme4state).Append("\n");
            sb.Append("  SlotRearNvme5state: ").Append(SlotRearNvme5state).Append("\n");
            sb.Append("  SlotRearNvme6state: ").Append(SlotRearNvme6state).Append("\n");
            sb.Append("  SlotRearNvme7state: ").Append(SlotRearNvme7state).Append("\n");
            sb.Append("  SlotRearNvme8state: ").Append(SlotRearNvme8state).Append("\n");
            sb.Append("  SlotRiser1linkSpeed: ").Append(SlotRiser1linkSpeed).Append("\n");
            sb.Append("  SlotRiser1slot1linkSpeed: ").Append(SlotRiser1slot1linkSpeed).Append("\n");
            sb.Append("  SlotRiser1slot2linkSpeed: ").Append(SlotRiser1slot2linkSpeed).Append("\n");
            sb.Append("  SlotRiser1slot3linkSpeed: ").Append(SlotRiser1slot3linkSpeed).Append("\n");
            sb.Append("  SlotRiser2linkSpeed: ").Append(SlotRiser2linkSpeed).Append("\n");
            sb.Append("  SlotRiser2slot4linkSpeed: ").Append(SlotRiser2slot4linkSpeed).Append("\n");
            sb.Append("  SlotRiser2slot5linkSpeed: ").Append(SlotRiser2slot5linkSpeed).Append("\n");
            sb.Append("  SlotRiser2slot6linkSpeed: ").Append(SlotRiser2slot6linkSpeed).Append("\n");
            sb.Append("  SlotSasState: ").Append(SlotSasState).Append("\n");
            sb.Append("  SlotSsdSlot1linkSpeed: ").Append(SlotSsdSlot1linkSpeed).Append("\n");
            sb.Append("  SlotSsdSlot2linkSpeed: ").Append(SlotSsdSlot2linkSpeed).Append("\n");
            sb.Append("  Smee: ").Append(Smee).Append("\n");
            sb.Append("  SmtMode: ").Append(SmtMode).Append("\n");
            sb.Append("  Snc: ").Append(Snc).Append("\n");
            sb.Append("  SparingMode: ").Append(SparingMode).Append("\n");
            sb.Append("  SrIov: ").Append(SrIov).Append("\n");
            sb.Append("  StreamerPrefetch: ").Append(StreamerPrefetch).Append("\n");
            sb.Append("  SvmMode: ").Append(SvmMode).Append("\n");
            sb.Append("  TerminalType: ").Append(TerminalType).Append("\n");
            sb.Append("  TpmControl: ").Append(TpmControl).Append("\n");
            sb.Append("  TpmSupport: ").Append(TpmSupport).Append("\n");
            sb.Append("  TxtSupport: ").Append(TxtSupport).Append("\n");
            sb.Append("  UcsmBootOrderRule: ").Append(UcsmBootOrderRule).Append("\n");
            sb.Append("  UsbEmul6064: ").Append(UsbEmul6064).Append("\n");
            sb.Append("  UsbPortFront: ").Append(UsbPortFront).Append("\n");
            sb.Append("  UsbPortInternal: ").Append(UsbPortInternal).Append("\n");
            sb.Append("  UsbPortKvm: ").Append(UsbPortKvm).Append("\n");
            sb.Append("  UsbPortRear: ").Append(UsbPortRear).Append("\n");
            sb.Append("  UsbPortSdCard: ").Append(UsbPortSdCard).Append("\n");
            sb.Append("  UsbPortVmedia: ").Append(UsbPortVmedia).Append("\n");
            sb.Append("  UsbXhciSupport: ").Append(UsbXhciSupport).Append("\n");
            sb.Append("  VgaPriority: ").Append(VgaPriority).Append("\n");
            sb.Append("  VmdEnable: ").Append(VmdEnable).Append("\n");
            sb.Append("  WorkLoadConfig: ").Append(WorkLoadConfig).Append("\n");
            sb.Append("  XptPrefetch: ").Append(XptPrefetch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BiosPolicy);
        }

        /// <summary>
        /// Returns true if BiosPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of BiosPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiosPolicy other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.AdjacentCacheLinePrefetch == other.AdjacentCacheLinePrefetch ||
                    this.AdjacentCacheLinePrefetch != null &&
                    this.AdjacentCacheLinePrefetch.Equals(other.AdjacentCacheLinePrefetch)
                ) && 
                (
                    this.AllUsbDevices == other.AllUsbDevices ||
                    this.AllUsbDevices != null &&
                    this.AllUsbDevices.Equals(other.AllUsbDevices)
                ) && 
                (
                    this.Altitude == other.Altitude ||
                    this.Altitude != null &&
                    this.Altitude.Equals(other.Altitude)
                ) && 
                (
                    this.AspmSupport == other.AspmSupport ||
                    this.AspmSupport != null &&
                    this.AspmSupport.Equals(other.AspmSupport)
                ) && 
                (
                    this.AssertNmiOnPerr == other.AssertNmiOnPerr ||
                    this.AssertNmiOnPerr != null &&
                    this.AssertNmiOnPerr.Equals(other.AssertNmiOnPerr)
                ) && 
                (
                    this.AssertNmiOnSerr == other.AssertNmiOnSerr ||
                    this.AssertNmiOnSerr != null &&
                    this.AssertNmiOnSerr.Equals(other.AssertNmiOnSerr)
                ) && 
                (
                    this.AutoCcState == other.AutoCcState ||
                    this.AutoCcState != null &&
                    this.AutoCcState.Equals(other.AutoCcState)
                ) && 
                (
                    this.AutonumousCstateEnable == other.AutonumousCstateEnable ||
                    this.AutonumousCstateEnable != null &&
                    this.AutonumousCstateEnable.Equals(other.AutonumousCstateEnable)
                ) && 
                (
                    this.BaudRate == other.BaudRate ||
                    this.BaudRate != null &&
                    this.BaudRate.Equals(other.BaudRate)
                ) && 
                (
                    this.BmeDmaMitigation == other.BmeDmaMitigation ||
                    this.BmeDmaMitigation != null &&
                    this.BmeDmaMitigation.Equals(other.BmeDmaMitigation)
                ) && 
                (
                    this.BootOptionNumRetry == other.BootOptionNumRetry ||
                    this.BootOptionNumRetry != null &&
                    this.BootOptionNumRetry.Equals(other.BootOptionNumRetry)
                ) && 
                (
                    this.BootOptionReCoolDown == other.BootOptionReCoolDown ||
                    this.BootOptionReCoolDown != null &&
                    this.BootOptionReCoolDown.Equals(other.BootOptionReCoolDown)
                ) && 
                (
                    this.BootOptionRetry == other.BootOptionRetry ||
                    this.BootOptionRetry != null &&
                    this.BootOptionRetry.Equals(other.BootOptionRetry)
                ) && 
                (
                    this.BootPerformanceMode == other.BootPerformanceMode ||
                    this.BootPerformanceMode != null &&
                    this.BootPerformanceMode.Equals(other.BootPerformanceMode)
                ) && 
                (
                    this.CbsCmnCpuCpb == other.CbsCmnCpuCpb ||
                    this.CbsCmnCpuCpb != null &&
                    this.CbsCmnCpuCpb.Equals(other.CbsCmnCpuCpb)
                ) && 
                (
                    this.CbsCmnCpuGenDowncoreCtrl == other.CbsCmnCpuGenDowncoreCtrl ||
                    this.CbsCmnCpuGenDowncoreCtrl != null &&
                    this.CbsCmnCpuGenDowncoreCtrl.Equals(other.CbsCmnCpuGenDowncoreCtrl)
                ) && 
                (
                    this.CbsCmnCpuGlobalCstateCtrl == other.CbsCmnCpuGlobalCstateCtrl ||
                    this.CbsCmnCpuGlobalCstateCtrl != null &&
                    this.CbsCmnCpuGlobalCstateCtrl.Equals(other.CbsCmnCpuGlobalCstateCtrl)
                ) && 
                (
                    this.CbsCmnCpuL1streamHwPrefetcher == other.CbsCmnCpuL1streamHwPrefetcher ||
                    this.CbsCmnCpuL1streamHwPrefetcher != null &&
                    this.CbsCmnCpuL1streamHwPrefetcher.Equals(other.CbsCmnCpuL1streamHwPrefetcher)
                ) && 
                (
                    this.CbsCmnCpuL2streamHwPrefetcher == other.CbsCmnCpuL2streamHwPrefetcher ||
                    this.CbsCmnCpuL2streamHwPrefetcher != null &&
                    this.CbsCmnCpuL2streamHwPrefetcher.Equals(other.CbsCmnCpuL2streamHwPrefetcher)
                ) && 
                (
                    this.CbsCmnDeterminismSlider == other.CbsCmnDeterminismSlider ||
                    this.CbsCmnDeterminismSlider != null &&
                    this.CbsCmnDeterminismSlider.Equals(other.CbsCmnDeterminismSlider)
                ) && 
                (
                    this.CbsCmnGnbNbIommu == other.CbsCmnGnbNbIommu ||
                    this.CbsCmnGnbNbIommu != null &&
                    this.CbsCmnGnbNbIommu.Equals(other.CbsCmnGnbNbIommu)
                ) && 
                (
                    this.CbsCmnMemCtrlBankGroupSwapDdr4 == other.CbsCmnMemCtrlBankGroupSwapDdr4 ||
                    this.CbsCmnMemCtrlBankGroupSwapDdr4 != null &&
                    this.CbsCmnMemCtrlBankGroupSwapDdr4.Equals(other.CbsCmnMemCtrlBankGroupSwapDdr4)
                ) && 
                (
                    this.CbsCmnMemMapBankInterleaveDdr4 == other.CbsCmnMemMapBankInterleaveDdr4 ||
                    this.CbsCmnMemMapBankInterleaveDdr4 != null &&
                    this.CbsCmnMemMapBankInterleaveDdr4.Equals(other.CbsCmnMemMapBankInterleaveDdr4)
                ) && 
                (
                    this.CbsCmncTdpCtl == other.CbsCmncTdpCtl ||
                    this.CbsCmncTdpCtl != null &&
                    this.CbsCmncTdpCtl.Equals(other.CbsCmncTdpCtl)
                ) && 
                (
                    this.CbsDfCmnMemIntlv == other.CbsDfCmnMemIntlv ||
                    this.CbsDfCmnMemIntlv != null &&
                    this.CbsDfCmnMemIntlv.Equals(other.CbsDfCmnMemIntlv)
                ) && 
                (
                    this.CbsDfCmnMemIntlvSize == other.CbsDfCmnMemIntlvSize ||
                    this.CbsDfCmnMemIntlvSize != null &&
                    this.CbsDfCmnMemIntlvSize.Equals(other.CbsDfCmnMemIntlvSize)
                ) && 
                (
                    this.CdnEnable == other.CdnEnable ||
                    this.CdnEnable != null &&
                    this.CdnEnable.Equals(other.CdnEnable)
                ) && 
                (
                    this.CdnSupport == other.CdnSupport ||
                    this.CdnSupport != null &&
                    this.CdnSupport.Equals(other.CdnSupport)
                ) && 
                (
                    this.ChannelInterLeave == other.ChannelInterLeave ||
                    this.ChannelInterLeave != null &&
                    this.ChannelInterLeave.Equals(other.ChannelInterLeave)
                ) && 
                (
                    this.CkeLowPolicy == other.CkeLowPolicy ||
                    this.CkeLowPolicy != null &&
                    this.CkeLowPolicy.Equals(other.CkeLowPolicy)
                ) && 
                (
                    this.ClosedLoopThermThrotl == other.ClosedLoopThermThrotl ||
                    this.ClosedLoopThermThrotl != null &&
                    this.ClosedLoopThermThrotl.Equals(other.ClosedLoopThermThrotl)
                ) && 
                (
                    this.CmciEnable == other.CmciEnable ||
                    this.CmciEnable != null &&
                    this.CmciEnable.Equals(other.CmciEnable)
                ) && 
                (
                    this.ConfigTdp == other.ConfigTdp ||
                    this.ConfigTdp != null &&
                    this.ConfigTdp.Equals(other.ConfigTdp)
                ) && 
                (
                    this.ConsoleRedirection == other.ConsoleRedirection ||
                    this.ConsoleRedirection != null &&
                    this.ConsoleRedirection.Equals(other.ConsoleRedirection)
                ) && 
                (
                    this.CoreMultiProcessing == other.CoreMultiProcessing ||
                    this.CoreMultiProcessing != null &&
                    this.CoreMultiProcessing.Equals(other.CoreMultiProcessing)
                ) && 
                (
                    this.CpuEnergyPerformance == other.CpuEnergyPerformance ||
                    this.CpuEnergyPerformance != null &&
                    this.CpuEnergyPerformance.Equals(other.CpuEnergyPerformance)
                ) && 
                (
                    this.CpuFrequencyFloor == other.CpuFrequencyFloor ||
                    this.CpuFrequencyFloor != null &&
                    this.CpuFrequencyFloor.Equals(other.CpuFrequencyFloor)
                ) && 
                (
                    this.CpuPerformance == other.CpuPerformance ||
                    this.CpuPerformance != null &&
                    this.CpuPerformance.Equals(other.CpuPerformance)
                ) && 
                (
                    this.CpuPowerManagement == other.CpuPowerManagement ||
                    this.CpuPowerManagement != null &&
                    this.CpuPowerManagement.Equals(other.CpuPowerManagement)
                ) && 
                (
                    this.DemandScrub == other.DemandScrub ||
                    this.DemandScrub != null &&
                    this.DemandScrub.Equals(other.DemandScrub)
                ) && 
                (
                    this.DirectCacheAccess == other.DirectCacheAccess ||
                    this.DirectCacheAccess != null &&
                    this.DirectCacheAccess.Equals(other.DirectCacheAccess)
                ) && 
                (
                    this.DramClockThrottling == other.DramClockThrottling ||
                    this.DramClockThrottling != null &&
                    this.DramClockThrottling.Equals(other.DramClockThrottling)
                ) && 
                (
                    this.DramRefreshRate == other.DramRefreshRate ||
                    this.DramRefreshRate != null &&
                    this.DramRefreshRate.Equals(other.DramRefreshRate)
                ) && 
                (
                    this.EnergyEfficientTurbo == other.EnergyEfficientTurbo ||
                    this.EnergyEfficientTurbo != null &&
                    this.EnergyEfficientTurbo.Equals(other.EnergyEfficientTurbo)
                ) && 
                (
                    this.EngPerfTuning == other.EngPerfTuning ||
                    this.EngPerfTuning != null &&
                    this.EngPerfTuning.Equals(other.EngPerfTuning)
                ) && 
                (
                    this.EnhancedIntelSpeedStepTech == other.EnhancedIntelSpeedStepTech ||
                    this.EnhancedIntelSpeedStepTech != null &&
                    this.EnhancedIntelSpeedStepTech.Equals(other.EnhancedIntelSpeedStepTech)
                ) && 
                (
                    this.EppProfile == other.EppProfile ||
                    this.EppProfile != null &&
                    this.EppProfile.Equals(other.EppProfile)
                ) && 
                (
                    this.ExecuteDisableBit == other.ExecuteDisableBit ||
                    this.ExecuteDisableBit != null &&
                    this.ExecuteDisableBit.Equals(other.ExecuteDisableBit)
                ) && 
                (
                    this.ExtendedApic == other.ExtendedApic ||
                    this.ExtendedApic != null &&
                    this.ExtendedApic.Equals(other.ExtendedApic)
                ) && 
                (
                    this.FlowControl == other.FlowControl ||
                    this.FlowControl != null &&
                    this.FlowControl.Equals(other.FlowControl)
                ) && 
                (
                    this.Frb2enable == other.Frb2enable ||
                    this.Frb2enable != null &&
                    this.Frb2enable.Equals(other.Frb2enable)
                ) && 
                (
                    this.HardwarePrefetch == other.HardwarePrefetch ||
                    this.HardwarePrefetch != null &&
                    this.HardwarePrefetch.Equals(other.HardwarePrefetch)
                ) && 
                (
                    this.HwpmEnable == other.HwpmEnable ||
                    this.HwpmEnable != null &&
                    this.HwpmEnable.Equals(other.HwpmEnable)
                ) && 
                (
                    this.ImcInterleave == other.ImcInterleave ||
                    this.ImcInterleave != null &&
                    this.ImcInterleave.Equals(other.ImcInterleave)
                ) && 
                (
                    this.IntelHyperThreadingTech == other.IntelHyperThreadingTech ||
                    this.IntelHyperThreadingTech != null &&
                    this.IntelHyperThreadingTech.Equals(other.IntelHyperThreadingTech)
                ) && 
                (
                    this.IntelTurboBoostTech == other.IntelTurboBoostTech ||
                    this.IntelTurboBoostTech != null &&
                    this.IntelTurboBoostTech.Equals(other.IntelTurboBoostTech)
                ) && 
                (
                    this.IntelVirtualizationTechnology == other.IntelVirtualizationTechnology ||
                    this.IntelVirtualizationTechnology != null &&
                    this.IntelVirtualizationTechnology.Equals(other.IntelVirtualizationTechnology)
                ) && 
                (
                    this.IntelVtForDirectedIo == other.IntelVtForDirectedIo ||
                    this.IntelVtForDirectedIo != null &&
                    this.IntelVtForDirectedIo.Equals(other.IntelVtForDirectedIo)
                ) && 
                (
                    this.IntelVtdCoherencySupport == other.IntelVtdCoherencySupport ||
                    this.IntelVtdCoherencySupport != null &&
                    this.IntelVtdCoherencySupport.Equals(other.IntelVtdCoherencySupport)
                ) && 
                (
                    this.IntelVtdInterruptRemapping == other.IntelVtdInterruptRemapping ||
                    this.IntelVtdInterruptRemapping != null &&
                    this.IntelVtdInterruptRemapping.Equals(other.IntelVtdInterruptRemapping)
                ) && 
                (
                    this.IntelVtdPassThroughDmaSupport == other.IntelVtdPassThroughDmaSupport ||
                    this.IntelVtdPassThroughDmaSupport != null &&
                    this.IntelVtdPassThroughDmaSupport.Equals(other.IntelVtdPassThroughDmaSupport)
                ) && 
                (
                    this.IntelVtdatsSupport == other.IntelVtdatsSupport ||
                    this.IntelVtdatsSupport != null &&
                    this.IntelVtdatsSupport.Equals(other.IntelVtdatsSupport)
                ) && 
                (
                    this.IohErrorEnable == other.IohErrorEnable ||
                    this.IohErrorEnable != null &&
                    this.IohErrorEnable.Equals(other.IohErrorEnable)
                ) && 
                (
                    this.IohResource == other.IohResource ||
                    this.IohResource != null &&
                    this.IohResource.Equals(other.IohResource)
                ) && 
                (
                    this.IpPrefetch == other.IpPrefetch ||
                    this.IpPrefetch != null &&
                    this.IpPrefetch.Equals(other.IpPrefetch)
                ) && 
                (
                    this.Ipv6pxe == other.Ipv6pxe ||
                    this.Ipv6pxe != null &&
                    this.Ipv6pxe.Equals(other.Ipv6pxe)
                ) && 
                (
                    this.KtiPrefetch == other.KtiPrefetch ||
                    this.KtiPrefetch != null &&
                    this.KtiPrefetch.Equals(other.KtiPrefetch)
                ) && 
                (
                    this.LegacyOsRedirection == other.LegacyOsRedirection ||
                    this.LegacyOsRedirection != null &&
                    this.LegacyOsRedirection.Equals(other.LegacyOsRedirection)
                ) && 
                (
                    this.LegacyUsbSupport == other.LegacyUsbSupport ||
                    this.LegacyUsbSupport != null &&
                    this.LegacyUsbSupport.Equals(other.LegacyUsbSupport)
                ) && 
                (
                    this.LlcPrefetch == other.LlcPrefetch ||
                    this.LlcPrefetch != null &&
                    this.LlcPrefetch.Equals(other.LlcPrefetch)
                ) && 
                (
                    this.LomPort0state == other.LomPort0state ||
                    this.LomPort0state != null &&
                    this.LomPort0state.Equals(other.LomPort0state)
                ) && 
                (
                    this.LomPort1state == other.LomPort1state ||
                    this.LomPort1state != null &&
                    this.LomPort1state.Equals(other.LomPort1state)
                ) && 
                (
                    this.LomPort2state == other.LomPort2state ||
                    this.LomPort2state != null &&
                    this.LomPort2state.Equals(other.LomPort2state)
                ) && 
                (
                    this.LomPort3state == other.LomPort3state ||
                    this.LomPort3state != null &&
                    this.LomPort3state.Equals(other.LomPort3state)
                ) && 
                (
                    this.LomPortsAllState == other.LomPortsAllState ||
                    this.LomPortsAllState != null &&
                    this.LomPortsAllState.Equals(other.LomPortsAllState)
                ) && 
                (
                    this.LvDdrMode == other.LvDdrMode ||
                    this.LvDdrMode != null &&
                    this.LvDdrMode.Equals(other.LvDdrMode)
                ) && 
                (
                    this.MakeDeviceNonBootable == other.MakeDeviceNonBootable ||
                    this.MakeDeviceNonBootable != null &&
                    this.MakeDeviceNonBootable.Equals(other.MakeDeviceNonBootable)
                ) && 
                (
                    this.MemoryInterLeave == other.MemoryInterLeave ||
                    this.MemoryInterLeave != null &&
                    this.MemoryInterLeave.Equals(other.MemoryInterLeave)
                ) && 
                (
                    this.MemoryMappedIoAbove4gb == other.MemoryMappedIoAbove4gb ||
                    this.MemoryMappedIoAbove4gb != null &&
                    this.MemoryMappedIoAbove4gb.Equals(other.MemoryMappedIoAbove4gb)
                ) && 
                (
                    this.MirroringMode == other.MirroringMode ||
                    this.MirroringMode != null &&
                    this.MirroringMode.Equals(other.MirroringMode)
                ) && 
                (
                    this.MmcfgBase == other.MmcfgBase ||
                    this.MmcfgBase != null &&
                    this.MmcfgBase.Equals(other.MmcfgBase)
                ) && 
                (
                    this.NumaOptimized == other.NumaOptimized ||
                    this.NumaOptimized != null &&
                    this.NumaOptimized.Equals(other.NumaOptimized)
                ) && 
                (
                    this.Onboard10gbitLom == other.Onboard10gbitLom ||
                    this.Onboard10gbitLom != null &&
                    this.Onboard10gbitLom.Equals(other.Onboard10gbitLom)
                ) && 
                (
                    this.OnboardGbitLom == other.OnboardGbitLom ||
                    this.OnboardGbitLom != null &&
                    this.OnboardGbitLom.Equals(other.OnboardGbitLom)
                ) && 
                (
                    this.OnboardScuStorageSupport == other.OnboardScuStorageSupport ||
                    this.OnboardScuStorageSupport != null &&
                    this.OnboardScuStorageSupport.Equals(other.OnboardScuStorageSupport)
                ) && 
                (
                    this.OnboardScuStorageSwStack == other.OnboardScuStorageSwStack ||
                    this.OnboardScuStorageSwStack != null &&
                    this.OnboardScuStorageSwStack.Equals(other.OnboardScuStorageSwStack)
                ) && 
                (
                    this.Organization == other.Organization ||
                    this.Organization != null &&
                    this.Organization.Equals(other.Organization)
                ) && 
                (
                    this.OsBootWatchdogTimer == other.OsBootWatchdogTimer ||
                    this.OsBootWatchdogTimer != null &&
                    this.OsBootWatchdogTimer.Equals(other.OsBootWatchdogTimer)
                ) && 
                (
                    this.OsBootWatchdogTimerPolicy == other.OsBootWatchdogTimerPolicy ||
                    this.OsBootWatchdogTimerPolicy != null &&
                    this.OsBootWatchdogTimerPolicy.Equals(other.OsBootWatchdogTimerPolicy)
                ) && 
                (
                    this.OsBootWatchdogTimerTimeout == other.OsBootWatchdogTimerTimeout ||
                    this.OsBootWatchdogTimerTimeout != null &&
                    this.OsBootWatchdogTimerTimeout.Equals(other.OsBootWatchdogTimerTimeout)
                ) && 
                (
                    this.OutOfBandMgmtPort == other.OutOfBandMgmtPort ||
                    this.OutOfBandMgmtPort != null &&
                    this.OutOfBandMgmtPort.Equals(other.OutOfBandMgmtPort)
                ) && 
                (
                    this.PackageCstateLimit == other.PackageCstateLimit ||
                    this.PackageCstateLimit != null &&
                    this.PackageCstateLimit.Equals(other.PackageCstateLimit)
                ) && 
                (
                    this.PatrolScrub == other.PatrolScrub ||
                    this.PatrolScrub != null &&
                    this.PatrolScrub.Equals(other.PatrolScrub)
                ) && 
                (
                    this.PatrolScrubDuration == other.PatrolScrubDuration ||
                    this.PatrolScrubDuration != null &&
                    this.PatrolScrubDuration.Equals(other.PatrolScrubDuration)
                ) && 
                (
                    this.PcIeSsdHotPlugSupport == other.PcIeSsdHotPlugSupport ||
                    this.PcIeSsdHotPlugSupport != null &&
                    this.PcIeSsdHotPlugSupport.Equals(other.PcIeSsdHotPlugSupport)
                ) && 
                (
                    this.PchUsb30mode == other.PchUsb30mode ||
                    this.PchUsb30mode != null &&
                    this.PchUsb30mode.Equals(other.PchUsb30mode)
                ) && 
                (
                    this.PciOptionRoMs == other.PciOptionRoMs ||
                    this.PciOptionRoMs != null &&
                    this.PciOptionRoMs.Equals(other.PciOptionRoMs)
                ) && 
                (
                    this.PciRomClp == other.PciRomClp ||
                    this.PciRomClp != null &&
                    this.PciRomClp.Equals(other.PciRomClp)
                ) && 
                (
                    this.PopSupport == other.PopSupport ||
                    this.PopSupport != null &&
                    this.PopSupport.Equals(other.PopSupport)
                ) && 
                (
                    this.PostErrorPause == other.PostErrorPause ||
                    this.PostErrorPause != null &&
                    this.PostErrorPause.Equals(other.PostErrorPause)
                ) && 
                (
                    this.ProcessorC1e == other.ProcessorC1e ||
                    this.ProcessorC1e != null &&
                    this.ProcessorC1e.Equals(other.ProcessorC1e)
                ) && 
                (
                    this.ProcessorC3report == other.ProcessorC3report ||
                    this.ProcessorC3report != null &&
                    this.ProcessorC3report.Equals(other.ProcessorC3report)
                ) && 
                (
                    this.ProcessorC6report == other.ProcessorC6report ||
                    this.ProcessorC6report != null &&
                    this.ProcessorC6report.Equals(other.ProcessorC6report)
                ) && 
                (
                    this.ProcessorCstate == other.ProcessorCstate ||
                    this.ProcessorCstate != null &&
                    this.ProcessorCstate.Equals(other.ProcessorCstate)
                ) && 
                (
                    this.Profiles == other.Profiles ||
                    this.Profiles != null &&
                    this.Profiles.SequenceEqual(other.Profiles)
                ) && 
                (
                    this.Psata == other.Psata ||
                    this.Psata != null &&
                    this.Psata.Equals(other.Psata)
                ) && 
                (
                    this.PstateCoordType == other.PstateCoordType ||
                    this.PstateCoordType != null &&
                    this.PstateCoordType.Equals(other.PstateCoordType)
                ) && 
                (
                    this.PuttyKeyPad == other.PuttyKeyPad ||
                    this.PuttyKeyPad != null &&
                    this.PuttyKeyPad.Equals(other.PuttyKeyPad)
                ) && 
                (
                    this.PwrPerfTuning == other.PwrPerfTuning ||
                    this.PwrPerfTuning != null &&
                    this.PwrPerfTuning.Equals(other.PwrPerfTuning)
                ) && 
                (
                    this.QpiLinkFrequency == other.QpiLinkFrequency ||
                    this.QpiLinkFrequency != null &&
                    this.QpiLinkFrequency.Equals(other.QpiLinkFrequency)
                ) && 
                (
                    this.QpiSnoopMode == other.QpiSnoopMode ||
                    this.QpiSnoopMode != null &&
                    this.QpiSnoopMode.Equals(other.QpiSnoopMode)
                ) && 
                (
                    this.RankInterLeave == other.RankInterLeave ||
                    this.RankInterLeave != null &&
                    this.RankInterLeave.Equals(other.RankInterLeave)
                ) && 
                (
                    this.RedirectionAfterPost == other.RedirectionAfterPost ||
                    this.RedirectionAfterPost != null &&
                    this.RedirectionAfterPost.Equals(other.RedirectionAfterPost)
                ) && 
                (
                    this.SataModeSelect == other.SataModeSelect ||
                    this.SataModeSelect != null &&
                    this.SataModeSelect.Equals(other.SataModeSelect)
                ) && 
                (
                    this.SelectMemoryRasConfiguration == other.SelectMemoryRasConfiguration ||
                    this.SelectMemoryRasConfiguration != null &&
                    this.SelectMemoryRasConfiguration.Equals(other.SelectMemoryRasConfiguration)
                ) && 
                (
                    this.SerialPortAenable == other.SerialPortAenable ||
                    this.SerialPortAenable != null &&
                    this.SerialPortAenable.Equals(other.SerialPortAenable)
                ) && 
                (
                    this.SinglePctlEnable == other.SinglePctlEnable ||
                    this.SinglePctlEnable != null &&
                    this.SinglePctlEnable.Equals(other.SinglePctlEnable)
                ) && 
                (
                    this.Slot10linkSpeed == other.Slot10linkSpeed ||
                    this.Slot10linkSpeed != null &&
                    this.Slot10linkSpeed.Equals(other.Slot10linkSpeed)
                ) && 
                (
                    this.Slot10state == other.Slot10state ||
                    this.Slot10state != null &&
                    this.Slot10state.Equals(other.Slot10state)
                ) && 
                (
                    this.Slot11linkSpeed == other.Slot11linkSpeed ||
                    this.Slot11linkSpeed != null &&
                    this.Slot11linkSpeed.Equals(other.Slot11linkSpeed)
                ) && 
                (
                    this.Slot11state == other.Slot11state ||
                    this.Slot11state != null &&
                    this.Slot11state.Equals(other.Slot11state)
                ) && 
                (
                    this.Slot12linkSpeed == other.Slot12linkSpeed ||
                    this.Slot12linkSpeed != null &&
                    this.Slot12linkSpeed.Equals(other.Slot12linkSpeed)
                ) && 
                (
                    this.Slot12state == other.Slot12state ||
                    this.Slot12state != null &&
                    this.Slot12state.Equals(other.Slot12state)
                ) && 
                (
                    this.Slot1linkSpeed == other.Slot1linkSpeed ||
                    this.Slot1linkSpeed != null &&
                    this.Slot1linkSpeed.Equals(other.Slot1linkSpeed)
                ) && 
                (
                    this.Slot1state == other.Slot1state ||
                    this.Slot1state != null &&
                    this.Slot1state.Equals(other.Slot1state)
                ) && 
                (
                    this.Slot2linkSpeed == other.Slot2linkSpeed ||
                    this.Slot2linkSpeed != null &&
                    this.Slot2linkSpeed.Equals(other.Slot2linkSpeed)
                ) && 
                (
                    this.Slot2state == other.Slot2state ||
                    this.Slot2state != null &&
                    this.Slot2state.Equals(other.Slot2state)
                ) && 
                (
                    this.Slot3linkSpeed == other.Slot3linkSpeed ||
                    this.Slot3linkSpeed != null &&
                    this.Slot3linkSpeed.Equals(other.Slot3linkSpeed)
                ) && 
                (
                    this.Slot3state == other.Slot3state ||
                    this.Slot3state != null &&
                    this.Slot3state.Equals(other.Slot3state)
                ) && 
                (
                    this.Slot4linkSpeed == other.Slot4linkSpeed ||
                    this.Slot4linkSpeed != null &&
                    this.Slot4linkSpeed.Equals(other.Slot4linkSpeed)
                ) && 
                (
                    this.Slot4state == other.Slot4state ||
                    this.Slot4state != null &&
                    this.Slot4state.Equals(other.Slot4state)
                ) && 
                (
                    this.Slot5linkSpeed == other.Slot5linkSpeed ||
                    this.Slot5linkSpeed != null &&
                    this.Slot5linkSpeed.Equals(other.Slot5linkSpeed)
                ) && 
                (
                    this.Slot5state == other.Slot5state ||
                    this.Slot5state != null &&
                    this.Slot5state.Equals(other.Slot5state)
                ) && 
                (
                    this.Slot6linkSpeed == other.Slot6linkSpeed ||
                    this.Slot6linkSpeed != null &&
                    this.Slot6linkSpeed.Equals(other.Slot6linkSpeed)
                ) && 
                (
                    this.Slot6state == other.Slot6state ||
                    this.Slot6state != null &&
                    this.Slot6state.Equals(other.Slot6state)
                ) && 
                (
                    this.Slot7linkSpeed == other.Slot7linkSpeed ||
                    this.Slot7linkSpeed != null &&
                    this.Slot7linkSpeed.Equals(other.Slot7linkSpeed)
                ) && 
                (
                    this.Slot7state == other.Slot7state ||
                    this.Slot7state != null &&
                    this.Slot7state.Equals(other.Slot7state)
                ) && 
                (
                    this.Slot8linkSpeed == other.Slot8linkSpeed ||
                    this.Slot8linkSpeed != null &&
                    this.Slot8linkSpeed.Equals(other.Slot8linkSpeed)
                ) && 
                (
                    this.Slot8state == other.Slot8state ||
                    this.Slot8state != null &&
                    this.Slot8state.Equals(other.Slot8state)
                ) && 
                (
                    this.Slot9linkSpeed == other.Slot9linkSpeed ||
                    this.Slot9linkSpeed != null &&
                    this.Slot9linkSpeed.Equals(other.Slot9linkSpeed)
                ) && 
                (
                    this.Slot9state == other.Slot9state ||
                    this.Slot9state != null &&
                    this.Slot9state.Equals(other.Slot9state)
                ) && 
                (
                    this.SlotFlomLinkSpeed == other.SlotFlomLinkSpeed ||
                    this.SlotFlomLinkSpeed != null &&
                    this.SlotFlomLinkSpeed.Equals(other.SlotFlomLinkSpeed)
                ) && 
                (
                    this.SlotFrontNvme1linkSpeed == other.SlotFrontNvme1linkSpeed ||
                    this.SlotFrontNvme1linkSpeed != null &&
                    this.SlotFrontNvme1linkSpeed.Equals(other.SlotFrontNvme1linkSpeed)
                ) && 
                (
                    this.SlotFrontNvme2linkSpeed == other.SlotFrontNvme2linkSpeed ||
                    this.SlotFrontNvme2linkSpeed != null &&
                    this.SlotFrontNvme2linkSpeed.Equals(other.SlotFrontNvme2linkSpeed)
                ) && 
                (
                    this.SlotFrontSlot5linkSpeed == other.SlotFrontSlot5linkSpeed ||
                    this.SlotFrontSlot5linkSpeed != null &&
                    this.SlotFrontSlot5linkSpeed.Equals(other.SlotFrontSlot5linkSpeed)
                ) && 
                (
                    this.SlotFrontSlot6linkSpeed == other.SlotFrontSlot6linkSpeed ||
                    this.SlotFrontSlot6linkSpeed != null &&
                    this.SlotFrontSlot6linkSpeed.Equals(other.SlotFrontSlot6linkSpeed)
                ) && 
                (
                    this.SlotHbaLinkSpeed == other.SlotHbaLinkSpeed ||
                    this.SlotHbaLinkSpeed != null &&
                    this.SlotHbaLinkSpeed.Equals(other.SlotHbaLinkSpeed)
                ) && 
                (
                    this.SlotHbaState == other.SlotHbaState ||
                    this.SlotHbaState != null &&
                    this.SlotHbaState.Equals(other.SlotHbaState)
                ) && 
                (
                    this.SlotLom1link == other.SlotLom1link ||
                    this.SlotLom1link != null &&
                    this.SlotLom1link.Equals(other.SlotLom1link)
                ) && 
                (
                    this.SlotLom2link == other.SlotLom2link ||
                    this.SlotLom2link != null &&
                    this.SlotLom2link.Equals(other.SlotLom2link)
                ) && 
                (
                    this.SlotMezzState == other.SlotMezzState ||
                    this.SlotMezzState != null &&
                    this.SlotMezzState.Equals(other.SlotMezzState)
                ) && 
                (
                    this.SlotMlomLinkSpeed == other.SlotMlomLinkSpeed ||
                    this.SlotMlomLinkSpeed != null &&
                    this.SlotMlomLinkSpeed.Equals(other.SlotMlomLinkSpeed)
                ) && 
                (
                    this.SlotMlomState == other.SlotMlomState ||
                    this.SlotMlomState != null &&
                    this.SlotMlomState.Equals(other.SlotMlomState)
                ) && 
                (
                    this.SlotMraidLinkSpeed == other.SlotMraidLinkSpeed ||
                    this.SlotMraidLinkSpeed != null &&
                    this.SlotMraidLinkSpeed.Equals(other.SlotMraidLinkSpeed)
                ) && 
                (
                    this.SlotMraidState == other.SlotMraidState ||
                    this.SlotMraidState != null &&
                    this.SlotMraidState.Equals(other.SlotMraidState)
                ) && 
                (
                    this.SlotN10state == other.SlotN10state ||
                    this.SlotN10state != null &&
                    this.SlotN10state.Equals(other.SlotN10state)
                ) && 
                (
                    this.SlotN11state == other.SlotN11state ||
                    this.SlotN11state != null &&
                    this.SlotN11state.Equals(other.SlotN11state)
                ) && 
                (
                    this.SlotN12state == other.SlotN12state ||
                    this.SlotN12state != null &&
                    this.SlotN12state.Equals(other.SlotN12state)
                ) && 
                (
                    this.SlotN13state == other.SlotN13state ||
                    this.SlotN13state != null &&
                    this.SlotN13state.Equals(other.SlotN13state)
                ) && 
                (
                    this.SlotN14state == other.SlotN14state ||
                    this.SlotN14state != null &&
                    this.SlotN14state.Equals(other.SlotN14state)
                ) && 
                (
                    this.SlotN15state == other.SlotN15state ||
                    this.SlotN15state != null &&
                    this.SlotN15state.Equals(other.SlotN15state)
                ) && 
                (
                    this.SlotN16state == other.SlotN16state ||
                    this.SlotN16state != null &&
                    this.SlotN16state.Equals(other.SlotN16state)
                ) && 
                (
                    this.SlotN17state == other.SlotN17state ||
                    this.SlotN17state != null &&
                    this.SlotN17state.Equals(other.SlotN17state)
                ) && 
                (
                    this.SlotN18state == other.SlotN18state ||
                    this.SlotN18state != null &&
                    this.SlotN18state.Equals(other.SlotN18state)
                ) && 
                (
                    this.SlotN19state == other.SlotN19state ||
                    this.SlotN19state != null &&
                    this.SlotN19state.Equals(other.SlotN19state)
                ) && 
                (
                    this.SlotN1state == other.SlotN1state ||
                    this.SlotN1state != null &&
                    this.SlotN1state.Equals(other.SlotN1state)
                ) && 
                (
                    this.SlotN20state == other.SlotN20state ||
                    this.SlotN20state != null &&
                    this.SlotN20state.Equals(other.SlotN20state)
                ) && 
                (
                    this.SlotN21state == other.SlotN21state ||
                    this.SlotN21state != null &&
                    this.SlotN21state.Equals(other.SlotN21state)
                ) && 
                (
                    this.SlotN22state == other.SlotN22state ||
                    this.SlotN22state != null &&
                    this.SlotN22state.Equals(other.SlotN22state)
                ) && 
                (
                    this.SlotN23state == other.SlotN23state ||
                    this.SlotN23state != null &&
                    this.SlotN23state.Equals(other.SlotN23state)
                ) && 
                (
                    this.SlotN24state == other.SlotN24state ||
                    this.SlotN24state != null &&
                    this.SlotN24state.Equals(other.SlotN24state)
                ) && 
                (
                    this.SlotN2state == other.SlotN2state ||
                    this.SlotN2state != null &&
                    this.SlotN2state.Equals(other.SlotN2state)
                ) && 
                (
                    this.SlotN3state == other.SlotN3state ||
                    this.SlotN3state != null &&
                    this.SlotN3state.Equals(other.SlotN3state)
                ) && 
                (
                    this.SlotN4state == other.SlotN4state ||
                    this.SlotN4state != null &&
                    this.SlotN4state.Equals(other.SlotN4state)
                ) && 
                (
                    this.SlotN5state == other.SlotN5state ||
                    this.SlotN5state != null &&
                    this.SlotN5state.Equals(other.SlotN5state)
                ) && 
                (
                    this.SlotN6state == other.SlotN6state ||
                    this.SlotN6state != null &&
                    this.SlotN6state.Equals(other.SlotN6state)
                ) && 
                (
                    this.SlotN7state == other.SlotN7state ||
                    this.SlotN7state != null &&
                    this.SlotN7state.Equals(other.SlotN7state)
                ) && 
                (
                    this.SlotN8state == other.SlotN8state ||
                    this.SlotN8state != null &&
                    this.SlotN8state.Equals(other.SlotN8state)
                ) && 
                (
                    this.SlotN9state == other.SlotN9state ||
                    this.SlotN9state != null &&
                    this.SlotN9state.Equals(other.SlotN9state)
                ) && 
                (
                    this.SlotRaidLinkSpeed == other.SlotRaidLinkSpeed ||
                    this.SlotRaidLinkSpeed != null &&
                    this.SlotRaidLinkSpeed.Equals(other.SlotRaidLinkSpeed)
                ) && 
                (
                    this.SlotRaidState == other.SlotRaidState ||
                    this.SlotRaidState != null &&
                    this.SlotRaidState.Equals(other.SlotRaidState)
                ) && 
                (
                    this.SlotRearNvme1linkSpeed == other.SlotRearNvme1linkSpeed ||
                    this.SlotRearNvme1linkSpeed != null &&
                    this.SlotRearNvme1linkSpeed.Equals(other.SlotRearNvme1linkSpeed)
                ) && 
                (
                    this.SlotRearNvme1state == other.SlotRearNvme1state ||
                    this.SlotRearNvme1state != null &&
                    this.SlotRearNvme1state.Equals(other.SlotRearNvme1state)
                ) && 
                (
                    this.SlotRearNvme2linkSpeed == other.SlotRearNvme2linkSpeed ||
                    this.SlotRearNvme2linkSpeed != null &&
                    this.SlotRearNvme2linkSpeed.Equals(other.SlotRearNvme2linkSpeed)
                ) && 
                (
                    this.SlotRearNvme2state == other.SlotRearNvme2state ||
                    this.SlotRearNvme2state != null &&
                    this.SlotRearNvme2state.Equals(other.SlotRearNvme2state)
                ) && 
                (
                    this.SlotRearNvme3state == other.SlotRearNvme3state ||
                    this.SlotRearNvme3state != null &&
                    this.SlotRearNvme3state.Equals(other.SlotRearNvme3state)
                ) && 
                (
                    this.SlotRearNvme4state == other.SlotRearNvme4state ||
                    this.SlotRearNvme4state != null &&
                    this.SlotRearNvme4state.Equals(other.SlotRearNvme4state)
                ) && 
                (
                    this.SlotRearNvme5state == other.SlotRearNvme5state ||
                    this.SlotRearNvme5state != null &&
                    this.SlotRearNvme5state.Equals(other.SlotRearNvme5state)
                ) && 
                (
                    this.SlotRearNvme6state == other.SlotRearNvme6state ||
                    this.SlotRearNvme6state != null &&
                    this.SlotRearNvme6state.Equals(other.SlotRearNvme6state)
                ) && 
                (
                    this.SlotRearNvme7state == other.SlotRearNvme7state ||
                    this.SlotRearNvme7state != null &&
                    this.SlotRearNvme7state.Equals(other.SlotRearNvme7state)
                ) && 
                (
                    this.SlotRearNvme8state == other.SlotRearNvme8state ||
                    this.SlotRearNvme8state != null &&
                    this.SlotRearNvme8state.Equals(other.SlotRearNvme8state)
                ) && 
                (
                    this.SlotRiser1linkSpeed == other.SlotRiser1linkSpeed ||
                    this.SlotRiser1linkSpeed != null &&
                    this.SlotRiser1linkSpeed.Equals(other.SlotRiser1linkSpeed)
                ) && 
                (
                    this.SlotRiser1slot1linkSpeed == other.SlotRiser1slot1linkSpeed ||
                    this.SlotRiser1slot1linkSpeed != null &&
                    this.SlotRiser1slot1linkSpeed.Equals(other.SlotRiser1slot1linkSpeed)
                ) && 
                (
                    this.SlotRiser1slot2linkSpeed == other.SlotRiser1slot2linkSpeed ||
                    this.SlotRiser1slot2linkSpeed != null &&
                    this.SlotRiser1slot2linkSpeed.Equals(other.SlotRiser1slot2linkSpeed)
                ) && 
                (
                    this.SlotRiser1slot3linkSpeed == other.SlotRiser1slot3linkSpeed ||
                    this.SlotRiser1slot3linkSpeed != null &&
                    this.SlotRiser1slot3linkSpeed.Equals(other.SlotRiser1slot3linkSpeed)
                ) && 
                (
                    this.SlotRiser2linkSpeed == other.SlotRiser2linkSpeed ||
                    this.SlotRiser2linkSpeed != null &&
                    this.SlotRiser2linkSpeed.Equals(other.SlotRiser2linkSpeed)
                ) && 
                (
                    this.SlotRiser2slot4linkSpeed == other.SlotRiser2slot4linkSpeed ||
                    this.SlotRiser2slot4linkSpeed != null &&
                    this.SlotRiser2slot4linkSpeed.Equals(other.SlotRiser2slot4linkSpeed)
                ) && 
                (
                    this.SlotRiser2slot5linkSpeed == other.SlotRiser2slot5linkSpeed ||
                    this.SlotRiser2slot5linkSpeed != null &&
                    this.SlotRiser2slot5linkSpeed.Equals(other.SlotRiser2slot5linkSpeed)
                ) && 
                (
                    this.SlotRiser2slot6linkSpeed == other.SlotRiser2slot6linkSpeed ||
                    this.SlotRiser2slot6linkSpeed != null &&
                    this.SlotRiser2slot6linkSpeed.Equals(other.SlotRiser2slot6linkSpeed)
                ) && 
                (
                    this.SlotSasState == other.SlotSasState ||
                    this.SlotSasState != null &&
                    this.SlotSasState.Equals(other.SlotSasState)
                ) && 
                (
                    this.SlotSsdSlot1linkSpeed == other.SlotSsdSlot1linkSpeed ||
                    this.SlotSsdSlot1linkSpeed != null &&
                    this.SlotSsdSlot1linkSpeed.Equals(other.SlotSsdSlot1linkSpeed)
                ) && 
                (
                    this.SlotSsdSlot2linkSpeed == other.SlotSsdSlot2linkSpeed ||
                    this.SlotSsdSlot2linkSpeed != null &&
                    this.SlotSsdSlot2linkSpeed.Equals(other.SlotSsdSlot2linkSpeed)
                ) && 
                (
                    this.Smee == other.Smee ||
                    this.Smee != null &&
                    this.Smee.Equals(other.Smee)
                ) && 
                (
                    this.SmtMode == other.SmtMode ||
                    this.SmtMode != null &&
                    this.SmtMode.Equals(other.SmtMode)
                ) && 
                (
                    this.Snc == other.Snc ||
                    this.Snc != null &&
                    this.Snc.Equals(other.Snc)
                ) && 
                (
                    this.SparingMode == other.SparingMode ||
                    this.SparingMode != null &&
                    this.SparingMode.Equals(other.SparingMode)
                ) && 
                (
                    this.SrIov == other.SrIov ||
                    this.SrIov != null &&
                    this.SrIov.Equals(other.SrIov)
                ) && 
                (
                    this.StreamerPrefetch == other.StreamerPrefetch ||
                    this.StreamerPrefetch != null &&
                    this.StreamerPrefetch.Equals(other.StreamerPrefetch)
                ) && 
                (
                    this.SvmMode == other.SvmMode ||
                    this.SvmMode != null &&
                    this.SvmMode.Equals(other.SvmMode)
                ) && 
                (
                    this.TerminalType == other.TerminalType ||
                    this.TerminalType != null &&
                    this.TerminalType.Equals(other.TerminalType)
                ) && 
                (
                    this.TpmControl == other.TpmControl ||
                    this.TpmControl != null &&
                    this.TpmControl.Equals(other.TpmControl)
                ) && 
                (
                    this.TpmSupport == other.TpmSupport ||
                    this.TpmSupport != null &&
                    this.TpmSupport.Equals(other.TpmSupport)
                ) && 
                (
                    this.TxtSupport == other.TxtSupport ||
                    this.TxtSupport != null &&
                    this.TxtSupport.Equals(other.TxtSupport)
                ) && 
                (
                    this.UcsmBootOrderRule == other.UcsmBootOrderRule ||
                    this.UcsmBootOrderRule != null &&
                    this.UcsmBootOrderRule.Equals(other.UcsmBootOrderRule)
                ) && 
                (
                    this.UsbEmul6064 == other.UsbEmul6064 ||
                    this.UsbEmul6064 != null &&
                    this.UsbEmul6064.Equals(other.UsbEmul6064)
                ) && 
                (
                    this.UsbPortFront == other.UsbPortFront ||
                    this.UsbPortFront != null &&
                    this.UsbPortFront.Equals(other.UsbPortFront)
                ) && 
                (
                    this.UsbPortInternal == other.UsbPortInternal ||
                    this.UsbPortInternal != null &&
                    this.UsbPortInternal.Equals(other.UsbPortInternal)
                ) && 
                (
                    this.UsbPortKvm == other.UsbPortKvm ||
                    this.UsbPortKvm != null &&
                    this.UsbPortKvm.Equals(other.UsbPortKvm)
                ) && 
                (
                    this.UsbPortRear == other.UsbPortRear ||
                    this.UsbPortRear != null &&
                    this.UsbPortRear.Equals(other.UsbPortRear)
                ) && 
                (
                    this.UsbPortSdCard == other.UsbPortSdCard ||
                    this.UsbPortSdCard != null &&
                    this.UsbPortSdCard.Equals(other.UsbPortSdCard)
                ) && 
                (
                    this.UsbPortVmedia == other.UsbPortVmedia ||
                    this.UsbPortVmedia != null &&
                    this.UsbPortVmedia.Equals(other.UsbPortVmedia)
                ) && 
                (
                    this.UsbXhciSupport == other.UsbXhciSupport ||
                    this.UsbXhciSupport != null &&
                    this.UsbXhciSupport.Equals(other.UsbXhciSupport)
                ) && 
                (
                    this.VgaPriority == other.VgaPriority ||
                    this.VgaPriority != null &&
                    this.VgaPriority.Equals(other.VgaPriority)
                ) && 
                (
                    this.VmdEnable == other.VmdEnable ||
                    this.VmdEnable != null &&
                    this.VmdEnable.Equals(other.VmdEnable)
                ) && 
                (
                    this.WorkLoadConfig == other.WorkLoadConfig ||
                    this.WorkLoadConfig != null &&
                    this.WorkLoadConfig.Equals(other.WorkLoadConfig)
                ) && 
                (
                    this.XptPrefetch == other.XptPrefetch ||
                    this.XptPrefetch != null &&
                    this.XptPrefetch.Equals(other.XptPrefetch)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.AdjacentCacheLinePrefetch != null)
                    hash = hash * 59 + this.AdjacentCacheLinePrefetch.GetHashCode();
                if (this.AllUsbDevices != null)
                    hash = hash * 59 + this.AllUsbDevices.GetHashCode();
                if (this.Altitude != null)
                    hash = hash * 59 + this.Altitude.GetHashCode();
                if (this.AspmSupport != null)
                    hash = hash * 59 + this.AspmSupport.GetHashCode();
                if (this.AssertNmiOnPerr != null)
                    hash = hash * 59 + this.AssertNmiOnPerr.GetHashCode();
                if (this.AssertNmiOnSerr != null)
                    hash = hash * 59 + this.AssertNmiOnSerr.GetHashCode();
                if (this.AutoCcState != null)
                    hash = hash * 59 + this.AutoCcState.GetHashCode();
                if (this.AutonumousCstateEnable != null)
                    hash = hash * 59 + this.AutonumousCstateEnable.GetHashCode();
                if (this.BaudRate != null)
                    hash = hash * 59 + this.BaudRate.GetHashCode();
                if (this.BmeDmaMitigation != null)
                    hash = hash * 59 + this.BmeDmaMitigation.GetHashCode();
                if (this.BootOptionNumRetry != null)
                    hash = hash * 59 + this.BootOptionNumRetry.GetHashCode();
                if (this.BootOptionReCoolDown != null)
                    hash = hash * 59 + this.BootOptionReCoolDown.GetHashCode();
                if (this.BootOptionRetry != null)
                    hash = hash * 59 + this.BootOptionRetry.GetHashCode();
                if (this.BootPerformanceMode != null)
                    hash = hash * 59 + this.BootPerformanceMode.GetHashCode();
                if (this.CbsCmnCpuCpb != null)
                    hash = hash * 59 + this.CbsCmnCpuCpb.GetHashCode();
                if (this.CbsCmnCpuGenDowncoreCtrl != null)
                    hash = hash * 59 + this.CbsCmnCpuGenDowncoreCtrl.GetHashCode();
                if (this.CbsCmnCpuGlobalCstateCtrl != null)
                    hash = hash * 59 + this.CbsCmnCpuGlobalCstateCtrl.GetHashCode();
                if (this.CbsCmnCpuL1streamHwPrefetcher != null)
                    hash = hash * 59 + this.CbsCmnCpuL1streamHwPrefetcher.GetHashCode();
                if (this.CbsCmnCpuL2streamHwPrefetcher != null)
                    hash = hash * 59 + this.CbsCmnCpuL2streamHwPrefetcher.GetHashCode();
                if (this.CbsCmnDeterminismSlider != null)
                    hash = hash * 59 + this.CbsCmnDeterminismSlider.GetHashCode();
                if (this.CbsCmnGnbNbIommu != null)
                    hash = hash * 59 + this.CbsCmnGnbNbIommu.GetHashCode();
                if (this.CbsCmnMemCtrlBankGroupSwapDdr4 != null)
                    hash = hash * 59 + this.CbsCmnMemCtrlBankGroupSwapDdr4.GetHashCode();
                if (this.CbsCmnMemMapBankInterleaveDdr4 != null)
                    hash = hash * 59 + this.CbsCmnMemMapBankInterleaveDdr4.GetHashCode();
                if (this.CbsCmncTdpCtl != null)
                    hash = hash * 59 + this.CbsCmncTdpCtl.GetHashCode();
                if (this.CbsDfCmnMemIntlv != null)
                    hash = hash * 59 + this.CbsDfCmnMemIntlv.GetHashCode();
                if (this.CbsDfCmnMemIntlvSize != null)
                    hash = hash * 59 + this.CbsDfCmnMemIntlvSize.GetHashCode();
                if (this.CdnEnable != null)
                    hash = hash * 59 + this.CdnEnable.GetHashCode();
                if (this.CdnSupport != null)
                    hash = hash * 59 + this.CdnSupport.GetHashCode();
                if (this.ChannelInterLeave != null)
                    hash = hash * 59 + this.ChannelInterLeave.GetHashCode();
                if (this.CkeLowPolicy != null)
                    hash = hash * 59 + this.CkeLowPolicy.GetHashCode();
                if (this.ClosedLoopThermThrotl != null)
                    hash = hash * 59 + this.ClosedLoopThermThrotl.GetHashCode();
                if (this.CmciEnable != null)
                    hash = hash * 59 + this.CmciEnable.GetHashCode();
                if (this.ConfigTdp != null)
                    hash = hash * 59 + this.ConfigTdp.GetHashCode();
                if (this.ConsoleRedirection != null)
                    hash = hash * 59 + this.ConsoleRedirection.GetHashCode();
                if (this.CoreMultiProcessing != null)
                    hash = hash * 59 + this.CoreMultiProcessing.GetHashCode();
                if (this.CpuEnergyPerformance != null)
                    hash = hash * 59 + this.CpuEnergyPerformance.GetHashCode();
                if (this.CpuFrequencyFloor != null)
                    hash = hash * 59 + this.CpuFrequencyFloor.GetHashCode();
                if (this.CpuPerformance != null)
                    hash = hash * 59 + this.CpuPerformance.GetHashCode();
                if (this.CpuPowerManagement != null)
                    hash = hash * 59 + this.CpuPowerManagement.GetHashCode();
                if (this.DemandScrub != null)
                    hash = hash * 59 + this.DemandScrub.GetHashCode();
                if (this.DirectCacheAccess != null)
                    hash = hash * 59 + this.DirectCacheAccess.GetHashCode();
                if (this.DramClockThrottling != null)
                    hash = hash * 59 + this.DramClockThrottling.GetHashCode();
                if (this.DramRefreshRate != null)
                    hash = hash * 59 + this.DramRefreshRate.GetHashCode();
                if (this.EnergyEfficientTurbo != null)
                    hash = hash * 59 + this.EnergyEfficientTurbo.GetHashCode();
                if (this.EngPerfTuning != null)
                    hash = hash * 59 + this.EngPerfTuning.GetHashCode();
                if (this.EnhancedIntelSpeedStepTech != null)
                    hash = hash * 59 + this.EnhancedIntelSpeedStepTech.GetHashCode();
                if (this.EppProfile != null)
                    hash = hash * 59 + this.EppProfile.GetHashCode();
                if (this.ExecuteDisableBit != null)
                    hash = hash * 59 + this.ExecuteDisableBit.GetHashCode();
                if (this.ExtendedApic != null)
                    hash = hash * 59 + this.ExtendedApic.GetHashCode();
                if (this.FlowControl != null)
                    hash = hash * 59 + this.FlowControl.GetHashCode();
                if (this.Frb2enable != null)
                    hash = hash * 59 + this.Frb2enable.GetHashCode();
                if (this.HardwarePrefetch != null)
                    hash = hash * 59 + this.HardwarePrefetch.GetHashCode();
                if (this.HwpmEnable != null)
                    hash = hash * 59 + this.HwpmEnable.GetHashCode();
                if (this.ImcInterleave != null)
                    hash = hash * 59 + this.ImcInterleave.GetHashCode();
                if (this.IntelHyperThreadingTech != null)
                    hash = hash * 59 + this.IntelHyperThreadingTech.GetHashCode();
                if (this.IntelTurboBoostTech != null)
                    hash = hash * 59 + this.IntelTurboBoostTech.GetHashCode();
                if (this.IntelVirtualizationTechnology != null)
                    hash = hash * 59 + this.IntelVirtualizationTechnology.GetHashCode();
                if (this.IntelVtForDirectedIo != null)
                    hash = hash * 59 + this.IntelVtForDirectedIo.GetHashCode();
                if (this.IntelVtdCoherencySupport != null)
                    hash = hash * 59 + this.IntelVtdCoherencySupport.GetHashCode();
                if (this.IntelVtdInterruptRemapping != null)
                    hash = hash * 59 + this.IntelVtdInterruptRemapping.GetHashCode();
                if (this.IntelVtdPassThroughDmaSupport != null)
                    hash = hash * 59 + this.IntelVtdPassThroughDmaSupport.GetHashCode();
                if (this.IntelVtdatsSupport != null)
                    hash = hash * 59 + this.IntelVtdatsSupport.GetHashCode();
                if (this.IohErrorEnable != null)
                    hash = hash * 59 + this.IohErrorEnable.GetHashCode();
                if (this.IohResource != null)
                    hash = hash * 59 + this.IohResource.GetHashCode();
                if (this.IpPrefetch != null)
                    hash = hash * 59 + this.IpPrefetch.GetHashCode();
                if (this.Ipv6pxe != null)
                    hash = hash * 59 + this.Ipv6pxe.GetHashCode();
                if (this.KtiPrefetch != null)
                    hash = hash * 59 + this.KtiPrefetch.GetHashCode();
                if (this.LegacyOsRedirection != null)
                    hash = hash * 59 + this.LegacyOsRedirection.GetHashCode();
                if (this.LegacyUsbSupport != null)
                    hash = hash * 59 + this.LegacyUsbSupport.GetHashCode();
                if (this.LlcPrefetch != null)
                    hash = hash * 59 + this.LlcPrefetch.GetHashCode();
                if (this.LomPort0state != null)
                    hash = hash * 59 + this.LomPort0state.GetHashCode();
                if (this.LomPort1state != null)
                    hash = hash * 59 + this.LomPort1state.GetHashCode();
                if (this.LomPort2state != null)
                    hash = hash * 59 + this.LomPort2state.GetHashCode();
                if (this.LomPort3state != null)
                    hash = hash * 59 + this.LomPort3state.GetHashCode();
                if (this.LomPortsAllState != null)
                    hash = hash * 59 + this.LomPortsAllState.GetHashCode();
                if (this.LvDdrMode != null)
                    hash = hash * 59 + this.LvDdrMode.GetHashCode();
                if (this.MakeDeviceNonBootable != null)
                    hash = hash * 59 + this.MakeDeviceNonBootable.GetHashCode();
                if (this.MemoryInterLeave != null)
                    hash = hash * 59 + this.MemoryInterLeave.GetHashCode();
                if (this.MemoryMappedIoAbove4gb != null)
                    hash = hash * 59 + this.MemoryMappedIoAbove4gb.GetHashCode();
                if (this.MirroringMode != null)
                    hash = hash * 59 + this.MirroringMode.GetHashCode();
                if (this.MmcfgBase != null)
                    hash = hash * 59 + this.MmcfgBase.GetHashCode();
                if (this.NumaOptimized != null)
                    hash = hash * 59 + this.NumaOptimized.GetHashCode();
                if (this.Onboard10gbitLom != null)
                    hash = hash * 59 + this.Onboard10gbitLom.GetHashCode();
                if (this.OnboardGbitLom != null)
                    hash = hash * 59 + this.OnboardGbitLom.GetHashCode();
                if (this.OnboardScuStorageSupport != null)
                    hash = hash * 59 + this.OnboardScuStorageSupport.GetHashCode();
                if (this.OnboardScuStorageSwStack != null)
                    hash = hash * 59 + this.OnboardScuStorageSwStack.GetHashCode();
                if (this.Organization != null)
                    hash = hash * 59 + this.Organization.GetHashCode();
                if (this.OsBootWatchdogTimer != null)
                    hash = hash * 59 + this.OsBootWatchdogTimer.GetHashCode();
                if (this.OsBootWatchdogTimerPolicy != null)
                    hash = hash * 59 + this.OsBootWatchdogTimerPolicy.GetHashCode();
                if (this.OsBootWatchdogTimerTimeout != null)
                    hash = hash * 59 + this.OsBootWatchdogTimerTimeout.GetHashCode();
                if (this.OutOfBandMgmtPort != null)
                    hash = hash * 59 + this.OutOfBandMgmtPort.GetHashCode();
                if (this.PackageCstateLimit != null)
                    hash = hash * 59 + this.PackageCstateLimit.GetHashCode();
                if (this.PatrolScrub != null)
                    hash = hash * 59 + this.PatrolScrub.GetHashCode();
                if (this.PatrolScrubDuration != null)
                    hash = hash * 59 + this.PatrolScrubDuration.GetHashCode();
                if (this.PcIeSsdHotPlugSupport != null)
                    hash = hash * 59 + this.PcIeSsdHotPlugSupport.GetHashCode();
                if (this.PchUsb30mode != null)
                    hash = hash * 59 + this.PchUsb30mode.GetHashCode();
                if (this.PciOptionRoMs != null)
                    hash = hash * 59 + this.PciOptionRoMs.GetHashCode();
                if (this.PciRomClp != null)
                    hash = hash * 59 + this.PciRomClp.GetHashCode();
                if (this.PopSupport != null)
                    hash = hash * 59 + this.PopSupport.GetHashCode();
                if (this.PostErrorPause != null)
                    hash = hash * 59 + this.PostErrorPause.GetHashCode();
                if (this.ProcessorC1e != null)
                    hash = hash * 59 + this.ProcessorC1e.GetHashCode();
                if (this.ProcessorC3report != null)
                    hash = hash * 59 + this.ProcessorC3report.GetHashCode();
                if (this.ProcessorC6report != null)
                    hash = hash * 59 + this.ProcessorC6report.GetHashCode();
                if (this.ProcessorCstate != null)
                    hash = hash * 59 + this.ProcessorCstate.GetHashCode();
                if (this.Profiles != null)
                    hash = hash * 59 + this.Profiles.GetHashCode();
                if (this.Psata != null)
                    hash = hash * 59 + this.Psata.GetHashCode();
                if (this.PstateCoordType != null)
                    hash = hash * 59 + this.PstateCoordType.GetHashCode();
                if (this.PuttyKeyPad != null)
                    hash = hash * 59 + this.PuttyKeyPad.GetHashCode();
                if (this.PwrPerfTuning != null)
                    hash = hash * 59 + this.PwrPerfTuning.GetHashCode();
                if (this.QpiLinkFrequency != null)
                    hash = hash * 59 + this.QpiLinkFrequency.GetHashCode();
                if (this.QpiSnoopMode != null)
                    hash = hash * 59 + this.QpiSnoopMode.GetHashCode();
                if (this.RankInterLeave != null)
                    hash = hash * 59 + this.RankInterLeave.GetHashCode();
                if (this.RedirectionAfterPost != null)
                    hash = hash * 59 + this.RedirectionAfterPost.GetHashCode();
                if (this.SataModeSelect != null)
                    hash = hash * 59 + this.SataModeSelect.GetHashCode();
                if (this.SelectMemoryRasConfiguration != null)
                    hash = hash * 59 + this.SelectMemoryRasConfiguration.GetHashCode();
                if (this.SerialPortAenable != null)
                    hash = hash * 59 + this.SerialPortAenable.GetHashCode();
                if (this.SinglePctlEnable != null)
                    hash = hash * 59 + this.SinglePctlEnable.GetHashCode();
                if (this.Slot10linkSpeed != null)
                    hash = hash * 59 + this.Slot10linkSpeed.GetHashCode();
                if (this.Slot10state != null)
                    hash = hash * 59 + this.Slot10state.GetHashCode();
                if (this.Slot11linkSpeed != null)
                    hash = hash * 59 + this.Slot11linkSpeed.GetHashCode();
                if (this.Slot11state != null)
                    hash = hash * 59 + this.Slot11state.GetHashCode();
                if (this.Slot12linkSpeed != null)
                    hash = hash * 59 + this.Slot12linkSpeed.GetHashCode();
                if (this.Slot12state != null)
                    hash = hash * 59 + this.Slot12state.GetHashCode();
                if (this.Slot1linkSpeed != null)
                    hash = hash * 59 + this.Slot1linkSpeed.GetHashCode();
                if (this.Slot1state != null)
                    hash = hash * 59 + this.Slot1state.GetHashCode();
                if (this.Slot2linkSpeed != null)
                    hash = hash * 59 + this.Slot2linkSpeed.GetHashCode();
                if (this.Slot2state != null)
                    hash = hash * 59 + this.Slot2state.GetHashCode();
                if (this.Slot3linkSpeed != null)
                    hash = hash * 59 + this.Slot3linkSpeed.GetHashCode();
                if (this.Slot3state != null)
                    hash = hash * 59 + this.Slot3state.GetHashCode();
                if (this.Slot4linkSpeed != null)
                    hash = hash * 59 + this.Slot4linkSpeed.GetHashCode();
                if (this.Slot4state != null)
                    hash = hash * 59 + this.Slot4state.GetHashCode();
                if (this.Slot5linkSpeed != null)
                    hash = hash * 59 + this.Slot5linkSpeed.GetHashCode();
                if (this.Slot5state != null)
                    hash = hash * 59 + this.Slot5state.GetHashCode();
                if (this.Slot6linkSpeed != null)
                    hash = hash * 59 + this.Slot6linkSpeed.GetHashCode();
                if (this.Slot6state != null)
                    hash = hash * 59 + this.Slot6state.GetHashCode();
                if (this.Slot7linkSpeed != null)
                    hash = hash * 59 + this.Slot7linkSpeed.GetHashCode();
                if (this.Slot7state != null)
                    hash = hash * 59 + this.Slot7state.GetHashCode();
                if (this.Slot8linkSpeed != null)
                    hash = hash * 59 + this.Slot8linkSpeed.GetHashCode();
                if (this.Slot8state != null)
                    hash = hash * 59 + this.Slot8state.GetHashCode();
                if (this.Slot9linkSpeed != null)
                    hash = hash * 59 + this.Slot9linkSpeed.GetHashCode();
                if (this.Slot9state != null)
                    hash = hash * 59 + this.Slot9state.GetHashCode();
                if (this.SlotFlomLinkSpeed != null)
                    hash = hash * 59 + this.SlotFlomLinkSpeed.GetHashCode();
                if (this.SlotFrontNvme1linkSpeed != null)
                    hash = hash * 59 + this.SlotFrontNvme1linkSpeed.GetHashCode();
                if (this.SlotFrontNvme2linkSpeed != null)
                    hash = hash * 59 + this.SlotFrontNvme2linkSpeed.GetHashCode();
                if (this.SlotFrontSlot5linkSpeed != null)
                    hash = hash * 59 + this.SlotFrontSlot5linkSpeed.GetHashCode();
                if (this.SlotFrontSlot6linkSpeed != null)
                    hash = hash * 59 + this.SlotFrontSlot6linkSpeed.GetHashCode();
                if (this.SlotHbaLinkSpeed != null)
                    hash = hash * 59 + this.SlotHbaLinkSpeed.GetHashCode();
                if (this.SlotHbaState != null)
                    hash = hash * 59 + this.SlotHbaState.GetHashCode();
                if (this.SlotLom1link != null)
                    hash = hash * 59 + this.SlotLom1link.GetHashCode();
                if (this.SlotLom2link != null)
                    hash = hash * 59 + this.SlotLom2link.GetHashCode();
                if (this.SlotMezzState != null)
                    hash = hash * 59 + this.SlotMezzState.GetHashCode();
                if (this.SlotMlomLinkSpeed != null)
                    hash = hash * 59 + this.SlotMlomLinkSpeed.GetHashCode();
                if (this.SlotMlomState != null)
                    hash = hash * 59 + this.SlotMlomState.GetHashCode();
                if (this.SlotMraidLinkSpeed != null)
                    hash = hash * 59 + this.SlotMraidLinkSpeed.GetHashCode();
                if (this.SlotMraidState != null)
                    hash = hash * 59 + this.SlotMraidState.GetHashCode();
                if (this.SlotN10state != null)
                    hash = hash * 59 + this.SlotN10state.GetHashCode();
                if (this.SlotN11state != null)
                    hash = hash * 59 + this.SlotN11state.GetHashCode();
                if (this.SlotN12state != null)
                    hash = hash * 59 + this.SlotN12state.GetHashCode();
                if (this.SlotN13state != null)
                    hash = hash * 59 + this.SlotN13state.GetHashCode();
                if (this.SlotN14state != null)
                    hash = hash * 59 + this.SlotN14state.GetHashCode();
                if (this.SlotN15state != null)
                    hash = hash * 59 + this.SlotN15state.GetHashCode();
                if (this.SlotN16state != null)
                    hash = hash * 59 + this.SlotN16state.GetHashCode();
                if (this.SlotN17state != null)
                    hash = hash * 59 + this.SlotN17state.GetHashCode();
                if (this.SlotN18state != null)
                    hash = hash * 59 + this.SlotN18state.GetHashCode();
                if (this.SlotN19state != null)
                    hash = hash * 59 + this.SlotN19state.GetHashCode();
                if (this.SlotN1state != null)
                    hash = hash * 59 + this.SlotN1state.GetHashCode();
                if (this.SlotN20state != null)
                    hash = hash * 59 + this.SlotN20state.GetHashCode();
                if (this.SlotN21state != null)
                    hash = hash * 59 + this.SlotN21state.GetHashCode();
                if (this.SlotN22state != null)
                    hash = hash * 59 + this.SlotN22state.GetHashCode();
                if (this.SlotN23state != null)
                    hash = hash * 59 + this.SlotN23state.GetHashCode();
                if (this.SlotN24state != null)
                    hash = hash * 59 + this.SlotN24state.GetHashCode();
                if (this.SlotN2state != null)
                    hash = hash * 59 + this.SlotN2state.GetHashCode();
                if (this.SlotN3state != null)
                    hash = hash * 59 + this.SlotN3state.GetHashCode();
                if (this.SlotN4state != null)
                    hash = hash * 59 + this.SlotN4state.GetHashCode();
                if (this.SlotN5state != null)
                    hash = hash * 59 + this.SlotN5state.GetHashCode();
                if (this.SlotN6state != null)
                    hash = hash * 59 + this.SlotN6state.GetHashCode();
                if (this.SlotN7state != null)
                    hash = hash * 59 + this.SlotN7state.GetHashCode();
                if (this.SlotN8state != null)
                    hash = hash * 59 + this.SlotN8state.GetHashCode();
                if (this.SlotN9state != null)
                    hash = hash * 59 + this.SlotN9state.GetHashCode();
                if (this.SlotRaidLinkSpeed != null)
                    hash = hash * 59 + this.SlotRaidLinkSpeed.GetHashCode();
                if (this.SlotRaidState != null)
                    hash = hash * 59 + this.SlotRaidState.GetHashCode();
                if (this.SlotRearNvme1linkSpeed != null)
                    hash = hash * 59 + this.SlotRearNvme1linkSpeed.GetHashCode();
                if (this.SlotRearNvme1state != null)
                    hash = hash * 59 + this.SlotRearNvme1state.GetHashCode();
                if (this.SlotRearNvme2linkSpeed != null)
                    hash = hash * 59 + this.SlotRearNvme2linkSpeed.GetHashCode();
                if (this.SlotRearNvme2state != null)
                    hash = hash * 59 + this.SlotRearNvme2state.GetHashCode();
                if (this.SlotRearNvme3state != null)
                    hash = hash * 59 + this.SlotRearNvme3state.GetHashCode();
                if (this.SlotRearNvme4state != null)
                    hash = hash * 59 + this.SlotRearNvme4state.GetHashCode();
                if (this.SlotRearNvme5state != null)
                    hash = hash * 59 + this.SlotRearNvme5state.GetHashCode();
                if (this.SlotRearNvme6state != null)
                    hash = hash * 59 + this.SlotRearNvme6state.GetHashCode();
                if (this.SlotRearNvme7state != null)
                    hash = hash * 59 + this.SlotRearNvme7state.GetHashCode();
                if (this.SlotRearNvme8state != null)
                    hash = hash * 59 + this.SlotRearNvme8state.GetHashCode();
                if (this.SlotRiser1linkSpeed != null)
                    hash = hash * 59 + this.SlotRiser1linkSpeed.GetHashCode();
                if (this.SlotRiser1slot1linkSpeed != null)
                    hash = hash * 59 + this.SlotRiser1slot1linkSpeed.GetHashCode();
                if (this.SlotRiser1slot2linkSpeed != null)
                    hash = hash * 59 + this.SlotRiser1slot2linkSpeed.GetHashCode();
                if (this.SlotRiser1slot3linkSpeed != null)
                    hash = hash * 59 + this.SlotRiser1slot3linkSpeed.GetHashCode();
                if (this.SlotRiser2linkSpeed != null)
                    hash = hash * 59 + this.SlotRiser2linkSpeed.GetHashCode();
                if (this.SlotRiser2slot4linkSpeed != null)
                    hash = hash * 59 + this.SlotRiser2slot4linkSpeed.GetHashCode();
                if (this.SlotRiser2slot5linkSpeed != null)
                    hash = hash * 59 + this.SlotRiser2slot5linkSpeed.GetHashCode();
                if (this.SlotRiser2slot6linkSpeed != null)
                    hash = hash * 59 + this.SlotRiser2slot6linkSpeed.GetHashCode();
                if (this.SlotSasState != null)
                    hash = hash * 59 + this.SlotSasState.GetHashCode();
                if (this.SlotSsdSlot1linkSpeed != null)
                    hash = hash * 59 + this.SlotSsdSlot1linkSpeed.GetHashCode();
                if (this.SlotSsdSlot2linkSpeed != null)
                    hash = hash * 59 + this.SlotSsdSlot2linkSpeed.GetHashCode();
                if (this.Smee != null)
                    hash = hash * 59 + this.Smee.GetHashCode();
                if (this.SmtMode != null)
                    hash = hash * 59 + this.SmtMode.GetHashCode();
                if (this.Snc != null)
                    hash = hash * 59 + this.Snc.GetHashCode();
                if (this.SparingMode != null)
                    hash = hash * 59 + this.SparingMode.GetHashCode();
                if (this.SrIov != null)
                    hash = hash * 59 + this.SrIov.GetHashCode();
                if (this.StreamerPrefetch != null)
                    hash = hash * 59 + this.StreamerPrefetch.GetHashCode();
                if (this.SvmMode != null)
                    hash = hash * 59 + this.SvmMode.GetHashCode();
                if (this.TerminalType != null)
                    hash = hash * 59 + this.TerminalType.GetHashCode();
                if (this.TpmControl != null)
                    hash = hash * 59 + this.TpmControl.GetHashCode();
                if (this.TpmSupport != null)
                    hash = hash * 59 + this.TpmSupport.GetHashCode();
                if (this.TxtSupport != null)
                    hash = hash * 59 + this.TxtSupport.GetHashCode();
                if (this.UcsmBootOrderRule != null)
                    hash = hash * 59 + this.UcsmBootOrderRule.GetHashCode();
                if (this.UsbEmul6064 != null)
                    hash = hash * 59 + this.UsbEmul6064.GetHashCode();
                if (this.UsbPortFront != null)
                    hash = hash * 59 + this.UsbPortFront.GetHashCode();
                if (this.UsbPortInternal != null)
                    hash = hash * 59 + this.UsbPortInternal.GetHashCode();
                if (this.UsbPortKvm != null)
                    hash = hash * 59 + this.UsbPortKvm.GetHashCode();
                if (this.UsbPortRear != null)
                    hash = hash * 59 + this.UsbPortRear.GetHashCode();
                if (this.UsbPortSdCard != null)
                    hash = hash * 59 + this.UsbPortSdCard.GetHashCode();
                if (this.UsbPortVmedia != null)
                    hash = hash * 59 + this.UsbPortVmedia.GetHashCode();
                if (this.UsbXhciSupport != null)
                    hash = hash * 59 + this.UsbXhciSupport.GetHashCode();
                if (this.VgaPriority != null)
                    hash = hash * 59 + this.VgaPriority.GetHashCode();
                if (this.VmdEnable != null)
                    hash = hash * 59 + this.VmdEnable.GetHashCode();
                if (this.WorkLoadConfig != null)
                    hash = hash * 59 + this.WorkLoadConfig.GetHashCode();
                if (this.XptPrefetch != null)
                    hash = hash * 59 + this.XptPrefetch.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
