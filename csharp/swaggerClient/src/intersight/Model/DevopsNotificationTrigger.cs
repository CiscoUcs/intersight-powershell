/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 0.1.0-559
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// This trigger sends a MO change notification for a single MO. It does so by reading the MO from the database, using &#39;motype&#39; and &#39;moid&#39;, and issuing a change notification with modification type &#39;modified&#39;. 
    /// </summary>
    [DataContract]
    public partial class DevopsNotificationTrigger :  IEquatable<DevopsNotificationTrigger>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DevopsNotificationTrigger" /> class.
        /// </summary>
        /// <param name="Moid">The Moid of the MO.  .</param>
        /// <param name="Motype">The type of the MO such as iam.Account.  .</param>
        /// <param name="PerformInSystemContext">In some scenarios it is necessary for change notifications to be processed in SystemContext. For example, when a device is claimed or unclaimed the notification must execute in SystemContext in order to move MOs related to the device between accounts. .</param>
        public DevopsNotificationTrigger(string Moid = default(string), string Motype = default(string), bool? PerformInSystemContext = default(bool?))
        {
            this.Moid = Moid;
            this.Motype = Motype;
            this.PerformInSystemContext = PerformInSystemContext;
        }
        
        /// <summary>
        /// The Moid of the MO.  
        /// </summary>
        /// <value>The Moid of the MO.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The type of the MO such as iam.Account.  
        /// </summary>
        /// <value>The type of the MO such as iam.Account.  </value>
        [DataMember(Name="Motype", EmitDefaultValue=false)]
        public string Motype { get; set; }

        /// <summary>
        /// In some scenarios it is necessary for change notifications to be processed in SystemContext. For example, when a device is claimed or unclaimed the notification must execute in SystemContext in order to move MOs related to the device between accounts. 
        /// </summary>
        /// <value>In some scenarios it is necessary for change notifications to be processed in SystemContext. For example, when a device is claimed or unclaimed the notification must execute in SystemContext in order to move MOs related to the device between accounts. </value>
        [DataMember(Name="PerformInSystemContext", EmitDefaultValue=false)]
        public bool? PerformInSystemContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DevopsNotificationTrigger {\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  Motype: ").Append(Motype).Append("\n");
            sb.Append("  PerformInSystemContext: ").Append(PerformInSystemContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DevopsNotificationTrigger);
        }

        /// <summary>
        /// Returns true if DevopsNotificationTrigger instances are equal
        /// </summary>
        /// <param name="other">Instance of DevopsNotificationTrigger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DevopsNotificationTrigger other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.Motype == other.Motype ||
                    this.Motype != null &&
                    this.Motype.Equals(other.Motype)
                ) && 
                (
                    this.PerformInSystemContext == other.PerformInSystemContext ||
                    this.PerformInSystemContext != null &&
                    this.PerformInSystemContext.Equals(other.PerformInSystemContext)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.Motype != null)
                    hash = hash * 59 + this.Motype.GetHashCode();
                if (this.PerformInSystemContext != null)
                    hash = hash * 59 + this.PerformInSystemContext.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
