/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-228
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = intersight.Client.SwaggerDateConverter;

namespace intersight.Model
{
    /// <summary>
    /// DeviceRegistration represents a device connector enabled endpoint which has registered with Intersight. 
    /// </summary>
    [DataContract]
    public partial class AssetDeviceRegistration :  IEquatable<AssetDeviceRegistration>, IValidatableObject
    {
        /// <summary>
        /// The status of the persistent connection between the device connector and Intersight.  
        /// </summary>
        /// <value>The status of the persistent connection between the device connector and Intersight.  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConnectionStatusEnum
        {
            
            /// <summary>
            /// Enum Empty for ""
            /// </summary>
            [EnumMember(Value = "")]
            Empty,
            
            /// <summary>
            /// Enum Connected for "Connected"
            /// </summary>
            [EnumMember(Value = "Connected")]
            Connected,
            
            /// <summary>
            /// Enum NotConnected for "NotConnected"
            /// </summary>
            [EnumMember(Value = "NotConnected")]
            NotConnected
        }

        /// <summary>
        /// Indicates if the platform is an actual device or an emulated device for testing, demos, etc. Permitted values [Normal, Emulator, ContainerEmulator]  
        /// </summary>
        /// <value>Indicates if the platform is an actual device or an emulated device for testing, demos, etc. Permitted values [Normal, Emulator, ContainerEmulator]  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExecutionModeEnum
        {
            
            /// <summary>
            /// Enum Empty for ""
            /// </summary>
            [EnumMember(Value = "")]
            Empty,
            
            /// <summary>
            /// Enum Normal for "Normal"
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal,
            
            /// <summary>
            /// Enum Emulator for "Emulator"
            /// </summary>
            [EnumMember(Value = "Emulator")]
            Emulator,
            
            /// <summary>
            /// Enum ContainerEmulator for "ContainerEmulator"
            /// </summary>
            [EnumMember(Value = "ContainerEmulator")]
            ContainerEmulator
        }

        /// <summary>
        /// The platform type on which device connector is executing.  
        /// </summary>
        /// <value>The platform type on which device connector is executing.  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlatformTypeEnum
        {
            
            /// <summary>
            /// Enum Empty for ""
            /// </summary>
            [EnumMember(Value = "")]
            Empty,
            
            /// <summary>
            /// Enum APIC for "APIC"
            /// </summary>
            [EnumMember(Value = "APIC")]
            APIC,
            
            /// <summary>
            /// Enum UCSFI for "UCSFI"
            /// </summary>
            [EnumMember(Value = "UCSFI")]
            UCSFI,
            
            /// <summary>
            /// Enum IMC for "IMC"
            /// </summary>
            [EnumMember(Value = "IMC")]
            IMC,
            
            /// <summary>
            /// Enum IMCM4 for "IMCM4"
            /// </summary>
            [EnumMember(Value = "IMCM4")]
            IMCM4,
            
            /// <summary>
            /// Enum IMCM5 for "IMCM5"
            /// </summary>
            [EnumMember(Value = "IMCM5")]
            IMCM5,
            
            /// <summary>
            /// Enum HX for "HX"
            /// </summary>
            [EnumMember(Value = "HX")]
            HX,
            
            /// <summary>
            /// Enum UCSD for "UCSD"
            /// </summary>
            [EnumMember(Value = "UCSD")]
            UCSD,
            
            /// <summary>
            /// Enum IntersightAppliance for "IntersightAppliance"
            /// </summary>
            [EnumMember(Value = "IntersightAppliance")]
            IntersightAppliance,
            
            /// <summary>
            /// Enum PureStorage for "PureStorage"
            /// </summary>
            [EnumMember(Value = "PureStorage")]
            PureStorage
        }

        /// <summary>
        /// The status of the persistent connection between the device connector and Intersight.  
        /// </summary>
        /// <value>The status of the persistent connection between the device connector and Intersight.  </value>
        [DataMember(Name="ConnectionStatus", EmitDefaultValue=false)]
        public ConnectionStatusEnum? ConnectionStatus { get; set; }
        /// <summary>
        /// Indicates if the platform is an actual device or an emulated device for testing, demos, etc. Permitted values [Normal, Emulator, ContainerEmulator]  
        /// </summary>
        /// <value>Indicates if the platform is an actual device or an emulated device for testing, demos, etc. Permitted values [Normal, Emulator, ContainerEmulator]  </value>
        [DataMember(Name="ExecutionMode", EmitDefaultValue=false)]
        public ExecutionModeEnum? ExecutionMode { get; set; }
        /// <summary>
        /// The platform type on which device connector is executing.  
        /// </summary>
        /// <value>The platform type on which device connector is executing.  </value>
        [DataMember(Name="PlatformType", EmitDefaultValue=false)]
        public PlatformTypeEnum? PlatformType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetDeviceRegistration" /> class.
        /// </summary>
        /// <param name="Ancestors">Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. .</param>
        /// <param name="Moid">A unique identifier of this Managed Object instance.  .</param>
        /// <param name="Owners">An array of owners which represent effective ownership of this object.   .</param>
        /// <param name="Parent">The direct ancestor of this managed object in the containment hierarchy. .</param>
        /// <param name="Tags">An array of tags, which allow to add key, value meta-data to managed objects.  .</param>
        /// <param name="VersionContext">The versioning info for this managed object   .</param>
        /// <param name="AccessKeyId">An identifier for the credential used by the device connector to authenticate with Starship.  .</param>
        /// <param name="Account">The account to which the device has been claimed. .</param>
        /// <param name="ClaimedByUser">The user who claimed the device for the account. .</param>
        /// <param name="ClusterMembers">ClusterMembers.</param>
        /// <param name="DeviceClaim">The user who claimed the device for the account. .</param>
        /// <param name="DeviceConfiguration">DeviceConfiguration.</param>
        /// <param name="DeviceHostname">The hostnames of the managed device. There can be multiple hostnames depending on the number of elements managed (ie HA clusters).  .</param>
        /// <param name="DeviceIpAddress">The IP Addresses of the managed device. There can be multiple management IPs depending on the number of elements managed (ie HA clusters) and in-band/out-of-band connectivity.  .</param>
        /// <param name="DomainGroup">The domain group to which the device has been assigned. .</param>
        /// <param name="ExecutionMode">Indicates if the platform is an actual device or an emulated device for testing, demos, etc. Permitted values [Normal, Emulator, ContainerEmulator]   (default to null).</param>
        /// <param name="Pid">The product Id of the managed device.  .</param>
        /// <param name="PlatformType">The platform type on which device connector is executing.   (default to null).</param>
        /// <param name="SecurityToken">SecurityToken.</param>
        /// <param name="Serial">A list of serial numbers of the individual device elements (eg HA primary/secondary or cluster members) which are exposed as a single unit of management by the device connector.  .</param>
        public AssetDeviceRegistration(List<MoBaseMoRef> Ancestors = default(List<MoBaseMoRef>), string Moid = default(string), List<string> Owners = default(List<string>), MoBaseMoRef Parent = default(MoBaseMoRef), List<MoTag> Tags = default(List<MoTag>), MoVersionContext VersionContext = default(MoVersionContext), string AccessKeyId = default(string), IamAccountRef Account = default(IamAccountRef), IamUserRef ClaimedByUser = default(IamUserRef), List<AssetClusterMemberRef> ClusterMembers = default(List<AssetClusterMemberRef>), AssetDeviceClaimRef DeviceClaim = default(AssetDeviceClaimRef), AssetDeviceConfigurationRef DeviceConfiguration = default(AssetDeviceConfigurationRef), List<string> DeviceHostname = default(List<string>), List<string> DeviceIpAddress = default(List<string>), IamDomainGroupRef DomainGroup = default(IamDomainGroupRef), ExecutionModeEnum? ExecutionMode = null, List<string> Pid = default(List<string>), PlatformTypeEnum? PlatformType = null, AssetSecurityTokenRef SecurityToken = default(AssetSecurityTokenRef), List<string> Serial = default(List<string>))
        {
            this.Ancestors = Ancestors;
            this.Moid = Moid;
            this.Owners = Owners;
            this.Parent = Parent;
            this.Tags = Tags;
            this.VersionContext = VersionContext;
            this.AccessKeyId = AccessKeyId;
            this.Account = Account;
            this.ClaimedByUser = ClaimedByUser;
            this.ClusterMembers = ClusterMembers;
            this.DeviceClaim = DeviceClaim;
            this.DeviceConfiguration = DeviceConfiguration;
            this.DeviceHostname = DeviceHostname;
            this.DeviceIpAddress = DeviceIpAddress;
            this.DomainGroup = DomainGroup;
            // use default value if no "ExecutionMode" provided
            if (ExecutionMode == null)
            {
                this.ExecutionMode = null;
            }
            else
            {
                this.ExecutionMode = ExecutionMode;
            }
            this.Pid = Pid;
            // use default value if no "PlatformType" provided
            if (PlatformType == null)
            {
                this.PlatformType = null;
            }
            else
            {
                this.PlatformType = PlatformType;
            }
            this.SecurityToken = SecurityToken;
            this.Serial = Serial;
        }
        
        /// <summary>
        /// The Account ID for this managed object.  
        /// </summary>
        /// <value>The Account ID for this managed object.  </value>
        [DataMember(Name="AccountMoid", EmitDefaultValue=false)]
        public string AccountMoid { get; private set; }

        /// <summary>
        /// Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. 
        /// </summary>
        /// <value>Ancestors is an array containing the MO references of the ancestors in the object containment hierarchy. </value>
        [DataMember(Name="Ancestors", EmitDefaultValue=false)]
        public List<MoBaseMoRef> Ancestors { get; set; }

        /// <summary>
        /// The time when this managed object was created.  
        /// </summary>
        /// <value>The time when this managed object was created.  </value>
        [DataMember(Name="CreateTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; private set; }

        /// <summary>
        /// The time when this managed object was last modified.  
        /// </summary>
        /// <value>The time when this managed object was last modified.  </value>
        [DataMember(Name="ModTime", EmitDefaultValue=false)]
        public DateTime? ModTime { get; private set; }

        /// <summary>
        /// A unique identifier of this Managed Object instance.  
        /// </summary>
        /// <value>A unique identifier of this Managed Object instance.  </value>
        [DataMember(Name="Moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// The fully-qualified type of this managed object, e.g. the class name.  
        /// </summary>
        /// <value>The fully-qualified type of this managed object, e.g. the class name.  </value>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; private set; }

        /// <summary>
        /// An array of owners which represent effective ownership of this object.   
        /// </summary>
        /// <value>An array of owners which represent effective ownership of this object.   </value>
        [DataMember(Name="Owners", EmitDefaultValue=false)]
        public List<string> Owners { get; set; }

        /// <summary>
        /// The direct ancestor of this managed object in the containment hierarchy. 
        /// </summary>
        /// <value>The direct ancestor of this managed object in the containment hierarchy. </value>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public MoBaseMoRef Parent { get; set; }

        /// <summary>
        /// An array of tags, which allow to add key, value meta-data to managed objects.  
        /// </summary>
        /// <value>An array of tags, which allow to add key, value meta-data to managed objects.  </value>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List<MoTag> Tags { get; set; }

        /// <summary>
        /// The versioning info for this managed object   
        /// </summary>
        /// <value>The versioning info for this managed object   </value>
        [DataMember(Name="VersionContext", EmitDefaultValue=false)]
        public MoVersionContext VersionContext { get; set; }

        /// <summary>
        /// The version of the connector api. Describes the capability of the connector&#39;s framework. If the version is lower than the current minimum supported version defined in the service managing the connection, the device connector will be connected with limited capabilities until the device connector is upgraded to a fully supported version. For example if a device connector that was released without delta inventory capabilities registers and connects to Intersight, inventory collection may be disabled until it has been upgraded. 
        /// </summary>
        /// <value>The version of the connector api. Describes the capability of the connector&#39;s framework. If the version is lower than the current minimum supported version defined in the service managing the connection, the device connector will be connected with limited capabilities until the device connector is upgraded to a fully supported version. For example if a device connector that was released without delta inventory capabilities registers and connects to Intersight, inventory collection may be disabled until it has been upgraded. </value>
        [DataMember(Name="ApiVersion", EmitDefaultValue=false)]
        public long? ApiVersion { get; private set; }

        /// <summary>
        /// The partition number corresponding to the instance of the Proxy App which is managing the web-socket to the device connector.  
        /// </summary>
        /// <value>The partition number corresponding to the instance of the Proxy App which is managing the web-socket to the device connector.  </value>
        [DataMember(Name="AppPartitionNumber", EmitDefaultValue=false)]
        public long? AppPartitionNumber { get; private set; }

        /// <summary>
        /// The unique identifier for the current connection. The identifier persists across network connectivity loss and is reset on device connector process restart or platform administrator toggle of the Intersight connectivity. The connectionId can be used by services that need to interact with stateful plugins running in the device connector process. For example if a service schedules an inventory in a devices job scheduler plugin at registration it is not necessary to reschedule the job if the device loses network connectivity due to an Intersight service upgrade or intermittent network issues in the devices datacenter.  
        /// </summary>
        /// <value>The unique identifier for the current connection. The identifier persists across network connectivity loss and is reset on device connector process restart or platform administrator toggle of the Intersight connectivity. The connectionId can be used by services that need to interact with stateful plugins running in the device connector process. For example if a service schedules an inventory in a devices job scheduler plugin at registration it is not necessary to reschedule the job if the device loses network connectivity due to an Intersight service upgrade or intermittent network issues in the devices datacenter.  </value>
        [DataMember(Name="ConnectionId", EmitDefaultValue=false)]
        public string ConnectionId { get; private set; }

        /// <summary>
        /// If &#39;connectionStatus&#39; is not equal to Connected, connectionReason provides further details about why the device is not connected with the cloud.  
        /// </summary>
        /// <value>If &#39;connectionStatus&#39; is not equal to Connected, connectionReason provides further details about why the device is not connected with the cloud.  </value>
        [DataMember(Name="ConnectionReason", EmitDefaultValue=false)]
        public string ConnectionReason { get; private set; }


        /// <summary>
        /// The last time at which the &#39;connectionStatus&#39; property value changed. If connectionStatus is Connected, this time can be interpreted as the starting time since which a persistent connection has been maintained between the cloud and device connector. If connectionStatus is NotConnected, this time can be interpreted as the last time the device connector was connected with the cloud.  
        /// </summary>
        /// <value>The last time at which the &#39;connectionStatus&#39; property value changed. If connectionStatus is Connected, this time can be interpreted as the starting time since which a persistent connection has been maintained between the cloud and device connector. If connectionStatus is NotConnected, this time can be interpreted as the last time the device connector was connected with the cloud.  </value>
        [DataMember(Name="ConnectionStatusLastChangeTime", EmitDefaultValue=false)]
        public DateTime? ConnectionStatusLastChangeTime { get; private set; }

        /// <summary>
        /// The version of the device connector running on the managed device.  
        /// </summary>
        /// <value>The version of the device connector running on the managed device.  </value>
        [DataMember(Name="ConnectorVersion", EmitDefaultValue=false)]
        public string ConnectorVersion { get; private set; }

        /// <summary>
        /// The IP Address of the managed device as seen from the cloud at the time of registration. Eg this could be the IP of the managed device&#39;s interface which has a route to the internet or a NAT IP when the managed device is deployed in a private network.  
        /// </summary>
        /// <value>The IP Address of the managed device as seen from the cloud at the time of registration. Eg this could be the IP of the managed device&#39;s interface which has a route to the internet or a NAT IP when the managed device is deployed in a private network.  </value>
        [DataMember(Name="DeviceExternalIpAddress", EmitDefaultValue=false)]
        public string DeviceExternalIpAddress { get; private set; }

        /// <summary>
        /// The name of the app which will proxy the messages to the device connector.   
        /// </summary>
        /// <value>The name of the app which will proxy the messages to the device connector.   </value>
        [DataMember(Name="ProxyApp", EmitDefaultValue=false)]
        public string ProxyApp { get; private set; }

        /// <summary>
        /// An identifier for the credential used by the device connector to authenticate with Starship.  
        /// </summary>
        /// <value>An identifier for the credential used by the device connector to authenticate with Starship.  </value>
        [DataMember(Name="AccessKeyId", EmitDefaultValue=false)]
        public string AccessKeyId { get; set; }

        /// <summary>
        /// The account to which the device has been claimed. 
        /// </summary>
        /// <value>The account to which the device has been claimed. </value>
        [DataMember(Name="Account", EmitDefaultValue=false)]
        public IamAccountRef Account { get; set; }

        /// <summary>
        /// The user who claimed the device for the account. 
        /// </summary>
        /// <value>The user who claimed the device for the account. </value>
        [DataMember(Name="ClaimedByUser", EmitDefaultValue=false)]
        public IamUserRef ClaimedByUser { get; set; }

        /// <summary>
        /// The name of the user who claimed the device for the account.  
        /// </summary>
        /// <value>The name of the user who claimed the device for the account.  </value>
        [DataMember(Name="ClaimedByUserName", EmitDefaultValue=false)]
        public string ClaimedByUserName { get; private set; }

        /// <summary>
        /// The date and time at which the device was claimed to this account.  
        /// </summary>
        /// <value>The date and time at which the device was claimed to this account.  </value>
        [DataMember(Name="ClaimedTime", EmitDefaultValue=false)]
        public DateTime? ClaimedTime { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterMembers
        /// </summary>
        [DataMember(Name="ClusterMembers", EmitDefaultValue=false)]
        public List<AssetClusterMemberRef> ClusterMembers { get; set; }

        /// <summary>
        /// The user who claimed the device for the account. 
        /// </summary>
        /// <value>The user who claimed the device for the account. </value>
        [DataMember(Name="DeviceClaim", EmitDefaultValue=false)]
        public AssetDeviceClaimRef DeviceClaim { get; set; }

        /// <summary>
        /// Gets or Sets DeviceConfiguration
        /// </summary>
        [DataMember(Name="DeviceConfiguration", EmitDefaultValue=false)]
        public AssetDeviceConfigurationRef DeviceConfiguration { get; set; }

        /// <summary>
        /// The hostnames of the managed device. There can be multiple hostnames depending on the number of elements managed (ie HA clusters).  
        /// </summary>
        /// <value>The hostnames of the managed device. There can be multiple hostnames depending on the number of elements managed (ie HA clusters).  </value>
        [DataMember(Name="DeviceHostname", EmitDefaultValue=false)]
        public List<string> DeviceHostname { get; set; }

        /// <summary>
        /// The IP Addresses of the managed device. There can be multiple management IPs depending on the number of elements managed (ie HA clusters) and in-band/out-of-band connectivity.  
        /// </summary>
        /// <value>The IP Addresses of the managed device. There can be multiple management IPs depending on the number of elements managed (ie HA clusters) and in-band/out-of-band connectivity.  </value>
        [DataMember(Name="DeviceIpAddress", EmitDefaultValue=false)]
        public List<string> DeviceIpAddress { get; set; }

        /// <summary>
        /// The domain group to which the device has been assigned. 
        /// </summary>
        /// <value>The domain group to which the device has been assigned. </value>
        [DataMember(Name="DomainGroup", EmitDefaultValue=false)]
        public IamDomainGroupRef DomainGroup { get; set; }


        /// <summary>
        /// The product Id of the managed device.  
        /// </summary>
        /// <value>The product Id of the managed device.  </value>
        [DataMember(Name="Pid", EmitDefaultValue=false)]
        public List<string> Pid { get; set; }


        /// <summary>
        /// The device connector&#39;s public key used by the cloud to authenticate a connection from the device connector. The public key is used to verify that the signature a device connector sends on connect has been signed by the connector&#39;s private key stored on the device&#39;s filesystem. Must be a PEM encoded RSA public key string.   
        /// </summary>
        /// <value>The device connector&#39;s public key used by the cloud to authenticate a connection from the device connector. The public key is used to verify that the signature a device connector sends on connect has been signed by the connector&#39;s private key stored on the device&#39;s filesystem. Must be a PEM encoded RSA public key string.   </value>
        [DataMember(Name="PublicAccessKey", EmitDefaultValue=false)]
        public string PublicAccessKey { get; private set; }

        /// <summary>
        /// Flag reported by devices to indicate an administrator of the device has disabled management operations of the device connector and only monitoring is permitted.  
        /// </summary>
        /// <value>Flag reported by devices to indicate an administrator of the device has disabled management operations of the device connector and only monitoring is permitted.  </value>
        [DataMember(Name="ReadOnly", EmitDefaultValue=false)]
        public bool? _ReadOnly { get; private set; }

        /// <summary>
        /// Gets or Sets SecurityToken
        /// </summary>
        [DataMember(Name="SecurityToken", EmitDefaultValue=false)]
        public AssetSecurityTokenRef SecurityToken { get; set; }

        /// <summary>
        /// A list of serial numbers of the individual device elements (eg HA primary/secondary or cluster members) which are exposed as a single unit of management by the device connector.  
        /// </summary>
        /// <value>A list of serial numbers of the individual device elements (eg HA primary/secondary or cluster members) which are exposed as a single unit of management by the device connector.  </value>
        [DataMember(Name="Serial", EmitDefaultValue=false)]
        public List<string> Serial { get; set; }

        /// <summary>
        /// The vendor of the managed device.   
        /// </summary>
        /// <value>The vendor of the managed device.   </value>
        [DataMember(Name="Vendor", EmitDefaultValue=false)]
        public string Vendor { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetDeviceRegistration {\n");
            sb.Append("  AccountMoid: ").Append(AccountMoid).Append("\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ModTime: ").Append(ModTime).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  VersionContext: ").Append(VersionContext).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  AppPartitionNumber: ").Append(AppPartitionNumber).Append("\n");
            sb.Append("  ConnectionId: ").Append(ConnectionId).Append("\n");
            sb.Append("  ConnectionReason: ").Append(ConnectionReason).Append("\n");
            sb.Append("  ConnectionStatus: ").Append(ConnectionStatus).Append("\n");
            sb.Append("  ConnectionStatusLastChangeTime: ").Append(ConnectionStatusLastChangeTime).Append("\n");
            sb.Append("  ConnectorVersion: ").Append(ConnectorVersion).Append("\n");
            sb.Append("  DeviceExternalIpAddress: ").Append(DeviceExternalIpAddress).Append("\n");
            sb.Append("  ProxyApp: ").Append(ProxyApp).Append("\n");
            sb.Append("  AccessKeyId: ").Append(AccessKeyId).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  ClaimedByUser: ").Append(ClaimedByUser).Append("\n");
            sb.Append("  ClaimedByUserName: ").Append(ClaimedByUserName).Append("\n");
            sb.Append("  ClaimedTime: ").Append(ClaimedTime).Append("\n");
            sb.Append("  ClusterMembers: ").Append(ClusterMembers).Append("\n");
            sb.Append("  DeviceClaim: ").Append(DeviceClaim).Append("\n");
            sb.Append("  DeviceConfiguration: ").Append(DeviceConfiguration).Append("\n");
            sb.Append("  DeviceHostname: ").Append(DeviceHostname).Append("\n");
            sb.Append("  DeviceIpAddress: ").Append(DeviceIpAddress).Append("\n");
            sb.Append("  DomainGroup: ").Append(DomainGroup).Append("\n");
            sb.Append("  ExecutionMode: ").Append(ExecutionMode).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  PlatformType: ").Append(PlatformType).Append("\n");
            sb.Append("  PublicAccessKey: ").Append(PublicAccessKey).Append("\n");
            sb.Append("  _ReadOnly: ").Append(_ReadOnly).Append("\n");
            sb.Append("  SecurityToken: ").Append(SecurityToken).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AssetDeviceRegistration);
        }

        /// <summary>
        /// Returns true if AssetDeviceRegistration instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetDeviceRegistration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetDeviceRegistration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountMoid == other.AccountMoid ||
                    this.AccountMoid != null &&
                    this.AccountMoid.Equals(other.AccountMoid)
                ) && 
                (
                    this.Ancestors == other.Ancestors ||
                    this.Ancestors != null &&
                    this.Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.ModTime == other.ModTime ||
                    this.ModTime != null &&
                    this.ModTime.Equals(other.ModTime)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.Owners == other.Owners ||
                    this.Owners != null &&
                    this.Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.VersionContext == other.VersionContext ||
                    this.VersionContext != null &&
                    this.VersionContext.Equals(other.VersionContext)
                ) && 
                (
                    this.ApiVersion == other.ApiVersion ||
                    this.ApiVersion != null &&
                    this.ApiVersion.Equals(other.ApiVersion)
                ) && 
                (
                    this.AppPartitionNumber == other.AppPartitionNumber ||
                    this.AppPartitionNumber != null &&
                    this.AppPartitionNumber.Equals(other.AppPartitionNumber)
                ) && 
                (
                    this.ConnectionId == other.ConnectionId ||
                    this.ConnectionId != null &&
                    this.ConnectionId.Equals(other.ConnectionId)
                ) && 
                (
                    this.ConnectionReason == other.ConnectionReason ||
                    this.ConnectionReason != null &&
                    this.ConnectionReason.Equals(other.ConnectionReason)
                ) && 
                (
                    this.ConnectionStatus == other.ConnectionStatus ||
                    this.ConnectionStatus != null &&
                    this.ConnectionStatus.Equals(other.ConnectionStatus)
                ) && 
                (
                    this.ConnectionStatusLastChangeTime == other.ConnectionStatusLastChangeTime ||
                    this.ConnectionStatusLastChangeTime != null &&
                    this.ConnectionStatusLastChangeTime.Equals(other.ConnectionStatusLastChangeTime)
                ) && 
                (
                    this.ConnectorVersion == other.ConnectorVersion ||
                    this.ConnectorVersion != null &&
                    this.ConnectorVersion.Equals(other.ConnectorVersion)
                ) && 
                (
                    this.DeviceExternalIpAddress == other.DeviceExternalIpAddress ||
                    this.DeviceExternalIpAddress != null &&
                    this.DeviceExternalIpAddress.Equals(other.DeviceExternalIpAddress)
                ) && 
                (
                    this.ProxyApp == other.ProxyApp ||
                    this.ProxyApp != null &&
                    this.ProxyApp.Equals(other.ProxyApp)
                ) && 
                (
                    this.AccessKeyId == other.AccessKeyId ||
                    this.AccessKeyId != null &&
                    this.AccessKeyId.Equals(other.AccessKeyId)
                ) && 
                (
                    this.Account == other.Account ||
                    this.Account != null &&
                    this.Account.Equals(other.Account)
                ) && 
                (
                    this.ClaimedByUser == other.ClaimedByUser ||
                    this.ClaimedByUser != null &&
                    this.ClaimedByUser.Equals(other.ClaimedByUser)
                ) && 
                (
                    this.ClaimedByUserName == other.ClaimedByUserName ||
                    this.ClaimedByUserName != null &&
                    this.ClaimedByUserName.Equals(other.ClaimedByUserName)
                ) && 
                (
                    this.ClaimedTime == other.ClaimedTime ||
                    this.ClaimedTime != null &&
                    this.ClaimedTime.Equals(other.ClaimedTime)
                ) && 
                (
                    this.ClusterMembers == other.ClusterMembers ||
                    this.ClusterMembers != null &&
                    this.ClusterMembers.SequenceEqual(other.ClusterMembers)
                ) && 
                (
                    this.DeviceClaim == other.DeviceClaim ||
                    this.DeviceClaim != null &&
                    this.DeviceClaim.Equals(other.DeviceClaim)
                ) && 
                (
                    this.DeviceConfiguration == other.DeviceConfiguration ||
                    this.DeviceConfiguration != null &&
                    this.DeviceConfiguration.Equals(other.DeviceConfiguration)
                ) && 
                (
                    this.DeviceHostname == other.DeviceHostname ||
                    this.DeviceHostname != null &&
                    this.DeviceHostname.SequenceEqual(other.DeviceHostname)
                ) && 
                (
                    this.DeviceIpAddress == other.DeviceIpAddress ||
                    this.DeviceIpAddress != null &&
                    this.DeviceIpAddress.SequenceEqual(other.DeviceIpAddress)
                ) && 
                (
                    this.DomainGroup == other.DomainGroup ||
                    this.DomainGroup != null &&
                    this.DomainGroup.Equals(other.DomainGroup)
                ) && 
                (
                    this.ExecutionMode == other.ExecutionMode ||
                    this.ExecutionMode != null &&
                    this.ExecutionMode.Equals(other.ExecutionMode)
                ) && 
                (
                    this.Pid == other.Pid ||
                    this.Pid != null &&
                    this.Pid.SequenceEqual(other.Pid)
                ) && 
                (
                    this.PlatformType == other.PlatformType ||
                    this.PlatformType != null &&
                    this.PlatformType.Equals(other.PlatformType)
                ) && 
                (
                    this.PublicAccessKey == other.PublicAccessKey ||
                    this.PublicAccessKey != null &&
                    this.PublicAccessKey.Equals(other.PublicAccessKey)
                ) && 
                (
                    this._ReadOnly == other._ReadOnly ||
                    this._ReadOnly != null &&
                    this._ReadOnly.Equals(other._ReadOnly)
                ) && 
                (
                    this.SecurityToken == other.SecurityToken ||
                    this.SecurityToken != null &&
                    this.SecurityToken.Equals(other.SecurityToken)
                ) && 
                (
                    this.Serial == other.Serial ||
                    this.Serial != null &&
                    this.Serial.SequenceEqual(other.Serial)
                ) && 
                (
                    this.Vendor == other.Vendor ||
                    this.Vendor != null &&
                    this.Vendor.Equals(other.Vendor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountMoid != null)
                    hash = hash * 59 + this.AccountMoid.GetHashCode();
                if (this.Ancestors != null)
                    hash = hash * 59 + this.Ancestors.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.ModTime != null)
                    hash = hash * 59 + this.ModTime.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.Owners != null)
                    hash = hash * 59 + this.Owners.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.VersionContext != null)
                    hash = hash * 59 + this.VersionContext.GetHashCode();
                if (this.ApiVersion != null)
                    hash = hash * 59 + this.ApiVersion.GetHashCode();
                if (this.AppPartitionNumber != null)
                    hash = hash * 59 + this.AppPartitionNumber.GetHashCode();
                if (this.ConnectionId != null)
                    hash = hash * 59 + this.ConnectionId.GetHashCode();
                if (this.ConnectionReason != null)
                    hash = hash * 59 + this.ConnectionReason.GetHashCode();
                if (this.ConnectionStatus != null)
                    hash = hash * 59 + this.ConnectionStatus.GetHashCode();
                if (this.ConnectionStatusLastChangeTime != null)
                    hash = hash * 59 + this.ConnectionStatusLastChangeTime.GetHashCode();
                if (this.ConnectorVersion != null)
                    hash = hash * 59 + this.ConnectorVersion.GetHashCode();
                if (this.DeviceExternalIpAddress != null)
                    hash = hash * 59 + this.DeviceExternalIpAddress.GetHashCode();
                if (this.ProxyApp != null)
                    hash = hash * 59 + this.ProxyApp.GetHashCode();
                if (this.AccessKeyId != null)
                    hash = hash * 59 + this.AccessKeyId.GetHashCode();
                if (this.Account != null)
                    hash = hash * 59 + this.Account.GetHashCode();
                if (this.ClaimedByUser != null)
                    hash = hash * 59 + this.ClaimedByUser.GetHashCode();
                if (this.ClaimedByUserName != null)
                    hash = hash * 59 + this.ClaimedByUserName.GetHashCode();
                if (this.ClaimedTime != null)
                    hash = hash * 59 + this.ClaimedTime.GetHashCode();
                if (this.ClusterMembers != null)
                    hash = hash * 59 + this.ClusterMembers.GetHashCode();
                if (this.DeviceClaim != null)
                    hash = hash * 59 + this.DeviceClaim.GetHashCode();
                if (this.DeviceConfiguration != null)
                    hash = hash * 59 + this.DeviceConfiguration.GetHashCode();
                if (this.DeviceHostname != null)
                    hash = hash * 59 + this.DeviceHostname.GetHashCode();
                if (this.DeviceIpAddress != null)
                    hash = hash * 59 + this.DeviceIpAddress.GetHashCode();
                if (this.DomainGroup != null)
                    hash = hash * 59 + this.DomainGroup.GetHashCode();
                if (this.ExecutionMode != null)
                    hash = hash * 59 + this.ExecutionMode.GetHashCode();
                if (this.Pid != null)
                    hash = hash * 59 + this.Pid.GetHashCode();
                if (this.PlatformType != null)
                    hash = hash * 59 + this.PlatformType.GetHashCode();
                if (this.PublicAccessKey != null)
                    hash = hash * 59 + this.PublicAccessKey.GetHashCode();
                if (this._ReadOnly != null)
                    hash = hash * 59 + this._ReadOnly.GetHashCode();
                if (this.SecurityToken != null)
                    hash = hash * 59 + this.SecurityToken.GetHashCode();
                if (this.Serial != null)
                    hash = hash * 59 + this.Serial.GetHashCode();
                if (this.Vendor != null)
                    hash = hash * 59 + this.Vendor.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
